var all_function = "nsIProtocolProxyService2.idl \nvoid reloadPAC() \nnsIAuthPromptAdapterFactory.idl \nnsIAuthPrompt2 createAdapter( nsIAuthPrompt aPrompt) \nnsIFilePicker.idl \nattribute AString defaultString \nattribute AString defaultExtension \nattribute long filterIndex \nattribute nsILocalFile displayDirectory \nvoid init( nsIDOMWindow parent, AString title, short mode) \nvoid appendFilters( long filterMask) \nvoid appendFilter( AString title, AString filter) \nshort show() \nnsIAccessibleHyperText.idl \nnsIAccessibleHyperLink getLinkAt( long index) \nlong getLinkIndex( nsIAccessibleHyperLink link) \nlong getLinkIndexAtOffset( long offset) \nnsIWifiMonitor.idl \nvoid startWatching( nsIWifiListener aListener) \nvoid stopWatching( nsIWifiListener aListener) \nnsIDOMSVGAnimatedEnum.idl \nattribute unsignedshort baseVal \nnsIByteRangeRequest.idl \nnsIDOMHTMLSourceElement.idl \nattribute DOMString src \nattribute DOMString type \nnsIExternalProtocolHandler.idl \nboolean externalAppExistsForScheme( ACString scheme) \nnsIAccessibleSelectable.idl \nnsIArray GetSelectedChildren() \nvoid addChildToSelection( long index) \nvoid removeChildFromSelection( long index) \nvoid clearSelection() \nnsIAccessible refSelection( long index) \nboolean isChildSelected( long index) \nboolean selectAllSelection() \nnsIScriptableUConv.idl \nattribute string charset \nattribute boolean isInternal \nACString ConvertFromUnicode( AString aSrc) \nACString Finish() \nAString ConvertToUnicode( ACString aSrc) \nAString convertFromByteArray( octet aData, unsignedlong aCount) \nvoid convertToByteArray( AString aString, unsignedlong aLen, octet aData) \nnsIInputStream convertToInputStream( AString aString) \nnsIHistoryEntry.idl \nnsICacheService.idl \nnsICacheSession createSession( string clientID, nsCacheStoragePolicy storagePolicy, boolean streamBased) \nvoid visitEntries( nsICacheVisitor visitor) \nvoid evictEntries( nsCacheStoragePolicy storagePolicy) \nnsIWebPageDescriptor.idl \nvoid loadPage( nsISupports aPageDescriptor, unsignedlong aDisplayType) \nnsIDOMHTMLOListElement.idl \nattribute boolean compact \nattribute long start \nattribute DOMString type \nnsIPlaintextEditor.idl \nattribute long maxTextLength \nattribute long wrapWidth \nattribute long newlineHandling \nvoid setWrapColumn( long aWrapColumn) \nvoid insertText( DOMString aStringToInsert) \nvoid insertLineBreak() \nnsIDOMCSSMozDocumentRule.idl \nunsignedlong insertRule( DOMString rule, unsignedlong index) \nvoid deleteRule( unsignedlong index) \nnsIStreamListener.idl \nvoid onDataAvailable( nsIRequest aRequest, nsISupports aContext, nsIInputStream aInputStream, unsignedlong aOffset, unsignedlong aCount) \nnsIImageLoadingContent.idl \nattribute boolean loadingEnabled \nvoid addObserver( imgIDecoderObserver aObserver) \nvoid removeObserver( imgIDecoderObserver aObserver) \nimgIRequest getRequest( long aRequestType) \nlong getRequestType( imgIRequest aRequest) \nnsIStreamListener loadImageWithChannel( nsIChannel aChannel) \nvoid forceReload() \nvoid forceImageState( boolean aForce, unsignedlong long aState) \nvoid NotifyOwnerDocumentChanged( nsIDocument aOldDoc) \nnsIConsoleService.idl \nvoid logMessage( nsIConsoleMessage message) \nvoid logStringMessage( wstring message) \nvoid getMessageArray( nsIConsoleMessage messages, PRUint32 count) \nvoid registerListener( nsIConsoleListener listener) \nvoid unregisterListener( nsIConsoleListener listener) \nvoid reset() \nnsIDOMLSParser.idl \nattribute nsIDOMLSParserFilter filter \nnsIDOMDocument parse( nsIDOMLSInput input) \nnsIDOMDocument parseURI( DOMString uri) \nnsIDOMNode parseWithContext( nsIDOMLSInput input, nsIDOMNode contextArg, unsignedshort action) \nvoid abort() \nnsILDAPSyncQuery.idl \nwstring getQueryResults( nsILDAPURL aServerURL, unsignedlong aProtocolVersion) \nnsISHistoryInternal.idl \nattribute nsIDocShell rootDocShell \nvoid addEntry( nsISHEntry aEntry, boolean aPersist) \nvoid updateIndex() \nvoid replaceEntry( long aIndex, nsISHEntry aReplaceEntry) \nvoid evictContentViewers( long previousIndex, long index) \nvoid evictExpiredContentViewerForEntry( nsISHEntry aEntry) \nvoid evictAllContentViewers() \nvoid RemoveEntries( nsDocshellIDArray aIDs, long aStartIndex) \nfuelIApplication.idl \nboolean has( AString aName) \nnsIVariant get( AString aName) \nvoid set( AString aName, nsIVariant aValue, PRInt32 aExpiration) \nvoid remove( AString aName) \nnsIDOMSVGForeignObjectElem.idl \nnsILoginManagerPrompter.idl \nvoid init( nsIDOMWindow aWindow) \nvoid promptToSavePassword( nsILoginInfo aLogin) \nvoid promptToChangePassword( nsILoginInfo aOldLogin, nsILoginInfo aNewLogin) \nvoid promptToChangePasswordWithUsernames( nsILoginInfo logins, PRUint32 count, nsILoginInfo aNewLogin) \nnsILocale.idl \nnsIIDBCursor.idl \nvoid continue( jsval key) \nnsIIDBRequest update( jsval value) \nnsIIDBRequest delete() \nnsIDOMPluginArray.idl \nnsIDOMPlug item( unsignedlong index) \nnsIDOMPlug namedItem( DOMString name) \nvoid refresh( boolean reloadDocuments) \nAccessibleHyperlink.idl \nHRESULT anchor( long index, VARIANT anchor) \nHRESULT anchorTarget( long index, VARIANT anchorTarget) \nHRESULT startIndex( long index) \nHRESULT endIndex( long index) \nHRESULT valid( boolean valid) \nnsIDOMHTMLFrameSetElement.idl \nattribute DOMString cols \nattribute DOMString rows \nnsIFormFillController.idl \nvoid attachToBrowser( nsIDocShell docShell, nsIAutoCompletePopup popup) \nvoid detachFromBrowser( nsIDocShell docShell) \nvoid markAsLoginManagerField( nsIDOMHTMLInputElement aInput) \nnsIDOMHTMLSelectElement.idl \nattribute boolean autofocus \nattribute boolean disabled \nattribute boolean multiple \nattribute DOMString name \nattribute long size \nattribute unsignedlong length \nattribute long selectedIndex \nattribute DOMString value \nattribute long tabIndex \nnsIDOMNode item( unsignedlong index) \nnsIDOMNode namedItem( DOMString name) \nvoid add( nsIDOMHTMLElement element, nsIDOMHTMLElement before) \nvoid remove( long index) \nvoid blur() \nvoid focus() \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nxpccomponents.idl \nnsIContentPrefService.idl \nvoid onContentPrefSet( AString aGroup, AString aName, nsIVariant aValue) \nvoid onContentPrefRemoved( AString aGroup, AString aName) \nnsIWebBrowserFocus.idl \nattribute nsIDOMWindow focusedWindow \nattribute nsIDOMElement focusedElement \nvoid activate() \nvoid deactivate() \nvoid setFocusAtFirstElement() \nvoid setFocusAtLastElement() \nnsINotificationsList.idl \nvoid addNotification( AString aName, boolean aEnabled) \nboolean isNotification( AString aName) \nnsIEventTarget.idl \nvoid dispatch( nsIRunnable event, unsignedlong flags) \nboolean isOnCurrentThread() \nAccessibleImage.idl \nHRESULT description( BSTR description) \nHRESULT imagePosition( enum IA2CoordinateType coordinateType,long x,long y) \nHRESULT imageSize( long height,long width) \nnsIDocShellTreeNode.idl \nvoid addChild( nsIDocShellTreeItem child) \nvoid removeChild( nsIDocShellTreeItem child) \nnsIDocShellTreeItem getChildAt( long index) \nnsIDocShellTreeItem findChildWithName( wstring aName, boolean aRecurse, boolean aSameType, nsIDocShellTreeItem aRequestor, nsIDocShellTreeItem aOriginalRequestor) \nnsIContentDispatchChooser.idl \nvoid ask( nsIHandlerInfo aHandler, nsIInterfaceRequestor aWindowContext, nsIURI aURI, unsignedlong aReason) \nnsIURIClassifier.idl \nvoid onClassifyComplete( nsresult aErrorCode) \nnsIDOMHTMLInputElement.idl \nattribute DOMString accept \nattribute DOMString alt \nattribute DOMString autocomplete \nattribute boolean autofocus \nattribute boolean defaultChecked \nattribute boolean checked \nattribute boolean disabled \nattribute DOMString formAction \nattribute DOMString formEnctype \nattribute DOMString formMethod \nattribute boolean formNoValidate \nattribute DOMString formTarget \nattribute boolean indeterminate \nattribute long maxLength \nattribute boolean multiple \nattribute DOMString name \nattribute DOMString pattern \nattribute DOMString placeholder \nattribute boolean readOnly \nattribute boolean required \nattribute DOMString accessKey \nattribute DOMString align \nattribute unsignedlong size \nattribute DOMString src \nattribute DOMString type \nattribute DOMString defaultValue \nattribute DOMString value \nattribute long selectionStart \nattribute long selectionEnd \nattribute long tabIndex \nattribute DOMString useMap \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nvoid select() \nvoid setSelectionRange( long selectionStart, long selectionEnd) \nvoid mozGetFileNameArray( unsignedlong aLength, wstring aFileNames) \nvoid mozSetFileNameArray( wstring aFileNames, unsignedlong aLength) \nboolean mozIsTextField( boolean aExcludePassword) \nvoid blur() \nvoid focus() \nvoid click() \nnsIDOMHTMLCollection.idl \nnsIDOMNode item( unsignedlong index) \nnsIDOMNode namedItem( DOMString name) \nnsIZipReader.idl \nnsIIconURI.idl \nattribute nsIURL iconURL \nattribute unsignedlong imageSize \nattribute ACString contentType \nnsIDOMDocumentType.idl \nnsILoginManagerStorage.idl \nvoid init() \nvoid initWithFile( nsIFile aInputFile, nsIFile aOutputFile) \nvoid addLogin( nsILoginInfo aLogin) \nvoid removeLogin( nsILoginInfo aLogin) \nvoid modifyLogin( nsILoginInfo oldLogin, nsISupports newLoginData) \nvoid removeAllLogins() \nvoid getAllLogins( unsignedlong count, nsILoginInfo logins) \nvoid getAllEncryptedLogins( unsignedlong count, nsILoginInfo logins) \nnsIDOMHTMLTableSectionElem.idl \nattribute DOMString align \nattribute DOMString ch \nattribute DOMString chOff \nattribute DOMString vAlign \nnsIDOMHTMLElement insertRow( long index) \nvoid deleteRow( long index) \nnsIDOMNSFeatureFactory.idl \nboolean hasFeature( nsISupports object, DOMString feature, DOMString version) \nnsISupports getFeature( nsISupports object, DOMString feature, DOMString version) \nnsIDOMStorageItem.idl \nattribute boolean secure \nattribute DOMString value \nnsIGnomeVFSService.idl \nvoid launch( AUTF8String uri) \nnsIBidiKeyboard.idl \nboolean isLangRTL() \nvoid setLangFromBidiLevel( PRUint8 aLevel) \nnsIX509CertDB.idl \nnsICacheEntryDescriptor.idl \nattribute nsISupports cacheElement \nattribute PRInt64 predictedDataSize \nattribute nsCacheStoragePolicy storagePolicy \nattribute nsISupports securityInfo \nvoid setExpirationTime( PRUint32 expirationTime) \nvoid setDataSize( unsignedlong size) \nnsIInputStream openInputStream( unsignedlong offset) \nnsIOutputStream openOutputStream( unsignedlong offset) \nvoid doom() \nvoid doomAndFailPendingRequests( nsresult status) \nvoid markValid() \nvoid close() \nstring getMetaDataElement( string key) \nvoid setMetaDataElement( string key, string value) \nvoid visitMetaData( nsICacheMetaDataVisitor visitor) \nIWeaveCrypto.idl \nattribute unsignedlong algorithm \nattribute unsignedlong keypairBits \nACString encrypt( AUTF8String clearText, ACString symmetricKey, ACString iv) \nAUTF8String decrypt( ACString cipherText, ACString symmetricKey, ACString iv) \nvoid generateKeypair( ACString aPassphrase, ACString aSalt, ACString aIV, ACString aEncodedPublicKey, ACString aWrappedPrivateKey) \nACString generateRandomKey() \nACString generateRandomIV() \nACString generateRandomBytes( unsignedlong aByteCount) \nACString wrapSymmetricKey( ACString aSymmetricKey, ACString aEncodedPublicKey) \nACString unwrapSymmetricKey( ACString aWrappedSymmetricKey, ACString aWrappedPrivateKey, ACString aPassphrase, ACString aSalt, ACString aIV) \nACString rewrapPrivateKey( ACString aWrappedPrivateKey, ACString aPassphrase, ACString aSalt, ACString aIV, ACString aNewPassphrase) \nboolean verifyPassphrase( ACString aWrappedPrivateKey, ACString aPassphrase, ACString aSalt, ACString aIV) \nnsIDOMCSSRuleList.idl \nnsIDOMCSSRule item( unsignedlong index) \nnsIDynamicContainer.idl \nvoid onContainerNodeOpening( nsINavHistoryContainerResultNode aContainer, nsINavHistoryQueryOptions aOptions) \nvoid onContainerNodeClosed( nsINavHistoryContainerResultNode aContainer) \nvoid onContainerRemoving( long long aItemId) \nvoid onContainerMoved( long long aItemId, long long aNewParent, long aNewIndex) \nnsIShellService.idl \nattribute boolean shouldCheckDefaultBrowser \nattribute unsignedlong desktopBackgroundColor \nboolean isDefaultBrowser( boolean aStartupCheck) \nvoid setDefaultBrowser( boolean aClaimAllTypes, boolean aForAllUsers) \nvoid setDesktopBackground( nsIDOMElement aElement, long aPosition) \nvoid openApplication( long aApplication) \nvoid openApplicationWithURI( nsILocalFile aApplication, ACString aURI) \nnsIDOMAttr.idl \nattribute DOMString value \nnsIViewSourceChannel.idl \nattribute ACString originalContentType \nnsIThread.idl \nvoid shutdown() \nboolean hasPendingEvents() \nboolean processNextEvent( boolean mayWait) \nnsIDOMHTMLObjectElement.idl \nattribute DOMString code \nattribute DOMString align \nattribute DOMString archive \nattribute DOMString border \nattribute DOMString codeBase \nattribute DOMString codeType \nattribute DOMString data \nattribute boolean declare \nattribute DOMString height \nattribute long hspace \nattribute DOMString name \nattribute DOMString standby \nattribute long tabIndex \nattribute DOMString type \nattribute DOMString useMap \nattribute long vspace \nattribute DOMString width \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nnsIPersistentProperties2.idl \nattribute AUTF8String key \nattribute AString value \nnsICookieManager2.idl \nvoid add( AUTF8String aHost, AUTF8String aPath, ACString aName, ACString aValue, boolean aIsSecure, boolean aIsHttpOnly, boolean aIsSession, PRInt64 aExpiry) \nboolean cookieExists( nsICookie2 aCookie) \nunsignedlong countCookiesFromHost( AUTF8String aHost) \nnsISimpleEnumerator getCookiesFromHost( AUTF8String aHost) \nvoid importCookies( nsIFile aCookieFile) \nnsIDOMSVGElement.idl \nattribute DOMString id \nnsIDOMSVGAngle.idl \nattribute float value \nattribute float valueInSpecifiedUnits \nattribute DOMString valueAsString \nvoid newValueSpecifiedUnits( unsignedshort unitType, float valueInSpecifiedUnits) \nvoid convertToSpecifiedUnits( unsignedshort unitType) \nnsIDOMHTMLParagraphElement.idl \nattribute DOMString align \nnsIUserCertPicker.idl \nnsIX509Cert pickByUsage( nsIInterfaceRequestor ctx, wstring selectedNickname, long certUsage, boolean allowInvalid, boolean allowDuplicateNicknames, boolean canceled) \nnsIAccessibleDocument.idl \nAString getNameSpaceURIForID( short nameSpaceID) \nnsIAccessibleDocument getChildDocumentAt( unsignedlong index) \ntxIXPathObject.idl \nnsIClipboardOwner.idl \nvoid LosingOwnership ( nsITransferable aTransferable )  \nnsIDOMXULTextboxElement.idl \nattribute long maxLength \nattribute long size \nattribute long selectionStart \nattribute long selectionEnd \nattribute DOMString value \nattribute DOMString type \nvoid select() \nvoid setSelectionRange( long selectionStart, long selectionEnd) \nnsIDOMXULCommandEvent.idl \nvoid initCommandEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, nsIDOMEvent sourceEvent) \nnsIIDBObjectStore.idl \nnsIMessageWakeupService.idl \nboolean requestWakeup( AString aMessageName, AString aCid, AString aIid, AString aMethod) \nnsIDOMDOMConfiguration.idl \nvoid setParameter( DOMString name, nsIVariant value) \nnsIVariant getParameter( DOMString name) \nboolean canSetParameter( DOMString name, nsIVariant value) \nnsIDOMSVGNumber.idl \nattribute float value \nnsIDOMHTMLParamElement.idl \nattribute DOMString name \nattribute DOMString type \nattribute DOMString value \nattribute DOMString valueType \nnsIDOMDOMError.idl \nnsIDOMLSSerializer.idl \nattribute DOMString newLine \nattribute nsIDOMLSSerializerFilter filter \nboolean write( nsIDOMNode nodeArg, nsIDOMLSOutput destination) \nboolean writeToURI( nsIDOMNode nodeArg, DOMString uri) \nDOMString writeToString( nsIDOMNode nodeArg) \nmozIStorageProgressHandler.idl \nboolean onProgress( mozIStorageConnection aConnection) \nnsIDOMXULButtonElement.idl \nattribute DOMString type \nattribute DOMString dlgType \nattribute boolean open \nattribute boolean checked \nattribute long checkState \nattribute boolean autoCheck \nattribute DOMString group \nnsIInputStreamChannel.idl \nattribute nsIInputStream contentStream \nvoid setURI( nsIURI aURI) \nnsIDOMLinkStyle.idl \nnsIBufferedStreams.idl \nvoid init( nsIInputStream fillFromStream, unsignedlong bufferSize) \nnsIDOMLocation.idl \nattribute DOMString hash \nattribute DOMString host \nattribute DOMString hostname \nattribute DOMString href \nattribute DOMString pathname \nattribute DOMString port \nattribute DOMString protocol \nattribute DOMString search \nvoid reload( boolean forceget) \nvoid replace( DOMString url) \nvoid assign( DOMString url) \nDOMString toString() \nnsITreeSelection.idl \nattribute nsITreeBoxObject tree \nattribute boolean selectEventsSuppressed \nattribute long currentIndex \nattribute nsITreeColumn currentColumn \nboolean isSelected( long index) \nvoid select( long index) \nvoid timedSelect( long index, long delay) \nvoid toggleSelect( long index) \nvoid rangedSelect( long startIndex, long endIndex, boolean augment) \nvoid clearRange( long startIndex, long endIndex) \nvoid clearSelection() \nvoid invertSelection() \nvoid selectAll() \nlong getRangeCount() \nvoid getRangeAt( long i, long min, long max) \nvoid invalidateSelection() \nvoid adjustSelection( long index, long count) \nnsIMultiplexInputStream.idl \nvoid appendStream( nsIInputStream stream) \nvoid insertStream( nsIInputStream stream, unsignedlong index) \nvoid removeStream( unsignedlong index) \nnsIInputStream getStream( unsignedlong index) \nnsIAsyncVerifyRedirectCallback.idl \nvoid onRedirectVerifyCallback( nsresult result) \nnsIDOMPageTransitionEvent.idl \nvoid initPageTransitionEvent( DOMString typeArg, boolean canBubbleArg, boolean canCancelArg, boolean persisted) \nnsIPluginInputStream.idl \nvoid getLastModified( unsignedlong aResult) \nvoid requestRead( NPByteRange aRangeList) \nnsIDOMXULElement.idl \nattribute DOMString id \nattribute DOMString className \nattribute DOMString align \nattribute DOMString dir \nattribute DOMString flex \nattribute DOMString flexGroup \nattribute DOMString ordinal \nattribute DOMString orient \nattribute DOMString pack \nattribute boolean hidden \nattribute boolean collapsed \nattribute DOMString observes \nattribute DOMString menu \nattribute DOMString contextMenu \nattribute DOMString tooltip \nattribute DOMString width \nattribute DOMString height \nattribute DOMString minWidth \nattribute DOMString minHeight \nattribute DOMString maxWidth \nattribute DOMString maxHeight \nattribute DOMString persist \nattribute DOMString left \nattribute DOMString top \nattribute DOMString datasources \nattribute DOMString ref \nattribute DOMString tooltipText \nattribute DOMString statusText \nattribute boolean allowEvents \nvoid focus() \nvoid blur() \nvoid click() \nvoid doCommand() \nnsIDOMNodeList getElementsByAttribute( DOMString name, DOMString value) \nnsIDOMNodeList getElementsByAttributeNS( DOMString namespaceURI, DOMString name, DOMString value) \nnsIDOMHTMLDivElement.idl \nattribute DOMString align \nnsIDOMXULTreeElement.idl \nattribute nsITreeView view \nattribute boolean editable \nnsIAuthPrompt.idl \nboolean prompt( wstring dialogTitle, wstring text, wstring passwordRealm, PRUint32 savePassword, wstring defaultText, wstring result) \nboolean promptUsernameAndPassword( wstring dialogTitle, wstring text, wstring passwordRealm, PRUint32 savePassword, wstring user, wstring pwd) \nboolean promptPassword( wstring dialogTitle, wstring text, wstring passwordRealm, PRUint32 savePassword, wstring pwd) \nnsIDOMEventGroup.idl \nboolean isSameEventGroup( nsIDOMEventGroup other) \nnsIDOMEventTarget.idl \nvoid addEventListener( DOMString type, nsIDOMEventListener listener, boolean useCapture) \nvoid removeEventListener( DOMString type, nsIDOMEventListener listener, boolean useCapture) \nboolean dispatchEvent( nsIDOMEvent evt) \nnsINSSCertCache.idl \nvoid cacheAllCerts() \nvoid cacheCertList( nsIX509CertList list) \nnsIX509CertList getX509CachedCerts() \nvoidPtr getCachedCerts() \nnsITransactionManager.idl \nnsIDOMTimeEvent.idl \nvoid initTimeEvent( DOMString typeArg, nsIDOMAbstractView viewArg, long detailArg) \nnsIXSLTProcessorObsolete.idl \nvoid transformDocument( nsIDOMNode aSourceDOM, nsIDOMNode aStyleDOM, nsIDOMDocument aOutputDOC, nsISupports aObserver) \nnsIXPInstallManager.idl \nvoid initManagerFromChrome( wstring aURLs, unsignedlong aURLCount, nsIXPIProgressDialog aListener) \nvoid initManagerWithHashes( wstring aURLs, string aHashes, unsignedlong aURLCount, nsIXPIProgressDialog aListener) \nvoid initManagerWithInstallInfo( nsIXPIInstallInfo aInstallInfo) \nmozIStorageConnection.idl \nattribute long schemaVersion \nvoid close() \nvoid asyncClose( mozIStorageCompletionCallback aCallback) \nmozIStorageConnection clone( boolean aReadOnly) \nmozIStorageStatement createStatement( AUTF8String aSQLStatement) \nmozIStorageAsyncStatement createAsyncStatement( AUTF8String aSQLStatement) \nvoid executeSimpleSQL( AUTF8String aSQLStatement) \nmozIStoragePendingStatement executeAsync( mozIStorageBaseStatement aStatements, unsignedlong aNumStatements, mozIStorageStatementCallback aCallback) \nboolean tableExists( AUTF8String aTableName) \nboolean indexExists( AUTF8String aIndexName) \nvoid beginTransaction() \nvoid beginTransactionAs( PRInt32 transactionType) \nvoid commitTransaction() \nvoid rollbackTransaction() \nvoid createTable( string aTableName, string aTableSchema) \nvoid createFunction( AUTF8String aFunctionName, long aNumArguments, mozIStorageFunction aFunction) \nvoid createAggregateFunction( AUTF8String aFunctionName, long aNumArguments, mozIStorageAggregateFunction aFunction) \nvoid removeFunction( AUTF8String aFunctionName) \nmozIStorageProgressHandler setProgressHandler( PRInt32 aGranularity, mozIStorageProgressHandler aHandler) \nmozIStorageProgressHandler removeProgressHandler() \nvoid setGrowthIncrement( PRInt32 aIncrement, AUTF8String aDatabaseName) \nnsIDOMNotifyPaintEvent.idl \nnsIUploadChannel2.idl \nvoid explicitSetUploadStream( nsIInputStream aStream, ACString aContentType, long long aContentLength, ACString aMethod, boolean aStreamHasHeaders) \nnsIInterfaceRequestor.idl \nvoid getInterface( nsIIDRef uuid, nsQIResult result) \nnsIJetpack.idl \nvoid sendMessage( AString aMessageName) \nvoid registerReceiver( AString aMessageName, jsval aReceiver) \nvoid unregisterReceiver( AString aMessageName, jsval aReceiver) \nvoid unregisterReceivers( AString aMessageName) \nvoid evalScript( AString aScript) \nnsIVariant createHandle() \nvoid destroy() \nmozIStorageBindingParams.idl \nvoid bindByName( AUTF8String aName, nsIVariant aValue) \nvoid bindUTF8StringByName( AUTF8String aName, AUTF8String aValue) \nvoid bindStringByName( AUTF8String aName, AString aValue) \nvoid bindDoubleByName( AUTF8String aName, double aValue) \nvoid bindInt32ByName( AUTF8String aName, long aValue) \nvoid bindInt64ByName( AUTF8String aName, long long aValue) \nvoid bindNullByName( AUTF8String aName) \nvoid bindBlobByName( AUTF8String aName, octet aValue, unsignedlong aValueSize) \nvoid bindByIndex( unsignedlong aIndex, nsIVariant aValue) \nvoid bindUTF8StringByIndex( unsignedlong aIndex, AUTF8String aValue) \nvoid bindStringByIndex( unsignedlong aIndex, AString aValue) \nvoid bindDoubleByIndex( unsignedlong aIndex, double aValue) \nvoid bindInt32ByIndex( unsignedlong aIndex, long aValue) \nvoid bindInt64ByIndex( unsignedlong aIndex, long long aValue) \nvoid bindNullByIndex( unsignedlong aIndex) \nvoid bindBlobByIndex( unsignedlong aIndex, octet aValue, unsignedlong aValueSize) \nnsIDirIndex.idl \nattribute unsignedlong type \nattribute string contentType \nattribute string location \nattribute wstring description \nattribute long long size \nattribute PRTime lastModified \nnsIStringBundleOverride.idl \nAString getStringFromName( AUTF8String url, ACString key) \nnsISimpleEnumerator enumerateKeysInBundle( AUTF8String url) \nnsIBrowserHandler.idl \nattribute AUTF8String startPage \nattribute AUTF8String defaultArgs \nAUTF8String getFeatures( nsICommandLine aCmdLine) \nnsPIPlacesHistoryListenersNotifier.idl \nvoid notifyOnPageExpired( nsIURI aURI, PRTime aVisitTime, boolean aWholeEntry) \nnsIEmbeddingSiteWindow.idl \nattribute boolean visibility \nattribute wstring title \nvoid setDimensions( unsignedlong flags, long x, long y, long cx, long cy) \nvoid getDimensions( unsignedlong flags, long x, long y, long cx, long cy) \nvoid setFocus() \nnsCWebBrowserPersist.idl \nnsISHEntry.idl \nnsIQueryContentEventResult.idl \ntxIEXSLTRegExFunctions.idl \ntxINodeSet match( txIFunctionEvaluationContext aContext, DOMString aString, DOMString aRegEx, DOMString aFlags) \nDOMString replace( DOMString aString, DOMString aRegEx, DOMString aFlags, DOMString aReplace) \nboolean test( DOMString aString, DOMString aRegEx, DOMString aFlags) \nnsIPromptService2.idl \nboolean promptAuth( nsIDOMWindow aParent, nsIChannel aChannel, PRUint32 level, nsIAuthInformation authInfo, wstring checkboxLabel, boolean checkValue) \nnsICancelable asyncPromptAuth( nsIDOMWindow aParent, nsIChannel aChannel, nsIAuthPromptCallback aCallback, nsISupports aContext, PRUint32 level, nsIAuthInformation authInfo, wstring checkboxLabel, boolean checkValue) \nnsIIMEPicker.idl \nvoid show() \nnsIRDFXMLParser.idl \nnsIStreamListener parseAsync( nsIRDFDataSource aSink, nsIURI aBaseURI) \nvoid parseString( nsIRDFDataSource aSink, nsIURI aBaseURI, AUTF8String aSource) \nnsIAccessibleText.idl \nattribute long caretOffset \nAString getText ( long startOffset, long endOffset) \nAString getTextAfterOffset ( long offset, nsAccessibleTextBoundary boundaryType, long startOffset, long endOffset) \nAString getTextAtOffset ( long offset, nsAccessibleTextBoundary boundaryType, long startOffset, long endOffset) \nAString getTextBeforeOffset ( long offset, nsAccessibleTextBoundary boundaryType, long startOffset, long endOffset) \nwchar getCharacterAtOffset ( long offset) \nnsIPersistentProperties getTextAttributes( boolean includeDefAttrs, long offset, long rangeStartOffset, long rangeEndOffset) \nvoid getCharacterExtents ( long offset, long x, long y, long width, long height, unsignedlong coordType) \nvoid getRangeExtents ( long startOffset, long endOffset, long x, long y, long width, long height, unsignedlong coordType) \nlong getOffsetAtPoint ( long x, long y, unsignedlong coordType) \nvoid getSelectionBounds ( long selectionNum, long startOffset, long endOffset) \nvoid setSelectionBounds ( long selectionNum, long startOffset, long endOffset) \nvoid addSelection ( long startOffset, long endOffset) \nvoid removeSelection ( long selectionNum) \nvoid scrollSubstringTo( long startIndex, long endIndex, unsignedlong scrollType) \nvoid scrollSubstringToPoint( long startIndex, long endIndex, unsignedlong coordinateType, long x, long y) \nnsIEditorSpellCheck.idl \nboolean canSpellCheck() \nvoid InitSpellChecker( nsIEditor editor, boolean enableSelectionChecking) \nwstring GetNextMisspelledWord() \nwstring GetSuggestedWord() \nboolean CheckCurrentWord( wstring suggestedWord) \nvoid ReplaceWord( wstring misspelledWord, wstring replaceWord, boolean allOccurrences) \nvoid IgnoreWordAllOccurrences( wstring word) \nvoid GetPersonalDictionary() \nwstring GetPersonalDictionaryWord() \nvoid AddWordToDictionary( wstring word) \nvoid RemoveWordFromDictionary( wstring word) \nvoid GetDictionaryList( wstring dictionaryList, PRUint32 count) \nwstring GetCurrentDictionary() \nvoid SetCurrentDictionary( wstring dictionary) \nvoid saveDefaultDictionary() \nvoid UninitSpellChecker() \nvoid setFilter( nsITextServicesFilter filter) \nboolean CheckCurrentWordNoSuggest( wstring suggestedWord) \nnsIBufEntropyCollector.idl \nvoid forwardTo( nsIEntropyCollector collector) \nvoid dontForward() \nnsIDOMRangeException.idl \nnsIRequestObserverProxy.idl \nvoid init( nsIRequestObserver observer, nsIEventTarget target) \nnsICryptoHMAC.idl \nvoid init( unsignedlong aAlgorithm, nsIKeyObject aKeyObject) \nvoid update( octet aData, unsignedlong aLen) \nvoid updateFromStream( nsIInputStream aStream, unsignedlong aLen) \nACString finish( PRBool aASCII) \nvoid reset() \nnsIDOMHTMLModElement.idl \nattribute DOMString cite \nattribute DOMString dateTime \nnsISyncStreamListener.idl \nnsIChromeRegistry.idl \nnsIURI convertChromeURL( nsIURI aChromeURL) \nvoid checkForNewChrome() \nboolean wrappersEnabled( nsIURI aURI) \nnsIDOMSVGZoomEvent.idl \nnsIDOMNSDocument.idl \nattribute DOMString dir \nattribute DOMString title \nboolean hasFocus() \nnsIDOMNodeList getElementsByClassName( DOMString classes) \nnsIDOMElement elementFromPoint( float x, float y) \nvoid releaseCapture() \nvoid mozSetImageElement( DOMString aImageElementId, nsIDOMElement aImageElement) \nnsIAboutModule.idl \nnsIChannel newChannel( nsIURI aURI) \nunsignedlong getURIFlags( nsIURI aURI) \nnsIDOMBarProp.idl \nattribute boolean visible \nnsIDOMHTMLHRElement.idl \nattribute DOMString align \nattribute boolean noShade \nattribute DOMString size \nattribute DOMString width \nnsIXULOverlayProvider.idl \nnsIDOMHTMLOutputElement.idl \nattribute DOMString name \nattribute DOMString defaultValue \nattribute DOMString value \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nnsIXTFElement.idl \nvoid attributeSet( nsIAtom name, AString newValue) \nvoid attributeRemoved( nsIAtom name) \nvoid onCreated( nsIXTFElementWrapper wrapper) \nvoid onDestroyed() \nvoid getScriptingInterfaces( unsignedlong count, nsIIDPtr array) \nvoid willChangeDocument( nsIDOMDocument newDoc) \nvoid documentChanged( nsIDOMDocument newDoc) \nvoid willChangeParent( nsIDOMElement newParent) \nvoid parentChanged( nsIDOMElement newParent) \nvoid willInsertChild( nsIDOMNode child, unsignedlong index) \nvoid childInserted( nsIDOMNode child, unsignedlong index) \nvoid willAppendChild( nsIDOMNode child) \nvoid childAppended( nsIDOMNode child) \nvoid willRemoveChild( unsignedlong index) \nvoid childRemoved( unsignedlong index) \nvoid willSetAttribute( nsIAtom name, AString newValue) \nvoid attributeSet( nsIAtom name, AString newValue) \nvoid willRemoveAttribute( nsIAtom name) \nvoid attributeRemoved( nsIAtom name) \nvoid beginAddingChildren() \nvoid doneAddingChildren() \nboolean handleDefault( nsIDOMEvent aEvent) \nvoid cloneState( nsIDOMElement aElement) \nvoid performAccesskey() \nnsIIDBCursorWithValue.idl \nnsITextToSubURI.idl \nnsIEncodedChannel.idl \nattribute boolean applyConversion \nnsIDOMXULSelectCntrlItemEl.idl \nattribute boolean disabled \nattribute DOMString crop \nattribute DOMString image \nattribute DOMString label \nattribute DOMString accessKey \nattribute DOMString command \nattribute DOMString value \nnsIWindowsRegKey.idl \nattribute HKEY key \nvoid close() \nvoid open( unsignedlong rootKey, AString relPath, unsignedlong mode) \nvoid create( unsignedlong rootKey, AString relPath, unsignedlong mode) \nnsIWindowsRegKey openChild( AString relPath, unsignedlong mode) \nnsIWindowsRegKey createChild( AString relPath, unsignedlong mode) \nAString getChildName( unsignedlong index) \nboolean hasChild( AString name) \nAString getValueName( unsignedlong index) \nboolean hasValue( AString name) \nvoid removeChild( AString relPath) \nvoid removeValue( AString name) \nunsignedlong getValueType( AString name) \nAString readStringValue( AString name) \nunsignedlong readIntValue( AString name) \nunsignedlong long readInt64Value( AString name) \nACString readBinaryValue( AString name) \nvoid writeStringValue( AString name, AString data) \nvoid writeIntValue( AString name, unsignedlong data) \nvoid writeInt64Value( AString name, unsignedlong long data) \nvoid writeBinaryValue( AString name, ACString data) \nvoid startWatching( boolean recurse) \nvoid stopWatching() \nboolean isWatching() \nboolean hasChanged() \nnsIMIMEInputStream.idl \nattribute boolean addContentLength \nvoid addHeader( string name, string value) \nvoid setData( nsIInputStream stream) \nnsIX509Cert.idl \nvoid getEmailAddresses( unsignedlong length, wstring addresses) \nboolean containsEmailAddress( AString aEmailAddress) \nnsIArray getChain() \nvoid getUsagesArray( boolean ignoreOcsp, PRUint32 verified, PRUint32 count, wstring usages) \nvoid getUsagesString( boolean ignoreOcsp, PRUint32 verified, AString usages) \nunsignedlong verifyForUsage( unsignedlong usage) \nvoid getRawDER( unsignedlong length, octet data) \nboolean equals( nsIX509Cert other) \nnsIWebBrowserPersist.idl \nattribute unsignedlong persistFlags \nattribute nsIWebProgressListener progressListener \nvoid saveURI( nsIURI aURI, nsISupports aCacheKey, nsIURI aReferrer, nsIInputStream aPostData, string aExtraHeaders, nsISupports aFile) \nvoid saveChannel( nsIChannel aChannel, nsISupports aFile) \nvoid saveDocument( nsIDOMDocument aDocument, nsISupports aFile, nsISupports aDataPath, string aOutputContentType, unsignedlong aEncodingFlags, unsignedlong aWrapColumn) \nvoid cancelSave() \nnsIDOMNSEditableElement.idl \nvoid setUserInput( DOMString input) \nnsIDOMNodeSelector.idl \nnsIDOMElement querySelector( DOMString selectors) \nnsIDOMNodeList querySelectorAll( DOMString selectors) \nnsICacheSession.idl \nattribute PRBool doomEntriesIfExpired \nnsICacheEntryDescriptor openCacheEntry( ACString key, nsCacheAccessMode accessRequested, boolean blockingMode) \nvoid asyncOpenCacheEntry( ACString key, nsCacheAccessMode accessRequested, nsICacheListener listener) \nvoid evictEntries() \nPRBool isStorageEnabled() \nnsIWindowCreator2.idl \nnsIWebBrowserChrome createChromeWindow2( nsIWebBrowserChrome parent, PRUint32 chromeFlags, PRUint32 contextFlags, nsIURI uri, boolean cancel) \nnsIBinaryInputStream.idl \nvoid setInputStream( nsIInputStream aInputStream) \nPRBool readBoolean() \nPRUint8 read8() \nPRUint16 read16() \nPRUint32 read32() \nPRUint64 read64() \nfloat readFloat() \ndouble readDouble() \nACString readCString() \nAString readString() \nvoid readBytes( PRUint32 aLength,string aString) \nvoid readByteArray( PRUint32 aLength, PRUint8 aBytes) \nnsIXULBuilderListener.idl \nvoid willRebuild( nsIXULTemplateBuilder aBuilder) \nvoid didRebuild( nsIXULTemplateBuilder aBuilder) \nnsIFeedEntry.idl \nattribute nsIFeedTextConstruct summary \nattribute AString published \nattribute nsIFeedTextConstruct content \nattribute nsIArray enclosures \nattribute nsIArray mediaContent \nnsICharsetResolver.idl \nACString requestCharset( nsIWebNavigation aWebNavigation, nsIChannel aChannel, boolean aWantCharset, nsISupports aClosure) \nvoid notifyResolvedCharset( ACString charset, nsISupports closure) \nnsITestProxy.idl \nlong Test( long p1, long p2) \nvoid Test2() \nvoid Test3( nsISupports p1, nsISupports p2) \nnsITaskbarPreviewButton.idl \nattribute DOMString tooltip \nattribute boolean dismissOnClick \nattribute boolean hasBorder \nattribute boolean disabled \nattribute imgIContainer image \nattribute boolean visible \nnsIDOMHTMLEmbedElement.idl \nattribute DOMString align \nattribute DOMString height \nattribute DOMString name \nattribute DOMString src \nattribute DOMString type \nattribute DOMString width \nnsIMarkupDocumentViewer.idl \nattribute float textZoom \nattribute float fullZoom \nattribute boolean authorStyleDisabled \nattribute ACString defaultCharacterSet \nattribute ACString forceCharacterSet \nattribute ACString hintCharacterSet \nattribute PRInt32 hintCharacterSetSource \nattribute ACString prevDocCharacterSet \nattribute octet bidiTextDirection \nattribute octet bidiTextType \nattribute octet bidiNumeral \nattribute octet bidiSupport \nattribute octet bidiCharacterSet \nattribute PRUint32 bidiOptions \nvoid scrollToNode( nsIDOMNode node) \nvoid sizeToContent() \nnsICollation.idl \nnsICollation CreateCollation( nsILocale locale) \nnsILoginManagerCrypto.idl \nAString encrypt( AString plainText) \nAString decrypt( AString cipherText) \nnsIDOMPlugin.idl \nnsIDOMMimeType item( unsignedlong index) \nnsIDOMMimeType namedItem( DOMString name) \nnsIPKIParamBlock.idl \nvoid setISupportAtIndex( long index, nsISupports object) \nnsISupports getISupportAtIndex( long index) \nnsIASN1Object.idl \nattribute unsignedlong type \nattribute unsignedlong tag \nattribute AString displayName \nattribute AString displayValue \nnsIAccessibleValue.idl \nattribute double currentValue \nnsISHistory.idl \nnsIAccessibleRetrieval.idl \nnsIAccessible getApplicationAccessible() \nnsIAccessible getAccessibleFor( nsIDOMNode aNode) \nAString getStringRole( unsignedlong aRole) \nnsIDOMDOMStringList getStringStates( unsignedlong aStates, unsignedlong aExtraStates) \nAString getStringEventType( unsignedlong aEventType) \nAString getStringRelationType( unsignedlong aRelationType) \nnsIAccessible getAccessibleFromCache( nsIDOMNode aNode) \nnsIListBoxObject.idl \nlong getRowCount() \nlong getNumberOfVisibleRows() \nlong getIndexOfFirstVisibleRow() \nvoid ensureIndexIsVisible( long rowIndex) \nvoid scrollToIndex( long rowIndex) \nvoid scrollByLines( long numLines) \nnsIDOMElement getItemAtIndex( long index) \nlong getIndexOfItem( nsIDOMElement item) \nnsIWebSocket.idl \nattribute nsIDOMEventListener onopen \nattribute nsIDOMEventListener onmessage \nattribute nsIDOMEventListener onerror \nattribute nsIDOMEventListener onclose \nboolean send( DOMString data) \nvoid close() \nvoid init( nsIPrincipal principal, nsIScriptContext scriptContext, nsPIDOMWindow ownerWindow, DOMString url, DOMString protocol) \nnsICacheVisitor.idl \nboolean visitDevice( string deviceID, nsICacheDeviceInfo deviceInfo) \nboolean visitEntry( string deviceID, nsICacheEntryInfo entryInfo) \nnsIDOMNSHTMLTextAreaElement.idl \nattribute boolean autofocus \nattribute long selectionStart \nattribute long selectionEnd \nattribute long maxLength \nattribute DOMString placeholder \nattribute boolean required \nattribute DOMString wrap \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nvoid setSelectionRange( long selectionStart, long selectionEnd) \nnsIDOMNSUIEvent.idl \nattribute boolean cancelBubble \nnsISAXXMLFilter.idl \nattribute nsISAXXMLReader parent \nnsIDOMCSSUnknownRule.idl \nnsIDOMStorageList.idl \nnsIDOMStorageObsolete namedItem( DOMString domain) \nnsIParentRedirectingChannel.idl \nvoid startRedirect( PRUint32 newChannelId, nsIChannel newChannel, PRUint32 redirectFlags, nsIAsyncVerifyRedirectCallback callback) \nvoid completeRedirect( PRBool succeeded) \nnsIDOMCSSMediaRule.idl \nunsignedlong insertRule( DOMString rule, unsignedlong index) \nvoid deleteRule( unsignedlong index) \nnsIDocShellLoadInfo.idl \nattribute nsIURI referrer \nattribute nsISupports owner \nattribute boolean inheritOwner \nattribute boolean ownerIsExplicit \nattribute nsDocShellInfoLoadType loadType \nattribute nsISHEntry SHEntry \nattribute wstring target \nattribute nsIInputStream postDataStream \nattribute nsIInputStream headersStream \nattribute boolean sendReferrer \nnsIDOMCrypto.idl \nattribute boolean enableSmartCardEvents \nnsIDOMCRMFObject generateCRMFRequest() \nDOMString importUserCertificates( DOMString nickname, DOMString cmmfResponse, boolean doForcedBackup) \nDOMString popChallengeResponse( DOMString challenge) \nDOMString random( long numBytes) \nDOMString signText( DOMString stringToSign, DOMString caOption ) \nvoid logout() \nvoid disableRightClick() \nnsISecurityEventSink.idl \nvoid onSecurityChange( nsISupports i_Context, unsignedlong state) \nnsIPlacesImportExportService.idl \nvoid importHTMLFromFile( nsILocalFile aFile, boolean aIsInitialImport) \nvoid importHTMLFromURI( nsIURI aURI, boolean aIsInitialImport) \nvoid importHTMLFromFileToFolder( nsILocalFile aFile, PRInt64 aFolder, boolean aIsInitialImport) \nvoid exportHTMLToFile( nsILocalFile aFile) \nvoid backupBookmarksFile() \nnsICommandHandler.idl \nattribute nsIDOMWindow window \nxpctest_calljs.idl \nboolean CallMethodNoArgs() \nvoid Evaluate( string s ) \nnsresult EvaluateAndReturnError( nsresult s ) \nvoid SetJSObject( nsIXPCTestCallJS o ) \nvoid EvaluateAndEatErrors( string s) \nvoid UnscriptableMethod() \nnsIClipboardDragDropHookList.idl \nvoid addClipboardDragDropHooks( nsIClipboardDragDropHooks aHooks) \nvoid removeClipboardDragDropHooks( nsIClipboardDragDropHooks aHooks) \nnsISimpleEnumerator getHookEnumerator() \nnsIInputStreamTee.idl \nattribute nsIInputStream source \nattribute nsIOutputStream sink \nattribute nsIEventTarget eventTarget \nnsIEditorIMESupport.idl \nvoid forceCompositionEnd() \nvoid getPreferredIMEState( unsignedlong aState) \nnsIDebug.idl \nvoid assertion( string aStr, string aExpr, string aFile, long aLine) \nvoid warning( string aStr, string aFile, long aLine) \nvoid break( string aFile, long aLine) \nvoid abort( string aFile, long aLine) \nnsIXTFAttributeHandler.idl \nboolean handlesAttribute( nsIAtom name) \nvoid setAttribute( nsIAtom name, AString newValue) \nvoid removeAttribute( nsIAtom name) \nAString getAttribute( nsIAtom name) \nboolean hasAttribute( nsIAtom name) \nunsignedlong getAttributeCount() \nnsIAtom getAttributeNameAt( unsignedlong index) \nnsICommandManager.idl \nvoid addCommandObserver( nsIObserver aCommandObserver, string aCommandToObserve) \nvoid removeCommandObserver( nsIObserver aCommandObserver, string aCommandObserved) \nboolean isCommandSupported( string aCommandName, nsIDOMWindow aTargetWindow) \nboolean isCommandEnabled( string aCommandName, nsIDOMWindow aTargetWindow) \nvoid getCommandState( string aCommandName, nsIDOMWindow aTargetWindow, nsICommandParams aCommandParams) \nvoid doCommand( string aCommandName, nsICommandParams aCommandParams, nsIDOMWindow aTargetWindow) \nnsIMIMEHeaderParam.idl \nAString getParameter( ACString aHeaderVal, string aParamName, ACString aFallbackCharset, boolean aTryLocaleCharset, string aLang) \nstring getParameterInternal( string aHeaderVal, string aParamName, string aCharset, string aLang) \nACString decodeRFC2047Header( string aHeaderVal, string aDefaultCharset, boolean aOverrideCharset, boolean aEatContinuation) \nACString decodeParameter( ACString aParamValue, string aCharset, string aDefaultCharset, boolean aOverrideCharset) \nnsINavBookmarksService.idl \nvoid onBeginUpdateBatch() \nvoid onEndUpdateBatch() \nvoid onItemAdded( long long aItemId, long long aParentId, long aIndex, unsignedshort aItemType, nsIURI aURI) \nvoid onBeforeItemRemoved( long long aItemId, unsignedshort aItemType) \nvoid onItemRemoved( long long aItemId, long long aParentId, long aIndex, unsignedshort aItemType) \nvoid onItemChanged( long long aItemId, ACString aProperty, boolean aIsAnnotationProperty, AUTF8String aNewValue, PRTime aLastModified, unsignedshort aItemType) \nvoid onItemVisited( long long aBookmarkId, long long aVisitID, PRTime time) \nvoid onItemMoved( long long aItemId, long long aOldParentId, long aOldIndex, long long aNewParentId, long aNewIndex, unsignedshort aItemType) \nnsIAccessibleEditableText.idl \nvoid setAttributes ( long startPos, long endPos, nsISupports attributes) \nvoid setTextContents ( AString text) \nvoid insertText ( AString text, long position) \nvoid copyText ( long startPos, long endPos) \nvoid cutText ( long startPos, long endPos) \nvoid deleteText ( long startPos, long endPos) \nvoid pasteText ( long position) \nnsIToolkitProfileService.idl \nattribute boolean startWithLastProfile \nattribute boolean startOffline \nattribute nsIToolkitProfile selectedProfile \nnsIToolkitProfile getProfileByName( AUTF8String aName) \nnsIProfileLock lockProfilePath( nsILocalFile aDirectory, nsILocalFile aTempDirectory) \nnsIToolkitProfile createProfile( nsILocalFile aRootDir, nsILocalFile aTempDir, AUTF8String aName) \nvoid flush() \nnsIWindowProvider.idl \nnsIDOMWindow provideWindow( nsIDOMWindow aParent, unsignedlong aChromeFlags, boolean aCalledFromJS, boolean aPositionSpecified, boolean aSizeSpecified, nsIURI aURI, AString aName, AUTF8String aFeatures, boolean aWindowIsNew) \nnsISyncLoadDOMService.idl \nnsIDOMDocument loadDocument( nsIChannel aChannel, nsIPrincipal aLoaderPrincipal) \nnsIDOMDocument loadDocumentAsXML( nsIChannel aChannel, nsIPrincipal aLoaderPrincipal) \nnsIDOMDocument loadLocalDocument( nsIChannel aChannel, nsIPrincipal aLoaderPrincipal) \nnsIHttpAuthManager.idl \nvoid getAuthIdentity( ACString aScheme, ACString aHost, PRInt32 aPort, ACString aAuthType, ACString aRealm, ACString aPath, AString aUserDomain, AString aUserName, AString aUserPassword) \nvoid setAuthIdentity( ACString aScheme, ACString aHost, PRInt32 aPort, ACString aAuthType, ACString aRealm, ACString aPath, AString aUserDomain, AString aUserName, AString aUserPassword) \nvoid clearAll() \nnsISHTransaction.idl \nattribute nsISHEntry sHEntry \nattribute nsISHTransaction prev \nattribute nsISHTransaction next \nattribute boolean persist \nvoid create( nsISHEntry aSHEntry, nsISHTransaction aPrev) \nnsIWebBrowserPrint.idl \nvoid print( nsIPrintSettings aThePrintSettings, nsIWebProgressListener aWPListener) \nvoid printPreview( nsIPrintSettings aThePrintSettings, nsIDOMWindow aChildDOMWin, nsIWebProgressListener aWPListener) \nvoid printPreviewNavigate( short aNavType, long aPageNum) \nvoid cancel() \nvoid enumerateDocumentNames( PRUint32 aCount, wstring aResult) \nvoid exitPrintPreview() \nnsIDocumentLoaderFactory.idl \nnsIContentViewer createInstance( string aCommand, nsIChannel aChannel, nsILoadGroup aLoadGroup, string aContentType, nsISupports aContainer, nsISupports aExtraInfo, nsIStreamListener aDocListenerResult) \nnsIContentViewer createInstanceForDocument( nsISupports aContainer, nsIDocument aDocument, string aCommand) \nnsIDocument createBlankDocument( nsILoadGroup aLoadGroup, nsIPrincipal aPrincipal) \nnsIDOMHTMLFontElement.idl \nattribute DOMString color \nattribute DOMString face \nattribute DOMString size \nnsIDOMSVGRectElement.idl \nnsIStartupCache.idl \nPRUint32 getBuffer( string aID, charPtr aBuffer) \nvoid putBuffer( string aID, charPtr aBuffer, PRUint32 aLength) \nvoid invalidateCache() \nnsIObjectOutputStream getDebugObjectOutputStream( nsIObjectOutputStream aStream) \nboolean startupWriteComplete() \nvoid resetStartupWriteTimer() \nnsIWebBrowserChrome.idl \nattribute nsIWebBrowser webBrowser \nattribute unsignedlong chromeFlags \nvoid setStatus( unsignedlong statusType, wstring status) \nvoid destroyBrowserWindow() \nvoid sizeBrowserTo( long aCX, long aCY) \nvoid showAsModal() \nboolean isWindowModal() \nvoid exitModalEventLoop( nsresult aStatus) \nnsIHttpHeaderVisitor.idl \nvoid visitHeader( ACString aHeader, ACString aValue) \nnsIDOMNameList.idl \nDOMString getName( unsignedlong index) \nDOMString getNamespaceURI( unsignedlong index) \nboolean contains( DOMString str) \nboolean containsNS( DOMString namespaceURI, DOMString name) \nnsIHttpAuthenticator.idl \nvoid challengeReceived( nsIHttpAuthenticableChannel aChannel, string aChallenge, boolean aProxyAuth, nsISupports aSessionState,nsISupports aContinuationState, boolean aInvalidatesIdentity) \nstring generateCredentials( nsIHttpAuthenticableChannel aChannel, string aChallenge, boolean aProxyAuth, wstring aDomain, wstring aUser, wstring aPassword, nsISupports aSessionState, nsISupports aContinuationState, unsignedlong aFlags) \nnsIAlertsService.idl \nvoid showAlertNotification( AString imageUrl, AString title, AString text, boolean textClickable, AString cookie, nsIObserver alertListener, AString name) \nnsIComponentManager.idl \nvoid getClassObject( nsCIDRef aClass, nsIIDRef aIID, nsQIResult result) \nvoid getClassObjectByContractID( string aContractID, nsIIDRef aIID, nsQIResult result) \nvoid createInstance( nsCIDRef aClass, nsISupports aDelegate, nsIIDRef aIID, nsQIResult result) \nvoid createInstanceByContractID( string aContractID, nsISupports aDelegate, nsIIDRef aIID, nsQIResult result) \nnsICookiePromptService.idl \nlong cookieDialog( nsIDOMWindow parent, nsICookie cookie, ACString hostname, long cookiesFromHost, boolean changingCookie, boolean rememberDecision) \nnsIToolkitChromeRegistry.idl \nvoid checkForOSAccessibility() \nnsIUTF8StringEnumerator getLocalesForPackage( AUTF8String aPackage) \nnsIProtocolProxyFilter.idl \nnsIProxyInfo applyFilter( nsIProtocolProxyService aProxyService, nsIURI aURI, nsIProxyInfo aProxy) \nnsICachingChannel.idl \nattribute nsISupports cacheToken \nattribute nsISupports offlineCacheToken \nattribute nsISupports cacheKey \nattribute boolean cacheAsFile \nattribute boolean cacheForOfflineUse \nattribute ACString offlineCacheClientID \nnsIHttpChannelInternal.idl \nattribute nsIURI documentURI \nattribute boolean forceAllowThirdPartyCookie \nattribute boolean channelIsForDownload \nvoid getRequestVersion( unsignedlong major, unsignedlong minor) \nvoid getResponseVersion( unsignedlong major, unsignedlong minor) \nvoid setCookie( string aCookieHeader) \nvoid setupFallbackChannel( string aFallbackKey) \nnsIURL.idl \nattribute AUTF8String filePath \nattribute AUTF8String param \nattribute AUTF8String query \nattribute AUTF8String ref \nattribute AUTF8String directory \nattribute AUTF8String fileName \nattribute AUTF8String fileBaseName \nattribute AUTF8String fileExtension \nAUTF8String getCommonBaseSpec( nsIURI aURIToCompare) \nAUTF8String getRelativeSpec( nsIURI aURIToCompare) \nnsIDOMTimeRanges.idl \ndouble start( unsignedlong index) \ndouble end( unsignedlong index) \nnsIDOM3TypeInfo.idl \nboolean isDerivedFrom( DOMString typeNamespaceArg, DOMString typeNameArg, unsignedlong derivationMethod) \nnsISeekableStream.idl \nvoid seek( long whence, long long offset) \nlong long tell() \nvoid setEOF() \nnsIUploadChannel.idl \nvoid setUploadStream( nsIInputStream aStream, ACString aContentType, long aContentLength) \nnsILoginManager.idl \nvoid addLogin( nsILoginInfo aLogin) \nvoid removeLogin( nsILoginInfo aLogin) \nvoid modifyLogin( nsILoginInfo oldLogin, nsISupports newLoginData) \nvoid removeAllLogins() \nvoid getAllLogins( unsignedlong count, nsILoginInfo logins) \nvoid getAllDisabledHosts( unsignedlong count, wstring hostnames) \nboolean getLoginSavingEnabled( AString aHost) \nvoid setLoginSavingEnabled( AString aHost, boolean isEnabled) \nnsIXTFElementFactory.idl \nnsIXTFElement createElement( AString tagName) \nnsIDOM3EventTarget.idl \nvoid addGroupedEventListener( DOMString type, nsIDOMEventListener listener, boolean useCapture, nsIDOMEventGroup evtGroup) \nvoid removeGroupedEventListener( DOMString type, nsIDOMEventListener listener, boolean useCapture, nsIDOMEventGroup evtGroup) \nboolean canTrigger( DOMString type) \nboolean isRegisteredHere( DOMString type) \nnsIWeakReference.idl \nvoid QueryReferent( nsIIDRef uuid, nsQIResult result ) \nnsIDOMNodeIterator.idl \nnsIDOMNode nextNode() \nnsIDOMNode previousNode() \nvoid detach() \nnsIDocShellHistory.idl \nattribute boolean useGlobalHistory \nattribute boolean createdDynamically \nnsISHEntry getChildSHEntry( long aChildOffset) \nvoid addChildSHEntry( nsISHEntry aCloneReference, nsISHEntry aHistoryEntry, long aChildOffset, unsignedlong aLoadType) \nvoid removeFromSessionHistory() \nboolean getCurrentSHEntry( nsISHEntry aEntry) \nnsIChannelPolicy.idl \nattribute unsignedlong loadType \nattribute nsISupports contentSecurityPolicy \nnsIDOMNodeFilter.idl \nshort acceptNode( nsIDOMNode n) \nnsIProtocolProxyCallback.idl \nvoid onProxyAvailable( nsICancelable aRequest, nsIURI aURI, nsIProxyInfo aProxyInfo, nsresult aStatus) \nnsIRDFService.idl \nnsIRDFResource GetResource( AUTF8String aURI) \nnsIRDFResource GetUnicodeResource( AString aURI) \nnsIRDFResource GetAnonymousResource() \nnsIRDFLiteral GetLiteral( wstring aValue) \nnsIRDFDate GetDateLiteral( long long aValue) \nnsIRDFInt GetIntLiteral( long aValue) \nboolean IsAnonymousResource( nsIRDFResource aResource) \nvoid RegisterResource( nsIRDFResource aResource, boolean aReplace) \nvoid UnregisterResource( nsIRDFResource aResource) \nvoid RegisterDataSource( nsIRDFDataSource aDataSource, boolean aReplace) \nvoid UnregisterDataSource( nsIRDFDataSource aDataSource) \nnsIRDFDataSource GetDataSource( string aURI) \nnsIRDFDataSource GetDataSourceBlocking( string aURI) \nnsIDOMStyleSheet.idl \nattribute boolean disabled \nnsIContentSecurityPolicy.idl \nattribute boolean isInitialized \nattribute boolean reportOnlyMode \nvoid logViolationDetails( unsignedshort violationType, AString sourceFile, AString scriptSample, PRInt32 lineNum) \nvoid sendReports( AString blockedURI, AString violatedDirective, AString scriptSample, PRInt32 lineNum) \nvoid scanRequestData( nsIHttpChannel aChannel) \nvoid refinePolicy( AString policyString, nsIURI selfURI) \nboolean permitsAncestry( nsIDocShell docShell) \nshort shouldLoad( unsignedlong aContentType, nsIURI aContentLocation, nsIURI aRequestOrigin, nsISupports aContext, ACString aMimeTypeGuess, nsISupports aExtra) \nshort shouldProcess( unsignedlong aContentType, nsIURI aContentLocation, nsIURI aRequestOrigin, nsISupports aContext, ACString aMimeType, nsISupports aExtra) \nnsISHistoryListener.idl \nvoid OnHistoryNewEntry( nsIURI aNewURI) \nboolean OnHistoryGoBack( nsIURI aBackURI) \nboolean OnHistoryGoForward( nsIURI aForwardURI) \nboolean OnHistoryReload( nsIURI aReloadURI, unsignedlong aReloadFlags) \nboolean OnHistoryGotoIndex( long aIndex, nsIURI aGotoURI) \nboolean OnHistoryPurge( long aNumEntries) \nnsISAXLexicalHandler.idl \nvoid comment( AString chars) \nvoid startDTD( AString name, AString publicId, AString systemId) \nvoid endDTD() \nvoid startCDATA() \nvoid endCDATA() \nvoid startEntity( AString name) \nvoid endEntity( AString name) \nnsIDOMXULLabelElement.idl \nattribute DOMString accessKey \nattribute DOMString control \nnsIExternalHelperAppService.idl \nnsIStreamListener doContent ( ACString aMimeContentType, nsIRequest aRequest, nsIInterfaceRequestor aWindowContext, boolean aForceSave) \nboolean applyDecodingForExtension( AUTF8String aExtension, ACString aEncodingType) \nnsIContentViewerContainer.idl \nvoid embed( nsIContentViewer aDocViewer, string aCommand, nsISupports aExtraInfo) \nvoid setIsPrinting( boolean aIsPrinting) \nnsIFeedListener.idl \nvoid handleResult( nsIFeedResult result) \nnsIDOMDOMSettableTokenList.idl \nattribute DOMString value \nnsIDOMSVGTransform.idl \nvoid setMatrix( nsIDOMSVGMatrix matrix) \nvoid setTranslate( float tx, float ty) \nvoid setScale( float sx, float sy) \nvoid setRotate( float angle, float cx, float cy) \nvoid setSkewX( float angle) \nvoid setSkewY( float angle) \nnsIIDBTransaction.idl \nattribute nsIDOMEventListener onerror \nattribute nsIDOMEventListener oncomplete \nattribute nsIDOMEventListener onabort \nattribute nsIDOMEventListener ontimeout \nobjectStore( AString name) \nvoid abort() \nnsIDOMValidityState.idl \nnsIRecyclingAllocator.idl \nvoid init( size_t nblocks, size_t recycleAfter, string id) \nnsIDOMClientRectList.idl \nnsIDOMClientRect item( unsignedlong index) \nnsIRDFXMLSerializer.idl \nvoid init( nsIRDFDataSource aDataSource) \nvoid addNameSpace( nsIAtom aPrefix, DOMString aURI) \nnsICollection.idl \nPRUint32 Count() \nnsISupports GetElementAt( PRUint32 index) \nvoid QueryElementAt( PRUint32 index, nsIIDRef uuid, nsQIResult result) \nvoid SetElementAt( PRUint32 index, nsISupports item) \nvoid AppendElement( nsISupports item) \nvoid RemoveElement( nsISupports item) \nnsIEnumerator Enumerate() \nvoid Clear() \nnsIPermission.idl \nnsISafeOutputStream.idl \nvoid finish() \nnsIDOMEntity.idl \nnsIDOMDocumentXBL.idl \nnsIDOMNodeList getAnonymousNodes( nsIDOMElement elt) \nnsIDOMElement getAnonymousElementByAttribute( nsIDOMElement elt, DOMString attrName, DOMString attrValue) \nvoid addBinding( nsIDOMElement elt, DOMString bindingURL) \nvoid removeBinding( nsIDOMElement elt, DOMString bindingURL) \nnsIDOMElement getBindingParent( nsIDOMNode node) \nvoid loadBindingDocument( DOMString documentURL) \nnsIParentChannel.idl \nvoid delete() \nnsIConsoleListener.idl \nvoid observe( nsIConsoleMessage aMessage) \nnsITaskbarPreview.idl \nattribute nsITaskbarPreviewController controller \nattribute DOMString tooltip \nattribute boolean visible \nattribute boolean active \nvoid invalidate() \nnsIDOMOfflineResourceList.idl \nattribute nsIDOMEventListener onchecking \nattribute nsIDOMEventListener onerror \nattribute nsIDOMEventListener onnoupdate \nattribute nsIDOMEventListener ondownloading \nattribute nsIDOMEventListener onprogress \nattribute nsIDOMEventListener onupdateready \nattribute nsIDOMEventListener oncached \nattribute nsIDOMEventListener onobsolete \nboolean mozHasItem( DOMString uri) \nDOMString mozItem( unsignedlong index) \nvoid mozAdd( DOMString uri) \nvoid mozRemove( DOMString uri) \nvoid update() \nvoid swapCache() \nnsISample.idl \nattribute string value \nvoid writeValue( string aPrefix) \nvoid poke( string aValue) \nnsILoginMetaInfo.idl \nmozIStorageFunction.idl \nnsIVariant onFunctionCall( mozIStorageValueArray aFunctionArguments) \nnsIDOMSVGGradientElement.idl \nxpcIJSModuleLoader.idl \nnsIDOMSVGTextPathElement.idl \nnsPICommandUpdater.idl \nvoid init( nsIDOMWindow aWindow) \nvoid commandStatusChanged( string aCommandName) \nnsIDOMMessageEvent.idl \nvoid initMessageEvent( DOMString aType, boolean aCanBubble, boolean aCancelable, DOMString aData, DOMString aOrigin, DOMString aLastEventId, nsIDOMWindow aSource) \nnsIResumableChannel.idl \nvoid resumeAt( unsignedlong long startPos, ACString entityID) \nnsIProtocolProxyService.idl \nnsIProxyInfo resolve( nsIURI aURI, unsignedlong aFlags) \nnsICancelable asyncResolve( nsIURI aURI, unsignedlong aFlags, nsIProtocolProxyCallback aCallback) \nnsIProxyInfo newProxyInfo( ACString aType, AUTF8String aHost, long aPort, unsignedlong aFlags, unsignedlong aFailoverTimeout, nsIProxyInfo aFailoverProxy) \nnsIProxyInfo getFailoverForProxy( nsIProxyInfo aProxyInfo, nsIURI aURI, nsresult aReason) \nvoid registerFilter( nsIProtocolProxyFilter aFilter, unsignedlong aPosition) \nvoid unregisterFilter( nsIProtocolProxyFilter aFilter) \nnsIChannel.idl \nattribute nsIURI originalURI \nattribute nsISupports owner \nattribute nsIInterfaceRequestor notificationCallbacks \nattribute ACString contentType \nattribute ACString contentCharset \nattribute long contentLength \nnsIInputStream open() \nvoid asyncOpen( nsIStreamListener aListener, nsISupports aContext) \nnsIDOMCSS2Properties.idl \nattribute DOMString azimuth \nattribute DOMString background \nattribute DOMString backgroundAttachment \nattribute DOMString backgroundColor \nattribute DOMString backgroundImage \nattribute DOMString backgroundPosition \nattribute DOMString backgroundRepeat \nattribute DOMString border \nattribute DOMString borderCollapse \nattribute DOMString borderColor \nattribute DOMString borderSpacing \nattribute DOMString borderStyle \nattribute DOMString borderTop \nattribute DOMString borderRight \nattribute DOMString borderBottom \nattribute DOMString borderLeft \nattribute DOMString borderTopColor \nattribute DOMString borderRightColor \nattribute DOMString borderBottomColor \nattribute DOMString borderLeftColor \nattribute DOMString borderTopStyle \nattribute DOMString borderRightStyle \nattribute DOMString borderBottomStyle \nattribute DOMString borderLeftStyle \nattribute DOMString borderTopWidth \nattribute DOMString borderRightWidth \nattribute DOMString borderBottomWidth \nattribute DOMString borderLeftWidth \nattribute DOMString borderWidth \nattribute DOMString borderRadius \nattribute DOMString borderTopLeftRadius \nattribute DOMString borderTopRightRadius \nattribute DOMString borderBottomLeftRadius \nattribute DOMString borderBottomRightRadius \nattribute DOMString bottom \nattribute DOMString boxShadow \nattribute DOMString captionSide \nattribute DOMString clear \nattribute DOMString clip \nattribute DOMString color \nattribute DOMString content \nattribute DOMString counterIncrement \nattribute DOMString counterReset \nattribute DOMString cue \nattribute DOMString cueAfter \nattribute DOMString cueBefore \nattribute DOMString cursor \nattribute DOMString direction \nattribute DOMString display \nattribute DOMString elevation \nattribute DOMString emptyCells \nattribute DOMString cssFloat \nattribute DOMString font \nattribute DOMString fontFamily \nattribute DOMString fontSize \nattribute DOMString fontSizeAdjust \nattribute DOMString fontStretch \nattribute DOMString fontStyle \nattribute DOMString fontVariant \nattribute DOMString fontWeight \nattribute DOMString height \nattribute DOMString left \nattribute DOMString letterSpacing \nattribute DOMString lineHeight \nattribute DOMString listStyle \nattribute DOMString listStyleImage \nattribute DOMString listStylePosition \nattribute DOMString listStyleType \nattribute DOMString margin \nattribute DOMString marginTop \nattribute DOMString marginRight \nattribute DOMString marginBottom \nattribute DOMString marginLeft \nattribute DOMString markerOffset \nattribute DOMString marks \nattribute DOMString maxHeight \nattribute DOMString maxWidth \nattribute DOMString minHeight \nattribute DOMString minWidth \nattribute DOMString orphans \nattribute DOMString line \nattribute DOMString lineColor \nattribute DOMString lineStyle \nattribute DOMString lineWidth \nattribute DOMString overflow \nattribute DOMString padding \nattribute DOMString paddingTop \nattribute DOMString paddingRight \nattribute DOMString paddingBottom \nattribute DOMString paddingLeft \nattribute DOMString page \nattribute DOMString pageBreakAfter \nattribute DOMString pageBreakBefore \nattribute DOMString pageBreakInside \nattribute DOMString pause \nattribute DOMString pauseAfter \nattribute DOMString pauseBefore \nattribute DOMString pitch \nattribute DOMString pitchRange \nattribute DOMString position \nattribute DOMString quotes \nattribute DOMString richness \nattribute DOMString right \nattribute DOMString size \nattribute DOMString speak \nattribute DOMString speakHeader \nattribute DOMString speakNumeral \nattribute DOMString speakPunctuation \nattribute DOMString speechRate \nattribute DOMString stress \nattribute DOMString tableLayout \nattribute DOMString textAlign \nattribute DOMString textDecoration \nattribute DOMString textIndent \nattribute DOMString textShadow \nattribute DOMString textTransform \nattribute DOMString top \nattribute DOMString unicodeBidi \nattribute DOMString verticalAlign \nattribute DOMString visibility \nattribute DOMString voiceFamily \nattribute DOMString volume \nattribute DOMString whiteSpace \nattribute DOMString widows \nattribute DOMString width \nattribute DOMString wordSpacing \nattribute DOMString zIndex \nattribute DOMString clipPath \nattribute DOMString clipRule \nattribute DOMString colorInterpolation \nattribute DOMString colorInterpolationFilters \nattribute DOMString dominantBaseline \nattribute DOMString fill \nattribute DOMString fillOpacity \nattribute DOMString fillRule \nattribute DOMString filter \nattribute DOMString floodColor \nattribute DOMString floodOpacity \nattribute DOMString imageRendering \nattribute DOMString lightingColor \nattribute DOMString marker \nattribute DOMString markerEnd \nattribute DOMString markerMid \nattribute DOMString markerStart \nattribute DOMString mask \nattribute DOMString shapeRendering \nattribute DOMString stopColor \nattribute DOMString stopOpacity \nattribute DOMString stroke \nattribute DOMString strokeDasharray \nattribute DOMString strokeDashoffset \nattribute DOMString strokeLinecap \nattribute DOMString strokeLinejoin \nattribute DOMString strokeMiterlimit \nattribute DOMString strokeOpacity \nattribute DOMString strokeWidth \nattribute DOMString textAnchor \nattribute DOMString textRendering \nattribute DOMString MozAppearance \nattribute DOMString backgroundClip \nattribute DOMString MozBackgroundInlinePolicy \nattribute DOMString backgroundOrigin \nattribute DOMString MozBinding \nattribute DOMString MozBorderBottomColors \nattribute DOMString MozBorderLeftColors \nattribute DOMString MozBorderRightColors \nattribute DOMString MozBorderTopColors \nattribute DOMString MozBoxAlign \nattribute DOMString MozBoxDirection \nattribute DOMString MozBoxFlex \nattribute DOMString MozBoxOrient \nattribute DOMString MozBoxOrdinalGroup \nattribute DOMString MozBoxPack \nattribute DOMString MozBoxSizing \nattribute DOMString MozColumnCount \nattribute DOMString MozColumnWidth \nattribute DOMString MozColumnGap \nattribute DOMString MozFloatEdge \nattribute DOMString MozFontFeatureSettings \nattribute DOMString MozFontLanguageOverride \nattribute DOMString MozForceBrokenImageIcon \nattribute DOMString MozImageRegion \nattribute DOMString MozMarginEnd \nattribute DOMString MozMarginStart \nattribute DOMString MozOpacity \nattribute DOMString MozOutline \nattribute DOMString MozOutlineColor \nattribute DOMString MozOutlineRadius \nattribute DOMString MozOutlineRadiusTopleft \nattribute DOMString MozOutlineRadiusTopright \nattribute DOMString MozOutlineRadiusBottomleft \nattribute DOMString MozOutlineRadiusBottomright \nattribute DOMString MozOutlineStyle \nattribute DOMString MozOutlineWidth \nattribute DOMString MozOutlineOffset \nattribute DOMString MozPaddingEnd \nattribute DOMString MozPaddingStart \nattribute DOMString MozUserFocus \nattribute DOMString MozUserInput \nattribute DOMString MozUserModify \nattribute DOMString MozUserSelect \nattribute DOMString opacity \nattribute DOMString lineOffset \nattribute DOMString overflowX \nattribute DOMString overflowY \nattribute DOMString imeMode \nattribute DOMString MozBorderEnd \nattribute DOMString MozBorderEndColor \nattribute DOMString MozBorderEndStyle \nattribute DOMString MozBorderEndWidth \nattribute DOMString MozBorderStart \nattribute DOMString MozBorderStartColor \nattribute DOMString MozBorderStartStyle \nattribute DOMString MozBorderStartWidth \nattribute DOMString MozStackSizing \nattribute DOMString MozBorderImage \nattribute DOMString MozColumnRule \nattribute DOMString MozColumnRuleWidth \nattribute DOMString MozColumnRuleStyle \nattribute DOMString MozColumnRuleColor \nattribute DOMString wordWrap \nattribute DOMString MozTransform \nattribute DOMString MozTransformOrigin \nattribute DOMString MozWindowShadow \nattribute DOMString backgroundSize \nattribute DOMString MozTransitionProperty \nattribute DOMString MozTransitionDuration \nattribute DOMString MozTransitionDelay \nattribute DOMString MozTransitionTimingFunction \nattribute DOMString MozTransition \nattribute DOMString pointerEvents \nattribute DOMString MozTabSize \nattribute DOMString resize \nnsIUpdateService.idl \nattribute AString type \nattribute AString URL \nattribute AString finalURL \nattribute AString hashFunction \nattribute AString hashValue \nattribute unsignedlong size \nattribute AString state \nattribute boolean selected \nnsIDOMElement serialize( nsIDOMDocument updates) \nnsIStreamConverter.idl \nnsIInputStream convert( nsIInputStream aFromStream, string aFromType, string aToType, nsISupports aCtxt) \nvoid asyncConvertData( string aFromType, string aToType, nsIStreamListener aListener, nsISupports aCtxt) \nnsICMSSecureMessage.idl \nstring getCertByPrefID( string certID) \nnsIX509Cert decodeCert( string value) \nstring sendMessage( string msg, string cert) \nstring receiveMessage( string msg) \nnsIDOMRange.idl \nvoid setStart( nsIDOMNode refNode, long offset) \nvoid setEnd( nsIDOMNode refNode, long offset) \nvoid setStartBefore( nsIDOMNode refNode) \nvoid setStartAfter( nsIDOMNode refNode) \nvoid setEndBefore( nsIDOMNode refNode) \nvoid setEndAfter( nsIDOMNode refNode) \nvoid collapse( boolean toStart) \nvoid selectNode( nsIDOMNode refNode) \nvoid selectNodeContents( nsIDOMNode refNode) \nshort compareBoundaryPoints( unsignedshort how, nsIDOMRange sourceRange) \nvoid deleteContents() \nnsIDOMDocumentFragment extractContents() \nnsIDOMDocumentFragment cloneContents() \nvoid insertNode( nsIDOMNode newNode) \nvoid surroundContents( nsIDOMNode newParent) \nnsIDOMRange cloneRange() \nDOMString toString() \nvoid detach() \nnsIDOMSVGEvent.idl \nnsIFastLoadService.idl \nvoid disableTruncate() \nISimpleDOMText.idl \nHRESULT get_clippedSubstringBounds( unsigned int startIndex,unsigned int endIndex, int x, int y, int width, int height) \nHRESULT get_unclippedSubstringBounds( unsigned int startIndex, unsigned int endIndex, int x, int y, int width, int height) \nHRESULT scrollToSubstring( unsigned int startIndex, unsigned int endIndex) \nnsIProtectedAuthThread.idl \nvoid login( nsIObserver observer) \nAString getTokenName() \nnsIDOM3Document.idl \nattribute boolean xmlStandalone \nattribute DOMString xmlVersion \nattribute boolean strictErrorChecking \nattribute DOMString documentURI \nnsIDOMNode adoptNode( nsIDOMNode source) \nvoid normalizeDocument() \nnsIDOMNode renameNode( nsIDOMNode node, DOMString namespaceURI, DOMString qualifiedName) \nnsICMSMessage2.idl \nvoid asyncVerifySignature( nsISMimeVerificationListener listener) \nvoid asyncVerifyDetachedSignature( nsISMimeVerificationListener listener, UnsignedCharPtr aDigestData, unsignedlong aDigestDataLen) \nnsIRefreshURI.idl \nvoid refreshURI( nsIURI aURI, long aMillis, boolean aRepeat, boolean aMetaRefresh) \nvoid forceRefreshURI( nsIURI aURI, long aMillis, boolean aMetaRefresh) \nvoid setupRefreshURI( nsIChannel aChannel) \nvoid setupRefreshURIFromHeader( nsIURI aBaseURI, ACString aHeader) \nvoid cancelRefreshURITimers() \nnsIEnvironment.idl \nvoid set( AString aName, AString aValue) \nAString get( AString aName) \nboolean exists( AString aName) \nnsIDOMSimpleGestureEvent.idl \nvoid initSimpleGestureEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, unsignedshort buttonArg, nsIDOMEventTarget relatedTargetArg, unsignedlong directionArg, double deltaArg) \nnsIAsyncInputStream.idl \nvoid closeWithStatus( nsresult aStatus) \nvoid asyncWait( nsIInputStreamCallback aCallback, unsignedlong aFlags, unsignedlong aRequestedCount, nsIEventTarget aEventTarget) \nnsIDOMPopStateEvent_MOZILLA_2_BRANCH.idl \nvoid initPopStateEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIVariant stateArg, boolean isInitial) \nnsIBrowserProfileMigrator.idl \nvoid migrate( unsignedshort aItems, nsIProfileStartup aStartup, wstring aProfile) \nunsignedshort getMigrateData( wstring aProfile, boolean aDoingStartup) \nnsIIOService2.idl \nattribute boolean manageOfflineStatus \nnsIDOMConstructor.idl \nAString toString() \nnsIDOMHTMLScriptElement.idl \nattribute DOMString src \nattribute boolean async \nattribute boolean defer \nattribute DOMString type \nattribute DOMString charset \nattribute DOMString text \nattribute DOMString htmlFor \nattribute DOMString event \nnsIEditorStyleSheets.idl \nnsIDOMHTMLTitleElement.idl \nattribute DOMString text \nnsIThreadInternal.idl \nattribute nsIThreadObserver observer \nvoid pushEventQueue( nsIThreadEventFilter filter) \nvoid popEventQueue() \nnsIASN1PrintableItem.idl \nvoid setData( charPtr data, unsignedlong len) \nvoid getData( charPtr data, unsignedlong len) \nnsIDOMWindow2.idl \nDOMString createBlobURL( nsIDOMBlob blob) \nvoid revokeBlobURL( DOMString URL) \nnsIFormatConverter.idl \nnsISupportsArray getInputDataFlavors( )  \nnsISupportsArray getOutputDataFlavors( )  \nboolean canConvert( string aFromDataFlavor, string aToDataFlavor )  \nvoid convert( string aFromDataFlavor, nsISupports aFromData, unsignedlong aDataLen, string aToDataFlavor, nsISupports aToData, unsignedlong aDataToLen )  \nnsIDOMSerializer.idl \nAString serializeToString( nsIDOMNode root) \nvoid serializeToStream( nsIDOMNode root, nsIOutputStream stream, AUTF8String charset) \nnsIParentalControlsService.idl \nboolean requestURIOverride( nsIURI aTarget, nsIInterfaceRequestor aWindowContext) \nboolean requestURIOverrides( nsIArray aTargets, nsIInterfaceRequestor aWindowContext) \nvoid log( short aEntryType, boolean aFlag, nsIURI aSource, nsIFile aTarget) \nnsIDOMDesktopNotification.idl \nnsIDOMDesktopNotification createNotification( DOMString title, DOMString description, DOMString iconURL) \nnsISSLSocketControl.idl \nattribute nsIInterfaceRequestor notificationCallbacks \nvoid proxyStartSSL() \nvoid StartTLS() \nnsIInlineSpellChecker.idl \nattribute boolean enableRealTimeSpell \nvoid init( nsIEditor aEditor) \nvoid cleanup( boolean aDestroyingFrames) \nvoid spellCheckAfterEditorChange( long aAction, nsISelection aSelection, nsIDOMNode aPreviousSelectedNode, long aPreviousSelectedOffset, nsIDOMNode aStartNode, long aStartOffset, nsIDOMNode aEndNode, long aEndOffset) \nvoid spellCheckRange( nsIDOMRange aSelection) \nnsIDOMRange getMisspelledWord( nsIDOMNode aNode, long aOffset) \nvoid replaceWord( nsIDOMNode aNode, long aOffset, AString aNewword) \nvoid addWordToDictionary( AString aWord) \nvoid ignoreWord( AString aWord) \nvoid ignoreWords( wstring aWordsToIgnore, unsignedlong aCount) \nnsIDOMGeoPositionOptions.idl \nattribute boolean enableHighAccuracy \nattribute long timeout \nattribute long maximumAge \nnsIAutoCompleteSearch.idl \nvoid startSearch( AString searchString, AString searchParam, nsIAutoCompleteResult previousResult, nsIAutoCompleteObserver listener) \nvoid stopSearch() \nnsIProxyAutoConfig.idl \nvoid init( ACString aPACURI, AString aPACScript) \nACString getProxyForURI( ACString aTestURI, ACString aTestHost) \nnsIXPCScriptNotify.idl \nvoid ScriptExecuted() \nnsIInterfaceInfoManager.idl \nnsIInterfaceInfo getInfoForIID( nsIIDPtr iid) \nnsIInterfaceInfo getInfoForName( string name) \nnsIIDPtr getIIDForName( string name) \nstring getNameForIID( nsIIDPtr iid) \nnsIEnumerator enumerateInterfaces() \nvoid autoRegisterInterfaces() \nnsIEnumerator enumerateInterfacesWhoseNamesStartWith( string prefix) \nnsIGeolocationProvider.idl \nvoid update( nsIDOMGeoPosition position) \nnsIDOMHTMLStyleElement.idl \nattribute boolean disabled \nattribute DOMString media \nattribute DOMString type \nnsIWebNavigationInfo.idl \nunsignedlong isTypeSupported( ACString aType, nsIWebNavigation aWebNav) \nnsIProfileChangeStatus.idl \nnsIDownloadManagerUI.idl \nvoid show( nsIInterfaceRequestor aWindowContext, unsignedlong aID, short aReason) \nvoid getAttention() \nnsIDOMHTMLBRElement.idl \nattribute DOMString clear \nnsITypeAheadFind.idl \nvoid init( nsIDocShell aDocShell) \nunsignedshort find( AString aSearchString, boolean aLinksOnly) \nunsignedshort findAgain( boolean findBackwards, boolean aLinksOnly) \nvoid setDocShell( nsIDocShell aDocShell) \nvoid setSelectionModeAndRepaint( short toggle) \nvoid collapseSelection() \nnsIDOMSVGTextContentElement.idl \nlong getNumberOfChars() \nfloat getComputedTextLength() \nfloat getSubStringLength( unsignedlong charnum, unsignedlong nchars) \nnsIDOMSVGPoint getStartPositionOfChar( unsignedlong charnum) \nnsIDOMSVGPoint getEndPositionOfChar( unsignedlong charnum) \nnsIDOMSVGRect getExtentOfChar( unsignedlong charnum) \nfloat getRotationOfChar( unsignedlong charnum) \nlong getCharNumAtPosition( nsIDOMSVGPoint point) \nvoid selectSubString( unsignedlong charnum, unsignedlong nchars) \nnsIDOMFormData.idl \nvoid append( DOMString name, nsIVariant value) \nnsIDOMMouseScrollEvent.idl \nvoid initMouseScrollEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, unsignedshort buttonArg, nsIDOMEventTarget relatedTargetArg, long axis) \nnsIWebBrowserStream.idl \nvoid openStream( nsIURI aBaseURI, ACString aContentType) \nvoid appendToStream( octet aData, unsignedlong aLen) \nvoid closeStream() \ninIDeepTreeWalker.idl \nattribute boolean showAnonymousContent \nattribute boolean showSubDocuments \nvoid init( nsIDOMNode aRoot, unsignedlong aWhatToShow) \nnsIUrlClassifierTable.idl \nattribute ACString name \nattribute boolean needsUpdate \nvoid exists( ACString key, nsIUrlListManagerCallback cb) \nnsIAccessibleTable.idl \nnsIAccessible getCellAt( long rowIndex, long columnIndex) \nlong getCellIndexAt( long rowIndex, long columnIndex) \nlong getColumnIndexAt( long cellIndex) \nlong getRowIndexAt( long cellIndex) \nvoid getRowAndColumnIndicesAt( long cellIndex, long rowIndex, long columnIndex) \nlong getColumnExtentAt( long row, long column) \nlong getRowExtentAt( long row, long column) \nAString getColumnDescription( long columnIndex) \nAString getRowDescription( long rowIndex) \nboolean isColumnSelected( long columnIndex) \nboolean isRowSelected( long rowIndex) \nboolean isCellSelected( long rowIndex, long columnIndex) \nvoid getSelectedCellIndices( unsignedlong cellsArraySize, long cellsArray) \nvoid getSelectedColumnIndices( unsignedlong columnsArraySize, long columnsArray) \nvoid getSelectedRowIndices( unsignedlong rowsArraySize, long rowsArray) \nvoid selectRow( long rowIndex) \nvoid selectColumn( long columnIndex) \nvoid unselectRow( long rowIndex) \nvoid unselectColumn( long columnIndex) \nboolean isProbablyForLayout() \nnsIDOMProgressEvent.idl \nvoid initProgressEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, boolean lengthComputableArg, unsignedlonglong loadedArg, unsignedlonglong totalArg) \nnsIWebContentConverterRegistrar.idl \nAString getHandlerURI( AString uri) \nnsIExternalURLHandlerService.idl \nnsIHandlerInfo getURLHandlerInfoFromOS( nsIURI aURL, boolean aFound) \nnsIDOMBeforeUnloadEvent.idl \nattribute DOMString returnValue \nnsIPK11Token.idl \nboolean isLoggedIn() \nvoid login( boolean force) \nvoid logoutSimple() \nvoid logoutAndDropAuthenticatedResources() \nvoid reset() \nvoid initPassword( wstring initialPassword) \nvoid changePassword( wstring oldPassword, wstring newPassword) \nlong getAskPasswordTimes() \nlong getAskPasswordTimeout() \nvoid setAskPasswordDefaults( long askTimes, long timeout) \nboolean isHardwareToken() \nboolean needsLogin() \nboolean isFriendly() \nnsIPopupBoxObject.idl \nattribute boolean autoPosition \nvoid showPopup( nsIDOMElement srcContent, nsIDOMElement popupContent, long xpos, long ypos, wstring popupType, wstring anchorAlignment, wstring popupAlignment) \nvoid hidePopup() \nvoid enableKeyboardNavigator( boolean enableKeyboardNavigator) \nvoid enableRollup( boolean enableRollup) \nvoid setConsumeRollupEvent( PRUint32 consume) \nvoid sizeTo( long width, long height) \nvoid moveTo( long left, long top) \nvoid openPopup( nsIDOMElement anchorElement, AString position, long x, long y, boolean isContextMenu, boolean attributesOverride, nsIDOMEvent triggerEvent) \nvoid openPopupAtScreen( long x, long y, boolean isContextMenu, nsIDOMEvent triggerEvent) \nnsPIPlacesDatabase.idl \nmozIStoragePendingStatement asyncExecuteLegacyQueries( nsINavHistoryQuery aQueries, unsignedlong aQueryCount, nsINavHistoryQueryOptions aOptions, mozIStorageStatementCallback aCallback) \nnsIDOMSVGPathElement.idl \nfloat getTotalLength() \nnsIDOMSVGPoint getPointAtLength( float distance) \nunsignedlong getPathSegAtLength( float distance) \nnsIDOMSVGPathSegClosePath createSVGPathSegClosePath() \nnsIDOMSVGPathSegMovetoAbs createSVGPathSegMovetoAbs( float x, float y) \nnsIDOMSVGPathSegMovetoRel createSVGPathSegMovetoRel( float x, float y) \nnsIDOMSVGPathSegLinetoAbs createSVGPathSegLinetoAbs( float x, float y) \nnsIDOMSVGPathSegLinetoRel createSVGPathSegLinetoRel( float x, float y) \nnsIDOMSVGPathSegCurvetoCubicAbs createSVGPathSegCurvetoCubicAbs( float x, float y, float x1, float y1, float x2, float y2) \nnsIDOMSVGPathSegCurvetoCubicRel createSVGPathSegCurvetoCubicRel( float x, float y, float x1, float y1, float x2, float y2) \nnsIDOMSVGPathSegCurvetoQuadraticAbs createSVGPathSegCurvetoQuadraticAbs( float x, float y, float x1, float y1) \nnsIDOMSVGPathSegCurvetoQuadraticRel createSVGPathSegCurvetoQuadraticRel( float x, float y, float x1, float y1) \nnsIDOMSVGPathSegArcAbs createSVGPathSegArcAbs( float x, float y, float r1, float r2, float angle, boolean largeArcFlag, boolean sweepFlag) \nnsIDOMSVGPathSegArcRel createSVGPathSegArcRel( float x, float y, float r1, float r2, float angle, boolean largeArcFlag, boolean sweepFlag) \nnsIDOMSVGPathSegLinetoHorizontalAbs createSVGPathSegLinetoHorizontalAbs( float x) \nnsIDOMSVGPathSegLinetoHorizontalRel createSVGPathSegLinetoHorizontalRel( float x) \nnsIDOMSVGPathSegLinetoVerticalAbs createSVGPathSegLinetoVerticalAbs( float y) \nnsIDOMSVGPathSegLinetoVerticalRel createSVGPathSegLinetoVerticalRel( float y) \nnsIDOMSVGPathSegCurvetoCubicSmoothAbs createSVGPathSegCurvetoCubicSmoothAbs( float x, float y, float x2, float y2) \nnsIDOMSVGPathSegCurvetoCubicSmoothRel createSVGPathSegCurvetoCubicSmoothRel( float x, float y, float x2, float y2) \nnsIDOMSVGPathSegCurvetoQuadraticSmoothAbs createSVGPathSegCurvetoQuadraticSmoothAbs( float x, float y) \nnsIDOMSVGPathSegCurvetoQuadraticSmoothRel createSVGPathSegCurvetoQuadraticSmoothRel( float x, float y) \nnsIContentHandler.idl \nvoid handleContent( string aContentType, nsIInterfaceRequestor aWindowContext, nsIRequest aRequest) \nnsIMozAxPlugin.idl \nvoid invoke( string str) \nvoid invoke1( string str, nsIVariant a) \nvoid invoke2( string str, nsIVariant a, nsIVariant b) \nvoid invoke3( string str, nsIVariant a, nsIVariant b, nsIVariant c) \nvoid invoke4( string str, nsIVariant a, nsIVariant b, nsIVariant c, nsIVariant d) \nnsIVariant getProperty( string propertyName) \nvoid setProperty( string propertyName, nsIVariant propertyValue) \nnsIDOMSVGViewSpec.idl \nnsIDOMHTMLQuoteElement.idl \nattribute DOMString cite \nnsISimpleUnicharStreamFactory.idl \nnsIUnicharInputStream createInstanceFromString( AString aString) \nnsIUnicharInputStream createInstanceFromUTF8Stream( nsIInputStream aStream) \nmozISpellCheckingEngine.idl \nattribute wstring dictionary \nattribute mozIPersonalDictionary personalDictionary \nvoid getDictionaryList( wstring dictionaries, PRUint32 count) \nboolean check( wstring word) \nvoid suggest( wstring word, wstring suggestions, PRUint32 count) \nnsIPromptFactory.idl \nvoid getPrompt( nsIDOMWindow aParent, nsIIDRef iid, nsQIResult result) \nnsPICertNotification.idl \nvoid onCertAvailable( nsIURI aURI, nsISupports aContext, PRUint32 aStatus, nsIPrincipal aPrincipal) \nnsIRwsService.idl \nunsignedlong iconFromExtension( string aExt, boolean aNeedMini) \nunsignedlong iconFromPath( string aPath, boolean aAbstract, boolean aNeedMini) \nunsignedlong iconFromHandle( unsignedlong aHandle, boolean aNeedMini) \nAString handlerFromExtension( string aExt, unsignedlong aHandle) \nAString handlerFromPath( string aPath, unsignedlong aHandle) \nAString titleFromHandle( unsignedlong aHandle) \nvoid menuFromPath( string aPath, boolean aAbstract) \nvoid openWithAppPath( string aFilePath, string aAppPath) \nvoid openWithAppHandle( string aFilePath, unsignedlong aAppHandle) \nnsIWinTaskbar.idl \nnsITaskbarTabPreview createTaskbarTabPreview( nsIDocShell shell, nsITaskbarPreviewController controller) \nnsITaskbarWindowPreview getTaskbarWindowPreview( nsIDocShell shell) \nnsITaskbarProgress getTaskbarProgress( nsIDocShell shell) \nnsIJumpListBuilder createJumpListBuilder() \nvoid setGroupIdForWindow( nsIDOMWindow aParent, AString aIdentifier) \nnsIDOMXULImageElement.idl \nattribute DOMString src \nnsIHttpActivityObserver.idl \nvoid observeActivity( nsISupports aHttpChannel, PRUint32 aActivityType, PRUint32 aActivitySubtype, PRTime aTimestamp, PRUint64 aExtraSizeData, ACString aExtraStringData) \nnsICacheListener.idl \nvoid onCacheEntryAvailable( nsICacheEntryDescriptor descriptor, nsCacheAccessMode accessGranted, nsresult status) \nmozIStorageCompletionCallback.idl \nvoid complete() \nnsIScrollBoxObject.idl \nvoid scrollTo( long x, long y) \nvoid scrollBy( long dx, long dy) \nvoid scrollByLine( long dlines) \nvoid scrollByIndex( long dindexes) \nvoid scrollToLine( long line) \nvoid scrollToElement( nsIDOMElement child) \nvoid scrollToIndex( long index) \nvoid getPosition( long x, long y) \nvoid getScrolledSize( long width, long height) \nvoid ensureElementIsVisible( nsIDOMElement child) \nvoid ensureIndexIsVisible( long index) \nvoid ensureLineIsVisible( long line) \nnsIDOMSVGNumberList.idl \nvoid clear() \nnsIDOMSVGNumber initialize( nsIDOMSVGNumber newItem ) \nnsIDOMSVGNumber getItem( unsignedlong index) \nnsIDOMSVGNumber insertItemBefore( nsIDOMSVGNumber newItem, unsignedlong index) \nnsIDOMSVGNumber replaceItem( nsIDOMSVGNumber newItem, unsignedlong index) \nnsIDOMSVGNumber removeItem( unsignedlong index) \nnsIDOMSVGNumber appendItem( nsIDOMSVGNumber newItem) \nnsITreeView.idl \nattribute nsITreeSelection selection \nvoid getRowProperties( long index, nsISupportsArray properties) \nvoid getCellProperties( long row, nsITreeColumn col, nsISupportsArray properties) \nvoid getColumnProperties( nsITreeColumn col, nsISupportsArray properties) \nboolean isContainer( long index) \nboolean isContainerOpen( long index) \nboolean isContainerEmpty( long index) \nboolean isSeparator( long index) \nboolean isSorted() \nboolean canDrop( long index, long orientation, nsIDOMDataTransfer dataTransfer) \nvoid drop( long row, long orientation, nsIDOMDataTransfer dataTransfer) \nlong getParentIndex( long rowIndex) \nboolean hasNextSibling( long rowIndex, long afterIndex) \nlong getLevel( long index) \nAString getImageSrc( long row, nsITreeColumn col) \nlong getProgressMode( long row, nsITreeColumn col) \nAString getCellValue( long row, nsITreeColumn col) \nAString getCellText( long row, nsITreeColumn col) \nvoid setTree( nsITreeBoxObject tree) \nvoid toggleOpenState( long index) \nvoid cycleHeader( nsITreeColumn col) \nvoid selectionChanged() \nvoid cycleCell( long row, nsITreeColumn col) \nboolean isEditable( long row, nsITreeColumn col) \nboolean isSelectable( long row, nsITreeColumn col) \nvoid setCellValue( long row, nsITreeColumn col, AString value) \nvoid setCellText( long row, nsITreeColumn col, AString value) \nvoid performAction( wstring action) \nvoid performActionOnRow( wstring action, long row) \nvoid performActionOnCell( wstring action, long row, nsITreeColumn col) \nnsIFeedGenerator.idl \nattribute AString agent \nattribute AString version \nattribute nsIURI uri \nnsIDOMTransitionEvent.idl \nvoid initTransitionEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, DOMString propertyNameArg, float elapsedTimeArg) \nnsIDOMSVGAnimateElement.idl \nnsIWebProgress.idl \nvoid addProgressListener( nsIWebProgressListener aListener, unsignedlong aNotifyMask) \nvoid removeProgressListener( nsIWebProgressListener aListener) \nnsIDOMStorageEventObsolete.idl \nvoid initStorageEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, DOMString domainArg) \nnsIDocumentStateListener.idl \nvoid NotifyDocumentCreated() \nvoid NotifyDocumentWillBeDestroyed() \nvoid NotifyDocumentStateChanged( boolean nowDirty) \nnsIDOMCSSValue.idl \nattribute DOMString cssText \nnsITaskbarPreviewController.idl \nboolean drawPreview( nsIDOMCanvasRenderingContext2D ctx) \nboolean drawThumbnail( nsIDOMCanvasRenderingContext2D ctx, unsignedlong width, unsignedlong height) \nvoid onClose() \nboolean onActivate() \nvoid onClick( nsITaskbarPreviewButton button) \nnsIDocumentLoader.idl \nvoid stop() \nnsIURLParser.idl \nvoid parseURL( string spec, long specLen, unsignedlong schemePos, long schemeLen, unsignedlong authorityPos, long authorityLen, unsignedlong pathPos, long pathLen) \nvoid parseAuthority( string authority, long authorityLen, unsignedlong usernamePos, long usernameLen, unsignedlong passwordPos, long passwordLen, unsignedlong hostnamePos, long hostnameLen, long port) \nvoid parseUserInfo( string userinfo, long userinfoLen, unsignedlong usernamePos, long usernameLen, unsignedlong passwordPos, long passwordLen) \nvoid parseServerInfo( string serverinfo, long serverinfoLen, unsignedlong hostnamePos, long hostnameLen, long port) \nvoid parsePath( string path, long pathLen, unsignedlong filepathPos, long filepathLen, unsignedlong paramPos, long paramLen, unsignedlong queryPos, long queryLen, unsignedlong refPos, long refLen) \nvoid parseFilePath( string filepath, long filepathLen, unsignedlong directoryPos, long directoryLen, unsignedlong basenamePos, long basenameLen, unsignedlong extensionPos, long extensionLen) \nvoid parseFileName( string filename, long filenameLen, unsignedlong basenamePos, long basenameLen, unsignedlong extensionPos, long extensionLen) \nnsIDOMParser.idl \nnsIDOMDocument parseFromString( wstring str, string contentType) \nnsIDOMDocument parseFromBuffer( octet buf, PRUint32 bufLen, string contentType) \nnsIDOMDocument parseFromStream( nsIInputStream stream, string charset, long contentLength, string contentType) \nvoid init( nsIPrincipal principal, nsIURI documentURI, nsIURI baseURI, nsIScriptGlobalObject scriptObject) \nnsISimpleEnumerator.idl \nboolean hasMoreElements() \nnsISupports getNext() \nnsIObjectLoadingContent.idl \nunsignedlong getContentTypeForMIMEType( AUTF8String aMimeType) \nnsIPluginInstance ensureInstantiation() \nvoid hasNewFrame( nsIObjectFrame aFrame) \nvoid setAbsoluteScreenPosition( nsIDOMElement element, nsIDOMClientRect position, nsIDOMClientRect clip) \nnsIFrame getPrintFrame() \nvoid pluginCrashed( nsIPluginTag pluginTag, AString pluginDumpID, AString browserDumpID, boolean submittedCrashReport) \nnsIIDBRequest.idl \nattribute nsIDOMEventListener onsuccess \nattribute nsIDOMEventListener onerror \nnsIComponentRegistrar.idl \nvoid autoRegister( nsIFile aSpec) \nvoid autoUnregister( nsIFile aSpec) \nvoid registerFactory( nsCIDRef aClass, string aClassName, string aContractID, nsIFactory aFactory) \nvoid unregisterFactory( nsCIDRef aClass, nsIFactory aFactory) \nvoid registerFactoryLocation( nsCIDRef aClass, string aClassName, string aContractID, nsIFile aFile, string aLoaderStr, string aType) \nvoid unregisterFactoryLocation( nsCIDRef aClass, nsIFile aFile) \nboolean isCIDRegistered( nsCIDRef aClass) \nboolean isContractIDRegistered( string aContractID) \nnsISimpleEnumerator enumerateCIDs() \nnsISimpleEnumerator enumerateContractIDs() \nstring CIDToContractID( nsCIDRef aClass) \nnsCIDPtr contractIDToCID( string aContractID) \nnsIPermissionManager.idl \nvoid add( nsIURI uri, string type, PRUint32 permission, PRUint32 expireType, PRInt64 expireTime) \nvoid remove( AUTF8String host, string type) \nvoid removeAll() \nPRUint32 testPermission( nsIURI uri, string type) \nPRUint32 testExactPermission( nsIURI uri, string type) \nnsIDOMSVGPointList.idl \nvoid clear() \nnsIDOMSVGPoint initialize( nsIDOMSVGPoint newItem) \nnsIDOMSVGPoint getItem ( unsignedlong index) \nnsIDOMSVGPoint insertItemBefore( nsIDOMSVGPoint newItem, unsignedlong index) \nnsIDOMSVGPoint replaceItem( nsIDOMSVGPoint newItem, unsignedlong index) \nnsIDOMSVGPoint removeItem( unsignedlong index) \nnsIDOMSVGPoint appendItem( nsIDOMSVGPoint newItem) \nnsIXULTemplateQueryProcessor.idl \nnsISupports getDatasource( nsIArray aDataSources, nsIDOMNode aRootNode, boolean aIsTrusted, nsIXULTemplateBuilder aBuilder, boolean aShouldDelayBuilding) \nvoid initializeForBuilding( nsISupports aDatasource, nsIXULTemplateBuilder aBuilder, nsIDOMNode aRootNode) \nvoid done() \nnsISupports compileQuery( nsIXULTemplateBuilder aBuilder, nsIDOMNode aQuery, nsIAtom aRefVariable, nsIAtom aMemberVariable) \nnsISimpleEnumerator generateResults( nsISupports aDatasource, nsIXULTemplateResult aRef, nsISupports aQuery) \nvoid addBinding( nsIDOMNode aRuleNode, nsIAtom aVar, nsIAtom aRef, AString aExpr) \nnsIXULTemplateResult translateRef( nsISupports aDatasource, AString aRefString) \nPRInt32 compareResults( nsIXULTemplateResult aLeft, nsIXULTemplateResult aRight, nsIAtom aVar, unsignedlong aSortHints) \nnsISelectElement.idl \nvoid willAddOptions( nsIContent aOptions, nsIContent aParent, long aContentIndex, boolean aNotify) \nvoid willRemoveOptions( nsIContent aParent, long aContentIndex, boolean aNotify) \nboolean isOptionDisabled( long aIndex) \nboolean setOptionsSelectedByIndex( long aStartIndex, long aEndIndex, boolean aIsSelected, boolean aClearAll, boolean aSetDisabled, boolean aNotify) \nlong getOptionIndex( nsIDOMHTMLOptionElement aOption, long aStartIndex, boolean aForward) \nrdfITripleVisitor.idl \nvoid visit( nsIRDFNode aSubject, nsIRDFResource aPredicate, nsIRDFNode aObject, boolean aTruthValue) \nnsIChannelEventSink.idl \nvoid asyncOnChannelRedirect( nsIChannel oldChannel, nsIChannel newChannel, unsignedlong flags, nsIAsyncVerifyRedirectCallback callback) \nnsIPrefBranch2.idl \nvoid addObserver( string aDomain, nsIObserver aObserver, boolean aHoldWeak) \nvoid removeObserver( string aDomain, nsIObserver aObserver) \nnsIAppStartup.idl \nvoid createHiddenWindow() \nvoid destroyHiddenWindow() \nvoid run() \nvoid enterLastWindowClosingSurvivalArea() \nvoid exitLastWindowClosingSurvivalArea() \nvoid quit( PRUint32 aMode) \nnsIDOMDocumentCSS.idl \nnsIDOMCSSStyleDeclaration getOverrideStyle( nsIDOMElement elt, DOMString pseudoElt) \nnsIAutoConfig.idl \nnsIDOMNSHTMLDocument.idl \nattribute DOMString alinkColor \nattribute DOMString linkColor \nattribute DOMString vlinkColor \nattribute DOMString bgColor \nattribute DOMString fgColor \nattribute DOMString domain \nattribute DOMString designMode \nDOMString getSelection() \nnsIDOMDocument open( ACString aContentType, boolean aReplace) \nvoid clear() \nvoid captureEvents( long eventFlags) \nvoid releaseEvents( long eventFlags) \nvoid routeEvent( nsIDOMEvent evt) \nboolean execCommand( DOMString commandID, boolean doShowUI, DOMString value) \nboolean execCommandShowHelp( DOMString commandID) \nboolean queryCommandEnabled( DOMString commandID) \nboolean queryCommandIndeterm( DOMString commandID) \nboolean queryCommandState( DOMString commandID) \nboolean queryCommandSupported( DOMString commandID) \nDOMString queryCommandText( DOMString commandID) \nDOMString queryCommandValue( DOMString commandID) \nnsICategoryManager.idl \nstring getCategoryEntry( string aCategory, string aEntry) \nstring addCategoryEntry( string aCategory, string aEntry, string aValue, boolean aPersist, boolean aReplace) \nvoid deleteCategoryEntry( string aCategory, string aEntry, boolean aPersist) \nvoid deleteCategory( string aCategory) \nnsISimpleEnumerator enumerateCategory( string aCategory) \nnsISimpleEnumerator enumerateCategories() \nnsIDownloadProgressListener.idl \nattribute nsIDOMDocument document \nvoid onDownloadStateChange( short aState, nsIDownload aDownload) \nvoid onStateChange( nsIWebProgress aWebProgress, nsIRequest aRequest, unsignedlong aStateFlags, nsresult aStatus, nsIDownload aDownload) \nvoid onProgressChange( nsIWebProgress aWebProgress, nsIRequest aRequest, long long aCurSelfProgress, long long aMaxSelfProgress, long long aCurTotalProgress, long long aMaxTotalProgress, nsIDownload aDownload) \nvoid onSecurityChange( nsIWebProgress aWebProgress, nsIRequest aRequest, unsignedlong aState, nsIDownload aDownload) \nnsIArray.idl \nvoid queryElementAt( unsignedlong index, nsIIDRef uuid, nsQIResult result) \nunsignedlong indexOf( unsignedlong startIndex, nsISupports element) \nnsISimpleEnumerator enumerate() \nnsIDOMUIEvent.idl \nvoid initUIEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg) \nrdfIDataSource.idl \nvoid visitAllSubjects( rdfITripleVisitor aVisitor) \nvoid visitAllTriples( rdfITripleVisitor aVisitor) \nnsIProgressEventSink.idl \nvoid onProgress( nsIRequest aRequest, nsISupports aContext, unsignedlong long aProgress, unsignedlong long aProgressMax) \nvoid onStatus( nsIRequest aRequest, nsISupports aContext, nsresult aStatus, wstring aStatusArg) \nnsIWebBrowserChrome3.idl \nAString onBeforeLinkTraversal( AString originalTarget, nsIURI linkURI, nsIDOMNode linkNode, PRBool isAppTab) \nnsICookieManager.idl \nvoid removeAll() \nvoid remove( AUTF8String aHost, ACString aName, AUTF8String aPath, boolean aBlocked) \nnsITaskbarWindowPreview.idl \nattribute boolean enableCustomDrawing \nnsITaskbarPreviewButton getButton( unsignedlong index) \nnsIRDFObserver.idl \nvoid onAssert( nsIRDFDataSource aDataSource, nsIRDFResource aSource, nsIRDFResource aProperty, nsIRDFNode aTarget) \nvoid onUnassert( nsIRDFDataSource aDataSource, nsIRDFResource aSource, nsIRDFResource aProperty, nsIRDFNode aTarget) \nvoid onChange( nsIRDFDataSource aDataSource, nsIRDFResource aSource, nsIRDFResource aProperty, nsIRDFNode aOldTarget, nsIRDFNode aNewTarget) \nvoid onMove( nsIRDFDataSource aDataSource, nsIRDFResource aOldSource, nsIRDFResource aNewSource, nsIRDFResource aProperty, nsIRDFNode aTarget) \nvoid onBeginUpdateBatch( nsIRDFDataSource aDataSource) \nvoid onEndUpdateBatch( nsIRDFDataSource aDataSource) \nnsIXULSortService.idl \nvoid sort( nsIDOMNode aNode, AString aSortKey, AString aSortHints) \nnsICryptoHash.idl \nvoid init( unsignedlong aAlgorithm) \nvoid initWithString( ACString aAlgorithm) \nvoid update( octet aData, unsignedlong aLen) \nvoid updateFromStream( nsIInputStream aStream, unsignedlong aLen) \nACString finish( PRBool aASCII) \nnsIX509Cert3.idl \nvoid requestUsagesArrayAsync( nsICertVerificationListener cvl) \nvoid exportAsCMS( unsignedlong chainMode, unsignedlong length, octet data) \nvoid getAllTokenNames( unsignedlong length, wstring tokenNames) \nmozIStorageServiceQuotaManagement.idl \nlong long quotaExceeded( ACString aFilename, long long aCurrentSizeLimit, long long aCurrentTotalSize, nsISupports aUserData) \nnsIDOMSVGAnimationElement.idl \nfloat getStartTime() \nfloat getCurrentTime() \nfloat getSimpleDuration() \nnsIProcess.idl \nvoid init( nsIFile executable) \nvoid kill() \nvoid run( boolean blocking, string args, unsignedlong count) \nvoid runAsync( string args, unsignedlong count, nsIObserver observer, boolean holdWeak) \nvoid runw( boolean blocking, wstring args, unsignedlong count) \nvoid runwAsync( wstring args, unsignedlong count, nsIObserver observer, boolean holdWeak) \nnsIDOMElement.idl \nDOMString getAttribute( DOMString name) \nvoid setAttribute( DOMString name, DOMString value) \nvoid removeAttribute( DOMString name) \nnsIDOMAttr getAttributeNode( DOMString name) \nnsIDOMAttr setAttributeNode( nsIDOMAttr newAttr) \nnsIDOMAttr removeAttributeNode( nsIDOMAttr oldAttr) \nnsIDOMNodeList getElementsByTagName( DOMString name) \nDOMString getAttributeNS( DOMString namespaceURI, DOMString localName) \nvoid setAttributeNS( DOMString namespaceURI, DOMString qualifiedName, DOMString value) \nvoid removeAttributeNS( DOMString namespaceURI, DOMString localName) \nnsIDOMAttr getAttributeNodeNS( DOMString namespaceURI, DOMString localName) \nnsIDOMAttr setAttributeNodeNS( nsIDOMAttr newAttr) \nnsIDOMNodeList getElementsByTagNameNS( DOMString namespaceURI, DOMString localName) \nboolean hasAttribute( DOMString name) \nboolean hasAttributeNS( DOMString namespaceURI, DOMString localName) \nnsIOfflineCacheUpdate.idl \nvoid updateStateChanged( nsIOfflineCacheUpdate aUpdate, PRUint32 state) \nvoid applicationCacheAvailable( nsIApplicationCache applicationCache) \nnsIInputStreamPump.idl \nvoid init( nsIInputStream aStream, long long aStreamPos, long long aStreamLen, unsignedlong aSegmentSize, unsignedlong aSegmentCount, boolean aCloseWhenDone) \nvoid asyncRead( nsIStreamListener aListener, nsISupports aListenerContext) \nnsIFrameLoader.idl \nvoid scrollTo( float xPx, float yPx) \nvoid scrollBy( float dxPx, float dyPx) \nvoid setScale( float xScale, float yScale) \nnsIUrlListManager.idl \nvoid handleEvent( ACString value) \nnsIFontEnumerator.idl \nvoid EnumerateAllFonts( PRUint32 aCount, wstring aResult) \nvoid EnumerateFonts( string aLangGroup, string aGeneric, PRUint32 aCount, wstring aResult) \nvoid HaveFontFor( string aLangGroup, boolean aResult) \nwstring getDefaultFont( string aLangGroup, string aGeneric) \nboolean updateFontList() \nwstring getStandardFamilyName( wstring aName) \nnsIDOMDOMTokenList.idl \nDOMString item( unsignedlong index) \nboolean contains( DOMString token) \nvoid add( DOMString token) \nvoid remove( DOMString token) \nboolean toggle( DOMString token) \nDOMString toString() \nnsIAutoCompleteController.idl \nattribute nsIAutoCompleteInput input \nattribute AString searchString \nvoid startSearch( AString searchString) \nvoid stopSearch() \nvoid handleText() \nboolean handleEnter( boolean aIsPopupSelection) \nboolean handleEscape() \nvoid handleStartComposition() \nvoid handleEndComposition() \nvoid handleTab() \nboolean handleKeyNavigation( unsignedlong key) \nboolean handleDelete() \nAString getValueAt( long index) \nAString getLabelAt( long index) \nAString getCommentAt( long index) \nAString getStyleAt( long index) \nAString getImageAt( long index) \nnsIHTTPIndex.idl \nattribute string encoding \nnsICookie2.idl \nnsIScriptableUnescapeHTML.idl \nAString unescape( AString src) \nnsIDOMDocumentFragment parseFragment( AString fragment, PRBool isXML, nsIURI baseURI, nsIDOMElement element) \nnsIRDFRemoteDataSource.idl \nvoid Init( string aURI) \nvoid Refresh( boolean aBlocking) \nvoid Flush() \nvoid FlushTo( string aURI) \nmozIStorageBaseStatement.idl \nvoid finalize() \nnsIXPIProgressDialog.idl \nvoid onStateChange( unsignedlong index, short state, long value ) \nvoid onProgress( unsignedlong index, unsignedlong long value, unsignedlong long maxValue ) \nnsIUrlClassifierHashCompleter.idl \nvoid completion( ACString hash, ACString table, PRUint32 chunkId, PRBool trusted) \nvoid completionFinished( nsresult status) \nnsIWebBrowserFind.idl \nattribute wstring searchString \nattribute boolean findBackwards \nattribute boolean wrapFind \nattribute boolean entireWord \nattribute boolean matchCase \nattribute boolean searchFrames \nboolean findNext() \nnsIContentViewerEdit.idl \nvoid clearSelection() \nvoid selectAll() \nvoid copySelection() \nvoid copyLinkLocation() \nvoid copyImage( long aCopyFlags) \nAString getContents( string aMimeType, boolean aSelectionOnly) \nnsIPrintingPrompt.idl \nvoid showPrintDialog( nsIWebBrowserPrint webBrowserPrint, nsIPrintSettings printSettings) \nvoid showProgress( nsIWebBrowserPrint webBrowserPrint, nsIPrintSettings printSettings, nsIObserver openDialogObserver, boolean isForPrinting, nsIWebProgressListener webProgressListener, nsIPrintProgressParams printProgressParams, boolean notifyOnOpen) \nvoid showPageSetup( nsIPrintSettings printSettings, nsIObserver aObs) \nvoid showPrinterProperties( wstring printerName, nsIPrintSettings printSettings) \nnsICertificateDialogs.idl \nboolean confirmDownloadCACert( nsIInterfaceRequestor ctx, nsIX509Cert cert, unsignedlong trust) \nvoid notifyCACertExists( nsIInterfaceRequestor ctx) \nboolean setPKCS12FilePassword( nsIInterfaceRequestor ctx, AString password) \nboolean getPKCS12FilePassword( nsIInterfaceRequestor ctx, AString password) \nvoid viewCert( nsIInterfaceRequestor ctx, nsIX509Cert cert) \nvoid crlImportStatusDialog( nsIInterfaceRequestor ctx, nsICRLInfo crl) \nnsIURIContentListener.idl \nattribute nsISupports loadCookie \nattribute nsIURIContentListener parentContentListener \nboolean onStartURIOpen( nsIURI aURI) \nboolean doContent( string aContentType, boolean aIsContentPreferred, nsIRequest aRequest, nsIStreamListener aContentHandler) \nboolean isPreferred( string aContentType, string aDesiredContentType) \nboolean canHandleContent( string aContentType, boolean aIsContentPreferred, string aDesiredContentType) \nnsIDOMNSHTMLHRElement.idl \nattribute DOMString color \nnsISerializationHelper.idl \nACString serializeToString( nsISerializable serializable) \nnsISupports deserializeObject( ACString input) \nnsIAutoCompleteResult.idl \nAString getValueAt( long index) \nAString getLabelAt( long index) \nAString getCommentAt( long index) \nAString getStyleAt( long index) \nAString getImageAt( long index) \nvoid removeValueAt( long rowIndex, boolean removeFromDb) \nnsIDOMSVGMatrix.idl \nattribute float a \nattribute float b \nattribute float c \nattribute float d \nattribute float e \nattribute float f \nnsIDOMSVGMatrix multiply( nsIDOMSVGMatrix secondMatrix) \nnsIDOMSVGMatrix inverse() \nnsIDOMSVGMatrix translate( float x, float y) \nnsIDOMSVGMatrix scale( float scaleFactor) \nnsIDOMSVGMatrix scaleNonUniform( float scaleFactorX, float scaleFactorY) \nnsIDOMSVGMatrix rotate( float angle) \nnsIDOMSVGMatrix rotateFromVector( float x, float y) \nnsIDOMSVGMatrix flipX() \nnsIDOMSVGMatrix flipY() \nnsIDOMSVGMatrix skewX( float angle) \nnsIDOMSVGMatrix skewY( float angle) \nnsINativeAppSupport.idl \nboolean start() \nvoid enable() \nboolean stop() \nvoid quit() \nvoid onLastWindowClosing() \nvoid ReOpen() \nnsIDOMStorageEvent.idl \nvoid initStorageEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, DOMString keyArg, DOMString oldValueArg, DOMString newValueArg, DOMString urlArg, nsIDOMStorage storageAreaArg) \nnsIFactory.idl \nvoid createInstance( nsISupports aOuter, nsIIDRef iid, nsQIResult result) \nvoid lockFactory( PRBool lock) \nnsIFocusManager.idl \nattribute nsIDOMWindow activeWindow \nattribute nsIDOMWindow focusedWindow \nPRUint32 getLastFocusMethod( nsIDOMWindow window) \nvoid setFocus( nsIDOMElement aElement, unsignedlong aFlags) \nnsIDOMElement moveFocus( nsIDOMWindow aWindow, nsIDOMElement aStartElement, unsignedlong aType, unsignedlong aFlags) \nvoid clearFocus( nsIDOMWindow aWindow) \nnsIDOMElement getFocusedElementForWindow( nsIDOMWindow aWindow, PRBool aDeep, nsIDOMWindow aFocusedWindow) \nvoid moveCaretToFocus( nsIDOMWindow aWindow) \nvoid windowRaised( nsIDOMWindow aWindow) \nvoid windowLowered( nsIDOMWindow aWindow) \nvoid windowShown( nsIDOMWindow aWindow, PRBool aNeedsFocus) \nvoid windowHidden( nsIDOMWindow aWindow) \nvoid fireDelayedEvents( nsIDocument aDocument) \nnsICycleCollectorListener.idl \nvoid begin() \nvoid noteObject( unsignedlong long aAddress, string aObjectDescription) \nvoid noteEdge( unsignedlong long aFromAddress, unsignedlong long aToAddress, string aEdgeName) \nvoid beginDescriptions() \nvoid describeRefcountedObject( unsignedlong long aAddress, unsignedlong aKnownEdges, unsignedlong aTotalEdges) \nvoid describeGCedObject( unsignedlong long aAddress, boolean aMarked) \nvoid end() \nnsIControllers.idl \nnsIController getControllerForCommand( string command) \nvoid insertControllerAt( unsignedlong index, nsIController controller) \nnsIController removeControllerAt( unsignedlong index) \nnsIController getControllerAt( unsignedlong index) \nvoid appendController( nsIController controller) \nvoid removeController( nsIController controller) \nunsignedlong getControllerId( nsIController controller) \nnsIController getControllerById( unsignedlong controllerID) \nunsignedlong getControllerCount() \nnsIClipboard.idl \nvoid setData ( nsITransferable aTransferable, nsIClipboardOwner anOwner, long aWhichClipboard )  \nvoid getData ( nsITransferable aTransferable, long aWhichClipboard )  \nvoid emptyClipboard ( long aWhichClipboard )  \nboolean hasDataMatchingFlavors ( string aFlavorList, unsignedlong aLength, long aWhichClipboard )  \nboolean supportsSelectionClipboard ( )  \nnsICRLManager.idl \nnsIFormAutoComplete.idl \nnsIAutoCompleteResult autoCompleteSearch( AString aInputName, AString aSearchString, nsIDOMHTMLInputElement aField, nsIAutoCompleteResult aPreviousResult) \nnsIIndexedDatabaseManager.idl \nvoid onUsageResult( nsIURI aURI, unsignedlong long aUsage) \nnsIDOMSVGPresAspectRatio.idl \nattribute unsignedshort align \nattribute unsignedshort meetOrSlice \nnsIWindowCreator.idl \nnsIWebBrowserChrome createChromeWindow( nsIWebBrowserChrome parent, PRUint32 chromeFlags) \nnsIPropertyBag2.idl \nPRInt32 getPropertyAsInt32 ( AString prop) \nPRUint32 getPropertyAsUint32 ( AString prop) \nPRInt64 getPropertyAsInt64 ( AString prop) \nPRUint64 getPropertyAsUint64 ( AString prop) \ndouble getPropertyAsDouble ( AString prop) \nAString getPropertyAsAString ( AString prop) \nACString getPropertyAsACString ( AString prop) \nAUTF8String getPropertyAsAUTF8String ( AString prop) \nboolean getPropertyAsBool( AString prop) \nvoid getPropertyAsInterface( AString prop, nsIIDRef iid, nsQIResult result) \nnsIVariant get( AString prop) \nPRBool hasKey( AString prop) \nnsIDOMXULDocument.idl \nattribute nsIDOMNode popupNode \nattribute nsIDOMNode tooltipNode \nnsIDOMNodeList getElementsByAttribute( DOMString name, DOMString value) \nnsIDOMNodeList getElementsByAttributeNS( DOMString namespaceURI, DOMString name, DOMString value) \nvoid addBroadcastListenerFor( nsIDOMElement broadcaster, nsIDOMElement observer, DOMString attr) \nvoid removeBroadcastListenerFor( nsIDOMElement broadcaster, nsIDOMElement observer, DOMString attr) \nvoid persist( DOMString id, DOMString attr) \nnsIBoxObject getBoxObjectFor( nsIDOMElement elt) \nvoid loadOverlay( DOMString url, nsIObserver aObserver) \nnsIURIRefObject.idl \nattribute nsIDOMNode node \nvoid Reset() \nDOMString GetNextURI() \nvoid RewriteAllURIs( DOMString aOldPat, DOMString aNewPat, boolean aMakeRel) \nnsIAutoCompleteSimpleResult.idl \nvoid setSearchString( AString aSearchString) \nvoid setErrorDescription( AString aErrorDescription) \nvoid setDefaultIndex( long aDefaultIndex) \nvoid setSearchResult( unsignedshort aSearchResult) \nvoid appendMatch( AString aValue, AString aComment, AString aImage, AString aStyle) \nvoid setListener( nsIAutoCompleteSimpleResultListener aListener) \nnsILoginInfo.idl \nattribute AString hostname \nattribute AString formSubmitURL \nattribute AString httpRealm \nattribute AString username \nattribute AString usernameField \nattribute AString password \nattribute AString passwordField \nvoid init( AString aHostname, AString aFormSubmitURL, AString aHttpRealm, AString aUsername, AString aPassword, AString aUsernameField, AString aPasswordField) \nboolean equals( nsILoginInfo aLoginInfo) \nboolean matches( nsILoginInfo aLoginInfo, boolean ignorePassword) \nnsILoginInfo clone() \nnsISelectionListener.idl \nvoid notifySelectionChanged( nsIDOMDocument doc, nsISelection sel, short reason) \nnsISupportsIterators.idl \nvoid putElement( nsISupports anElementToPut ) \nvoid stepForward() \nnsIScriptableInterfaces.idl \nattribute nsIInterfaceInfoManager manager \nnsIInputListAutoComplete.idl \nnsIAutoCompleteResult autoCompleteSearch( nsIAutoCompleteResult aResult, AString aSearchString, nsIDOMHTMLInputElement aField) \nnsIDNSListener.idl \nvoid onLookupComplete( nsICancelable aRequest, nsIDNSRecord aRecord, nsresult aStatus) \nnsIJumpListBuilder.idl \nboolean initListBuild( nsIMutableArray removedItems) \nboolean addListToBuild( short aCatType, nsIArray items, AString catName) \nvoid abortListBuild() \nboolean commitListBuild() \nboolean deleteActiveList() \nnsIRDFInferDataSource.idl \nattribute nsIRDFDataSource baseDataSource \nnsITextServicesFilter.idl \nboolean skip( nsIDOMNode aNode) \nnsIEventListenerService.idl \nAString toSource() \nnsISupports getDebugObject() \nnsIUnicharLineInputStream.idl \nboolean readLine( AString aLine) \nmozIStorageStatementCallback.idl \nvoid handleResult( mozIStorageResultSet aResultSet) \nvoid handleError( mozIStorageError aError) \nvoid handleCompletion( unsignedshort aReason) \nnsIHttpAuthenticableChannel.idl \nvoid cancel( nsresult aStatus) \nvoid setProxyCredentials( ACString credentials) \nvoid setWWWCredentials( ACString credentials) \nvoid onAuthAvailable() \nvoid onAuthCancelled( boolean userCancel) \nnsITraceableChannel.idl \nnsIStreamListener setNewListener( nsIStreamListener aListener) \nxpctest.idl \nvoid call( string s) \nvoid callWithThis( nsISupports self, string s) \nnsIProperties.idl \nvoid get( string prop, nsIIDRef iid, nsQIResult result) \nvoid set( string prop, nsISupports value) \nboolean has( string prop) \nvoid undefine( string prop) \nvoid getKeys( PRUint32 count, string keys) \nnsIProxiedProtocolHandler.idl \nnsIChannel newProxiedChannel( nsIURI uri, nsIProxyInfo proxyInfo) \nnsISecurityWarningDialogs.idl \nboolean confirmEnteringSecure( nsIInterfaceRequestor ctx) \nboolean confirmEnteringWeak( nsIInterfaceRequestor ctx) \nboolean confirmLeavingSecure( nsIInterfaceRequestor ctx) \nboolean confirmMixedMode( nsIInterfaceRequestor ctx) \nboolean confirmPostToInsecure( nsIInterfaceRequestor ctx) \nboolean confirmPostToInsecureFromSecure( nsIInterfaceRequestor ctx) \nnsIFileView.idl \nattribute boolean showHiddenFiles \nattribute boolean showOnlyDirectories \nvoid sort( short sortType, boolean reverseSort) \nvoid setDirectory( nsIFile directory) \nvoid setFilter( AString filterString) \nnsIClientAuthDialogs.idl \nvoid ChooseCertificate( nsIInterfaceRequestor ctx, wstring cn, wstring organization, wstring issuer, wstring certNickList, wstring certDetailsList, unsignedlong count, long selectedIndex, boolean canceled) \nnsITransfer.idl \nvoid init( nsIURI aSource, nsIURI aTarget, AString aDisplayName, nsIMIMEInfo aMIMEInfo, PRTime startTime, nsILocalFile aTempFile, nsICancelable aCancelable) \nnsIDOMDataContainerEvent.idl \nnsIVariant getData( DOMString key) \nvoid setData( DOMString key, nsIVariant data) \nnsIDOMXULDescriptionElement.idl \nattribute boolean disabled \nattribute boolean crop \nattribute DOMString value \nnsIIdentityInfo.idl \nACString getValidEVPolicyOid() \ninISearchProcess.idl \nattribute boolean holdResults \nvoid searchSync() \nvoid searchAsync( inISearchObserver aObserver) \nvoid searchStop() \nboolean searchStep() \nAString getStringResultAt( long aIndex) \nlong getIntResultAt( long aIndex) \nunsignedlong getUIntResultAt( long aIndex) \nnsIMIMEInfo.idl \nattribute AString description \nattribute nsIHandlerApp preferredApplicationHandler \nattribute nsHandlerInfoAction preferredAction \nattribute boolean alwaysAskBeforeHandling \nvoid launchWithURI( nsIURI aURI, nsIInterfaceRequestor aWindowContext) \nnsIExternalProtocolService.idl \nboolean externalProtocolHandlerExists( string aProtocolScheme) \nboolean isExposedProtocol( string aProtocolScheme) \nnsIHandlerInfo getProtocolHandlerInfo( ACString aProtocolScheme) \nnsIHandlerInfo getProtocolHandlerInfoFromOS( ACString aProtocolScheme, boolean aFound) \nvoid setProtocolHandlerDefaults( nsIHandlerInfo aHandlerInfo, boolean aOSHandlerExists) \nvoid loadUrl ( nsIURI aURL) \nvoid loadURI( nsIURI aURI, nsIInterfaceRequestor aWindowContext) \nAString getApplicationDescription( AUTF8String aScheme) \nnsIDOMCSSRule.idl \nattribute DOMString cssText \nnsIDOMCryptoDialogs.idl \nboolean ConfirmKeyEscrow( nsIX509Cert escrowAuthority) \nnsIScriptChannel.idl \nattribute unsignedlong executionPolicy \nattribute boolean executeAsync \nnsIRunnable.idl \nvoid run() \nnsIDOMSVGAnimatedBoolean.idl \nattribute boolean baseVal \nnsIDOMLSOutput.idl \nattribute nsISupports characterStream \nattribute nsIOutputStream byteStream \nattribute DOMString systemId \nattribute DOMString encoding \nnsIDOM3Text.idl \nnsIDOMText replaceWholeText( DOMString content)  \nnsIAuthPrompt2.idl \nnsIServiceManager.idl \nvoid getService( nsCIDRef aClass, nsIIDRef aIID, nsQIResult result) \nvoid getServiceByContractID( string aContractID, nsIIDRef aIID, nsQIResult result) \nboolean isServiceInstantiated( nsCIDRef aClass, nsIIDRef aIID) \nboolean isServiceInstantiatedByContractID( string aContractID, nsIIDRef aIID) \nnsIDOMNSHTMLOptionCollectn.idl \nattribute long selectedIndex \nvoid setOption( long index, nsIDOMHTMLOptionElement option) \nvoid add( nsIDOMHTMLOptionElement option, long index) \nvoid remove( long index) \nnsIDOMGeoPositionErrorCallback.idl \nvoid handleEvent( nsIDOMGeoPositionError positionError) \nnsIDOMEvent.idl \nvoid stopPropagation() \nvoid preventDefault() \nvoid initEvent( DOMString eventTypeArg, boolean canBubbleArg, boolean cancelableArg) \nmozISpellI18NManager.idl \nmozISpellI18NUtil getUtil( wstring language) \nnsIRDFPropagatableDataSource.idl \nattribute boolean propagateChanges \nnsIErrorService.idl \nvoid registerErrorStringBundle( short errorModule, string stringBundleURL) \nvoid unregisterErrorStringBundle( short errorModule) \nstring getErrorStringBundle( short errorModule) \nvoid registerErrorStringBundleKey( nsresult error, string stringBundleKey) \nvoid unregisterErrorStringBundleKey( nsresult error) \nstring getErrorStringBundleKey( nsresult error) \nnsIUrlClassifierUtils.idl \nACString getKeyForURI( nsIURI uri) \nnsIJARChannel.idl \nnsITooltipListener.idl \nvoid onShowTooltip( long aXCoords, long aYCoords, wstring aTipText) \nvoid onHideTooltip() \nnsrootidl.idl \nmozIStorageAggregateFunction.idl \nvoid onStep( mozIStorageValueArray aFunctionArguments) \nnsIVariant onFinal() \nmozIStorageStatement.idl \nmozIStorageStatement clone() \nAUTF8String getParameterName( unsignedlong aParamIndex) \nunsignedlong getParameterIndex( AUTF8String aName) \nAUTF8String getColumnName( unsignedlong aColumnIndex) \nunsignedlong getColumnIndex( AUTF8String aName) \nAUTF8String getColumnDecltype( unsignedlong aParamIndex) \nvoid reset() \nvoid execute() \nboolean executeStep() \nlong getTypeOfIndex( unsignedlong aIndex) \nnsIASN1Sequence.idl \nattribute nsIMutableArray ASN1Objects \nattribute boolean isValidContainer \nattribute boolean isExpanded \nnsIX509CertValidity.idl \nnsIRedirectResultListener.idl \nvoid onRedirectResult( PRBool proceeding) \nxpctest_out.idl \nvoid GetLong( long l) \nvoid SetLong( long l ) \nvoid GetShort( short s ) \nvoid SetShort( short s ) \nvoid SetChar( char c ) \nvoid GetChar( char c) \nvoid GetBoolean( boolean b ) \nvoid SetBoolean( boolean b ) \nvoid GetOctet( octet o ) \nvoid SetOctet( octet o ) \nvoid GetLongLong( long long ll ) \nvoid SetLongLong( long long ll ) \nvoid GetUnsignedShort( unsignedshort us ) \nvoid SetUnsignedShort( unsignedshort us ) \nvoid GetUnsignedLong( unsignedlong ul ) \nvoid SetUnsignedLong( unsignedlong ul ) \nvoid GetFloat( float f ) \nvoid SetFloat( float f ) \nvoid GetDouble( double d ) \nvoid SetDouble( double d ) \nvoid GetWchar( wchar wc ) \nvoid SetWchar ( wchar wc ) \nvoid GetPRBool( PRBool b ) \nvoid SetPRBool ( PRBool b ) \nvoid GetPRInt32( PRInt32 l ) \nvoid SetPRInt32( PRInt32 l ) \nvoid GetPRInt16( PRInt16 l ) \nvoid SetPRInt16( PRInt16 l ) \nvoid GetPRInt64( PRInt64 i ) \nvoid SetPRInt64( PRInt64 i ) \nvoid GetPRUint8 ( PRUint8 i ) \nvoid SetPRUint8( PRUint8 i ) \nvoid GetPRUint16( PRUint16 i ) \nvoid SetPRUint16( PRUint16 i ) \nvoid GetPRUint32( PRUint32 i ) \nvoid SetPRUint32( PRUint32 i ) \nvoid GetPRUint64( PRUint64 i ) \nvoid SetPRUint64( PRUint64 i ) \nvoid GetNsIDPtr( nsIDPtr p ) \nvoid SetNsIDPtr( nsIDPtr p ) \nvoid GetNsIIDPtr( nsIIDPtr p ) \nvoid SetNsIIDPtr( nsIIDPtr p ) \nvoid GetNsCIDPtr( nsCIDPtr p ) \nvoid SetNsCIDPtr( nsCIDPtr p ) \nvoid GetNsQIResult( nsQIResult r ) \nvoid SetNsQIResult( nsQIResult r ) \nvoid GetVoid() \nvoid SetVoid() \nnsIClipboardDragDropHooks.idl \nboolean allowStartDrag( nsIDOMEvent event) \nboolean allowDrop( nsIDOMEvent event, nsIDragSession session) \nboolean onCopyOrDrag( nsIDOMEvent aEvent, nsITransferable trans) \nboolean onPasteOrDrop( nsIDOMEvent event, nsITransferable trans) \nnsIDOMSVGPoint.idl \nattribute float x \nattribute float y \nnsIDOMSVGPoint matrixTransform( nsIDOMSVGMatrix matrix) \nnsICommandLineHandler.idl \nvoid handle( nsICommandLine aCommandLine) \nnsISMimeCert.idl \nvoid saveSMimeProfile() \nnsIGfxInfoDebug.idl \nvoid spoofVendorID( unsignedlong aVendorID) \nvoid spoofDeviceID( unsignedlong aDeviceID) \nvoid spoofDriverVersion( DOMString aDriverVersion) \nvoid spoofOSVersion( unsignedlong aVersion) \nnsIDOMCloseEvent.idl \nvoid initCloseEvent( DOMString aType, boolean aCanBubble, boolean aCancelable, boolean aWasClean) \nnsIDOMXULMenuListElement.idl \nattribute boolean editable \nattribute boolean open \nattribute DOMString crop \nattribute DOMString image \nnsIPrivateBrowsingService.idl \nattribute boolean privateBrowsingEnabled \nvoid removeDataFromDomain( AUTF8String aDomain) \nnsIFileURL.idl \nattribute nsIFile file \nnsIDOMNSDocumentStyle.idl \nattribute DOMString selectedStyleSheetSet \nvoid enableStyleSheetsForSet( DOMString name) \nnsICookieService.idl \nstring getCookieString( nsIURI aURI, nsIChannel aChannel) \nstring getCookieStringFromHttp( nsIURI aURI, nsIURI aFirstURI, nsIChannel aChannel) \nvoid setCookieString( nsIURI aURI, nsIPrompt aPrompt, string aCookie, nsIChannel aChannel) \nvoid setCookieStringFromHttp( nsIURI aURI, nsIURI aFirstURI, nsIPrompt aPrompt, string aCookie, string aServerTime, nsIChannel aChannel) \nnsPIDNSService.idl \nvoid init() \nvoid shutdown() \nnsIWindowDataSource.idl \nnsIDOMWindowInternal getWindowForResource( string inResource) \nnsIContentSniffer.idl \nACString getMIMETypeFromContent( nsIRequest aRequest, octet aData, unsignedlong aLength) \nnsIFeedWriter.idl \nvoid init( nsIDOMWindow aWindow) \nvoid writeContent() \nvoid close() \nnsITransactionList.idl \nboolean itemIsBatch( long aIndex) \nnsITransaction getItem( long aIndex) \nlong getNumChildrenForItem( long aIndex) \nnsITransactionList getChildListForItem( long aIndex) \nmozIThirdPartyUtil.idl \nboolean isThirdPartyURI( nsIURI aFirstURI, nsIURI aSecondURI) \nboolean isThirdPartyWindow( nsIDOMWindow aWindow, nsIURI aURI) \nboolean isThirdPartyChannel( nsIChannel aChannel, nsIURI aURI) \nnsIDOMXPathEvaluator.idl \nnsIDOMXPathExpression createExpression( DOMString expression, nsIDOMXPathNSResolver resolver) \nnsIDOMXPathNSResolver createNSResolver( nsIDOMNode nodeResolver) \nnsISupports evaluate( DOMString expression, nsIDOMNode contextNode, nsIDOMXPathNSResolver resolver, unsignedshort type, nsISupports result) \nnsIController.idl \nboolean isCommandEnabled( string command) \nboolean supportsCommand( string command) \nvoid doCommand( string command) \nvoid onEvent( string eventName) \nnsIGenKeypairInfoDlg.idl \nvoid displayGeneratingKeypairInfo( nsIInterfaceRequestor ctx, nsIKeygenThread runnable) \nnsIDOMViewCSS.idl \nnsIDOMCSSStyleDeclaration getComputedStyle( nsIDOMElement elt, DOMString pseudoElt) \nnsIDOMHTMLFieldSetElement.idl \nattribute boolean disabled \nattribute DOMString name \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nnsIScriptEventHandler.idl \nboolean IsSameEvent( AString aObjectName, AString aEventName, unsignedlong aArgCount) \nvoid Invoke( nsISupports aTargetObject, voidPtr aArgs, unsignedlong aArgCount) \namIInstallTrigger.idl \nvoid onInstallEnded( AString aUrl, PRInt32 aStatus) \nnsIDOMDocumentEvent.idl \nnsIDOMEvent createEvent( DOMString eventType) \nnsIDOMNode.idl \nattribute DOMString nodeValue \nattribute DOMString prefix \nnsIDOMNode insertBefore( nsIDOMNode newChild, nsIDOMNode refChild) \nnsIDOMNode replaceChild( nsIDOMNode newChild, nsIDOMNode oldChild) \nnsIDOMNode removeChild( nsIDOMNode oldChild) \nnsIDOMNode appendChild( nsIDOMNode newChild) \nboolean hasChildNodes() \nnsIDOMNode cloneNode( boolean deep) \nvoid normalize() \nboolean isSupported( DOMString feature, DOMString version) \nboolean hasAttributes() \nmozIStorageBindingParamsArray.idl \nmozIStorageBindingParams newBindingParams() \nvoid addParams( mozIStorageBindingParams aParameters) \nnsISelection.idl \nnsIDOMRange getRangeAt( long index) \nvoid collapse( nsIDOMNode parentNode, long offset) \nvoid extend( nsIDOMNode parentNode, long offset) \nvoid collapseToStart() \nvoid collapseToEnd() \nboolean containsNode( nsIDOMNode node, boolean partlyContained) \nvoid selectAllChildren( nsIDOMNode parentNode) \nvoid addRange( nsIDOMRange range) \nvoid removeRange( nsIDOMRange range) \nvoid removeAllRanges() \nvoid deleteFromDocument() \nvoid selectionLanguageChange( boolean langRTL) \nwstring toString() \nnsIAsyncOutputStream.idl \nvoid closeWithStatus( nsresult reason) \nvoid asyncWait( nsIOutputStreamCallback aCallback, unsignedlong aFlags, unsignedlong aRequestedCount, nsIEventTarget aEventTarget) \nnsIApplicationCacheContainer.idl \nattribute nsIApplicationCache applicationCache \nnsIIOUtil.idl \nboolean inputStreamIsBuffered( nsIInputStream aStream) \nboolean putStreamIsBuffered( nsIOutputStream aStream) \nmozIPlacesAutoComplete.idl \nvoid registerOpenPage( nsIURI aURI) \nvoid unregisterOpenPage( nsIURI aURI) \nnsIWebBrowser.idl \nattribute nsIWebBrowserChrome containerWindow \nattribute nsIURIContentListener parentURIContentListener \nattribute boolean isActive \nvoid addWebBrowserListener( nsIWeakReference aListener, nsIIDRef aIID) \nvoid removeWebBrowserListener( nsIWeakReference aListener, nsIIDRef aIID) \nnsIProxyInfo.idl \nattribute nsIProxyInfo failoverProxy \nnsIDOMStorage.idl \nDOMString key( unsignedlong index) \nDOMString getItem( DOMString key) \nvoid setItem( DOMString key, DOMString data) \nvoid removeItem( DOMString key) \nvoid clear() \nnsIWebBrowserSetup.idl \nvoid setProperty( unsignedlong aId, unsignedlong aValue) \nnsIRDFContainerUtils.idl \nboolean IsOrdinalProperty( nsIRDFResource aProperty) \nnsIRDFResource IndexToOrdinalResource( long aIndex) \nlong OrdinalResourceToIndex( nsIRDFResource aOrdinal) \nboolean IsContainer( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nboolean IsEmpty( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nboolean IsBag( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nboolean IsSeq( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nboolean IsAlt( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nnsIRDFContainer MakeBag( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nnsIRDFContainer MakeSeq( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nnsIRDFContainer MakeAlt( nsIRDFDataSource aDataSource, nsIRDFResource aResource) \nlong indexOf( nsIRDFDataSource aDataSource, nsIRDFResource aContainer, nsIRDFNode aElement) \nxpcjsid.idl \nboolean equals( nsIJSID other) \nvoid initialize( string idString) \nstring toString() \nnsIFeedContainer.idl \nattribute AString id \nattribute nsIWritablePropertyBag2 fields \nattribute nsIFeedTextConstruct title \nattribute nsIURI link \nattribute nsIArray links \nattribute nsIArray categories \nattribute nsIFeedTextConstruct rights \nattribute nsIArray authors \nattribute nsIArray contributors \nattribute AString updated \nvoid normalize() \nnsIDOMLSInput.idl \nattribute nsISupports characterStream \nattribute nsIInputStream byteStream \nattribute DOMString stringData \nattribute DOMString systemId \nattribute DOMString publicId \nattribute DOMString baseURI \nattribute DOMString encoding \nattribute boolean certifiedText \nnsIDOMXULControlElement.idl \nattribute boolean disabled \nattribute long tabIndex \nnsIDOMHTMLFormElement.idl \nattribute DOMString name \nattribute DOMString acceptCharset \nattribute DOMString action \nattribute DOMString autocomplete \nattribute DOMString enctype \nattribute DOMString method \nattribute boolean noValidate \nattribute DOMString target \nvoid submit() \nvoid reset() \nnsISecurityCheckedComponent.idl \nstring canCreateWrapper( nsIIDPtr iid) \nstring canCallMethod( nsIIDPtr iid, wstring methodName) \nstring canGetProperty( nsIIDPtr iid, wstring propertyName) \nstring canSetProperty( nsIIDPtr iid, wstring propertyName) \nnsIHTMLInlineTableEditor.idl \nattribute boolean inlineTableEditingEnabled \nvoid showInlineTableEditingUI( nsIDOMElement aCell) \nvoid hideInlineTableEditingUI() \nvoid doInlineTableEditingAction( nsIDOMElement aUIAnonymousElement) \nvoid refreshInlineTableEditingUI() \nnsILoadGroup.idl \nattribute nsIRequestObserver groupObserver \nattribute nsIRequest defaultLoadRequest \nattribute nsIInterfaceRequestor notificationCallbacks \nvoid addRequest( nsIRequest aRequest, nsISupports aContext) \nvoid removeRequest( nsIRequest aRequest, nsISupports aContext, nsresult aStatus) \nnsIDOMLSParserFilter.idl \nunsignedshort startElement( nsIDOMElement elementArg) \nunsignedshort acceptNode( nsIDOMNode nodeArg) \nnsIContextMenuListener.idl \nvoid onShowContextMenu( unsignedlong aContextFlags, nsIDOMEvent aEvent, nsIDOMNode aNode) \nnsIMenuBoxObject.idl \nattribute nsIDOMElement activeChild \nvoid openMenu( boolean openFlag) \nboolean handleKeyPress( nsIDOMKeyEvent keyEvent) \nnsITableEditor.idl \nvoid insertTableCell( long aNumber, boolean aAfter) \nvoid insertTableColumn( long aNumber, boolean aAfter) \nvoid insertTableRow( long aNumber, boolean aAfter) \nvoid deleteTable() \nvoid deleteTableCellContents() \nvoid deleteTableCell( long aNumber) \nvoid deleteTableColumn( long aNumber) \nvoid deleteTableRow( long aNumber) \nvoid selectTableCell() \nvoid selectBlockOfCells( nsIDOMElement aStartCell, nsIDOMElement aEndCell) \nvoid selectTableRow() \nvoid selectTableColumn() \nvoid selectTable() \nvoid selectAllTableCells() \nnsIDOMElement switchTableCellHeaderType( nsIDOMElement aSourceCell) \nvoid joinTableCells( boolean aMergeNonContiguousContents) \nvoid splitTableCell() \nvoid normalizeTable( nsIDOMElement aTable) \nvoid getCellIndexes( nsIDOMElement aCell, long aRowIndex, long aColIndex) \nvoid getTableSize( nsIDOMElement aTable, long aRowCount, long aColCount) \nnsIDOMElement getCellAt( nsIDOMElement aTable, long aRowIndex, long aColIndex) \nvoid getCellDataAt( nsIDOMElement aTable, long aRowIndex, long aColIndex, nsIDOMElement aCell, long aStartRowIndex, long aStartColIndex, long aRowSpan, long aColSpan, long aActualRowSpan, long aActualColSpan, boolean aIsSelected) \nnsIDOMNode getFirstRow( nsIDOMElement aTableElement) \nnsIDOMNode getNextRow( nsIDOMNode aTableElement) \nvoid setSelectionAfterTableEdit( nsIDOMElement aTable, long aRow, long aCol, long aDirection, boolean aSelected) \nnsIDOMElement getSelectedOrParentTableElement( AString aTagName, long aCount) \nPRUint32 getSelectedCellsType( nsIDOMElement aElement) \nnsIDOMElement getFirstSelectedCell( nsIDOMRange aRange) \nnsIDOMElement getFirstSelectedCellInTable( long aRowIndex, long aColIndex) \nnsIDOMElement getNextSelectedCell( nsIDOMRange aRange) \nnsIPrintProgressParams.idl \nattribute wstring docTitle \nattribute wstring docURL \nnsIChildChannel.idl \nvoid connectParent( PRUint32 id) \nvoid completeRedirectSetup( nsIStreamListener aListener, nsISupports aContext) \nnsISerializable.idl \nvoid read( nsIObjectInputStream aInputStream) \nvoid write( nsIObjectOutputStream aOutputStream) \nnsIHttpChannel.idl \nattribute ACString requestMethod \nattribute nsIURI referrer \nattribute boolean allowPipelining \nattribute unsignedlong redirectionLimit \nACString getRequestHeader( ACString aHeader) \nvoid setRequestHeader( ACString aHeader, ACString aValue, boolean aMerge) \nvoid visitRequestHeaders( nsIHttpHeaderVisitor aVisitor) \nACString getResponseHeader( ACString header) \nvoid setResponseHeader( ACString header, ACString value, boolean merge) \nvoid visitResponseHeaders( nsIHttpHeaderVisitor aVisitor) \nboolean isNoStoreResponse() \nboolean isNoCacheResponse() \nnsINativeUConvService.idl \nnsISupports getNativeConverter( string from, string to) \nnsIRedirectChannelRegistrar.idl \nPRUint32 registerChannel( nsIChannel channel) \nnsIChannel linkChannels( PRUint32 id, nsIParentChannel channel) \nnsIChannel getRegisteredChannel( PRUint32 id) \nnsIParentChannel getParentChannel( PRUint32 id) \nvoid deregisterChannels( PRUint32 id) \nnsIRandomGenerator.idl \nvoid generateRandomBytes( unsignedlong aLength, octet aBuffer) \nnsIUnicharOutputStream.idl \nboolean write( unsignedlong aCount, PRUnichar c) \nboolean writeString( AString str) \nvoid flush() \nvoid close() \nnsIDNSRequest.idl \nvoid cancel() \nnsILayoutRegressionTester.idl \nlong dumpFrameModel( nsIDOMWindow aWindowToDump, nsILocalFile aFile, unsignedlong aFlagsMask) \nlong compareFrameModels( nsILocalFile aBaseFile, nsILocalFile aVerFile, unsignedlong aFlags) \nnsINSSErrorsService.idl \nboolean isNSSErrorCode( PRInt32 aNSPRCode) \nnsresult getXPCOMFromNSSError( PRInt32 aNSPRCode) \nAString getErrorMessage( nsresult aXPCOMErrorCode) \nPRUint32 getErrorClass( nsresult aXPCOMErrorCode) \nnsIFIXptr.idl \nnsIDOMRange evaluate( nsIDOMDocument aDocument, DOMString aExpression) \nnsIEditorObserver.idl \nvoid EditAction() \nnsIDOMTreeWalker.idl \nattribute nsIDOMNode currentNode \nnsIDOMNode parentNode() \nnsIDOMNode firstChild() \nnsIDOMNode lastChild() \nnsIDOMNode previousSibling() \nnsIDOMNode nextSibling() \nnsIDOMNode previousNode() \nnsIDOMNode nextNode() \nnsIXULTemplateResult.idl \nAString getBindingFor( nsIAtom aVar) \nnsISupports getBindingObjectFor( nsIAtom aVar) \nvoid ruleMatched( nsISupports aQuery, nsIDOMNode aRuleNode) \nvoid hasBeenRemoved() \nnsISimpleStreamListener.idl \nvoid init( nsIOutputStream aSink, nsIRequestObserver aObserver) \ninIDOMUtils.idl \nnsISupportsArray getCSSStyleRules( nsIDOMElement aElement) \nunsignedlong getRuleLine( nsIDOMCSSStyleRule aRule) \nboolean isIgnorableWhitespace( nsIDOMCharacterData aDataNode) \nnsIDOMNode getParentForNode( nsIDOMNode aNode, boolean aShowingAnonymousContent) \nnsIArray getBindingURLs( nsIDOMElement aElement) \nunsignedlong long getContentState( nsIDOMElement aElement) \nvoid setContentState( nsIDOMElement aElement, unsignedlong long aState) \nnsIStreamLoader.idl \nvoid onStreamComplete( nsIStreamLoader loader, nsISupports ctxt, nsresult status, unsignedlong resultLength, octet result) \nnsIScriptLoaderObserver.idl \nvoid scriptAvailable( nsresult aResult, nsIScriptElement aElement, boolean aIsInline, nsIURI aURI, PRInt32 aLineNo) \nvoid scriptEvaluated( nsresult aResult, nsIScriptElement aElement, boolean aIsInline) \nnsIDOMSVGPathSegList.idl \nvoid clear() \nnsIDOMSVGPathSeg initialize( nsIDOMSVGPathSeg newItem ) \nnsIDOMSVGPathSeg getItem( unsignedlong index) \nnsIDOMSVGPathSeg insertItemBefore( nsIDOMSVGPathSeg newItem, unsignedlong index) \nnsIDOMSVGPathSeg replaceItem( nsIDOMSVGPathSeg newItem, unsignedlong index) \nnsIDOMSVGPathSeg removeItem( unsignedlong index) \nnsIDOMSVGPathSeg appendItem( nsIDOMSVGPathSeg newItem) \nnsIDocShellTreeItem.idl \nattribute wstring name \nattribute long itemType \nboolean nameEquals( wstring name) \nnsIDocShellTreeItem findItemWithName( wstring name, nsISupports aRequestor, nsIDocShellTreeItem aOriginalRequestor) \nvoid setTreeOwner( nsIDocShellTreeOwner treeOwner) \nnsIJSContextStack.idl \nJSContext peek() \nJSContext pop() \nvoid push( JSContext cx) \nxpctest_inout.idl \nvoid EchoLong( long li, long lo) \nvoid EchoShort( short si, short so ) \nvoid EchoChar( char ci, char co ) \nvoid EchoBoolean( boolean bi, boolean bo ) \nvoid EchoOctet( octet oi, octet oo ) \nvoid EchoLongLong( long long lli, long long llo ) \nvoid EchoUnsignedShort( unsignedshort usi, unsignedshort uso ) \nvoid EchoUnsignedLong( unsignedlong uli, unsignedlong ulo) \nvoid EchoFloat( float fi, float fo) \nvoid EchoDouble( double di, double dout ) \nvoid EchoWchar ( wchar wci, wchar wco ) \nvoid EchoString( wstring wsi, wstring wso ) \nvoid EchoPRBool( PRBool bi, PRBool bo ) \nvoid EchoPRInt32( PRInt32 li, PRInt32 lo ) \nvoid EchoPRInt16( PRInt16 li, PRInt16 lo ) \nvoid EchoPRInt64( PRInt64 ii, PRInt64 io ) \nvoid EchoPRUint8( PRUint8 ii, PRUint8 io ) \nvoid EchoPRUint16( PRUint16 ii, PRUint16 io ) \nvoid EchoPRUint32( PRUint32 ii, PRUint32 io ) \nvoid EchoPRUint32_2( PRUint32 ii, PRUint32 io ) \nvoid EchoPRUint64( PRUint64 ii, PRUint64 io ) \nvoid EchoVoidPtr( voidPtr vsi, voidPtr vso ) \nvoid EchoCharPtr( charPtr csi, charPtr cso ) \nvoid EchoNsIDPtr( nsIDPtr pi, nsIDPtr po ) \nvoid EchoNsIIDPtr( nsIIDPtr pi, nsIIDPtr po ) \nvoid EchoNsCIDPtr( nsCIDPtr pi, nsCIDPtr po ) \nvoid EchoNsQIResult( nsQIResult ri, nsQIResult ro ) \nvoid EchoVoid() \nnsIGlobalHistory.idl \nvoid addPage( string aURL) \nboolean isVisited( string aURL) \nnsIJARURI.idl \nattribute AUTF8String JAREntry \nnsIJARURI cloneWithJARFile( nsIURI jarFile) \nimgITools.idl \nvoid decodeImageData( nsIInputStream aStream, ACString aMimeType, imgIContainer aContainer) \nnsIInputStream encodeImage( imgIContainer aContainer, ACString aMimeType) \nnsIInputStream encodeScaledImage( imgIContainer aContainer, ACString aMimeType, long aWidth, long aHeight) \nnsIWebContentHandlerRegistrar.idl \nvoid registerContentHandler( DOMString mimeType, DOMString uri, DOMString title, nsIDOMWindow contentWindow) \nvoid registerProtocolHandler( DOMString protocol, DOMString uri, DOMString title, nsIDOMWindow contentWindow) \nnsIDOMStorageManager.idl \nlong getUsage( AString aOwnerDomain) \nvoid clearOfflineApps() \nnsIDOMStorage getLocalStorageForPrincipal( nsIPrincipal aPrincipal, DOMString aDocumentURI) \nnsIDOMSVGLocatable.idl \nnsIDOMSVGRect getBBox() \nnsIDOMSVGMatrix getCTM() \nnsIDOMSVGMatrix getScreenCTM() \nnsIDOMSVGMatrix getTransformToElement( nsIDOMSVGElement element) \nnsIDOMHTMLDocument.idl \nattribute DOMString title \nattribute nsIDOMHTMLElement body \nattribute DOMString cookie \nvoid open() \nvoid close() \nvoid write( DOMString text) \nvoid writeln( DOMString text) \nnsIDOMNodeList getElementsByName( DOMString elementName) \nnsIDOMXULLabeledControlEl.idl \nattribute DOMString crop \nattribute DOMString image \nattribute DOMString label \nattribute DOMString accessKey \nattribute DOMString command \nnsITooltipTextProvider.idl \nboolean getNodeText( nsIDOMNode aNode, wstring aText) \nnsIDialogCreator.idl \nvoid openDialog( unsignedlong aType, ACString aName, ACString aFeatures, nsIDialogParamBlock aArguments, nsIDOMElement aFrameElement) \nnsIDOMMozTouchEvent.idl \nvoid initMozTouchEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, unsignedshort buttonArg, nsIDOMEventTarget relatedTargetArg, unsignedlong streamIdArg) \nnsISocketProvider.idl \nvoid newSocket( long aFamily, string aHost, long aPort, string aProxyHost, long aProxyPort, unsignedlong aFlags, PRFileDescStar aFileDesc, nsISupports aSecurityInfo) \nvoid addToSocket( long aFamily, string aHost, long aPort, string aProxyHost, long aProxyPort, unsignedlong aFlags, PRFileDescStar aFileDesc, nsISupports aSecurityInfo) \nnsISAXContentHandler.idl \nvoid startElement( AString uri, AString localName, AString qName, nsISAXAttributes attributes) \nvoid startDocument() \nvoid endDocument() \nvoid startElement( AString uri, AString localName, AString qName, nsISAXAttributes attributes) \nvoid endElement( AString uri, AString localName, AString qName) \nvoid characters( AString value) \nvoid processingInstruction( AString target, AString data) \nvoid ignorableWhitespace( AString whitespace) \nvoid startPrefixMapping( AString prefix, AString uri) \nvoid endPrefixMapping( AString prefix) \nnsIZipWriter.idl \nattribute ACString comment \nvoid open( nsIFile aFile, PRInt32 aIoFlags) \nnsIZipEntry getEntry( AUTF8String aZipEntry) \nboolean hasEntry( AUTF8String aZipEntry) \nvoid addEntryDirectory( AUTF8String aZipEntry, PRTime aModTime, boolean aQueue) \nvoid addEntryFile( AUTF8String aZipEntry, PRInt32 aCompression, nsIFile aFile, boolean aQueue) \nvoid addEntryChannel( AUTF8String aZipEntry, PRTime aModTime, PRInt32 aCompression, nsIChannel aChannel, boolean aQueue) \nvoid addEntryStream( AUTF8String aZipEntry, PRTime aModTime, PRInt32 aCompression, nsIInputStream aStream, boolean aQueue) \nvoid removeEntry( AUTF8String aZipEntry, boolean aQueue) \nvoid processQueue( nsIRequestObserver aObserver, nsISupports aContext) \nvoid close() \nnsIDOMLSResourceResolver.idl \nnsIDOMLSInput resolveResource( DOMString type, DOMString namespaceURI, DOMString publicId, DOMString systemId, DOMString baseURI) \nnsIPrintingPromptService.idl \nvoid showPrintDialog( nsIDOMWindow parent, nsIWebBrowserPrint webBrowserPrint, nsIPrintSettings printSettings) \nvoid showProgress( nsIDOMWindow parent, nsIWebBrowserPrint webBrowserPrint, nsIPrintSettings printSettings, nsIObserver openDialogObserver, boolean isForPrinting, nsIWebProgressListener webProgressListener, nsIPrintProgressParams printProgressParams, boolean notifyOnOpen) \nvoid showPageSetup( nsIDOMWindow parent, nsIPrintSettings printSettings, nsIObserver aObs) \nvoid showPrinterProperties( nsIDOMWindow parent, wstring printerName, nsIPrintSettings printSettings) \nrdfISerializer.idl \nvoid serialize( rdfIDataSource aDataSource, nsIOutputStream aOut) \nnsIDOM3DocumentEvent.idl \nnsIDOMEventGroup createEventGroup() \nnsIException.idl \nstring toString() \nnsIStandaloneNativeMenu.idl \nvoid init( nsIDOMElement aDOMElement) \nboolean menuWillOpen() \nvoid activateNativeMenuItemAt( AString anIndexString) \nvoid forceUpdateNativeMenuAt( AString anIndexString) \nnsIEditorMailSupport.idl \nvoid pasteAsQuotation( long aSelectionType) \nnsIDOMNode insertAsQuotation( AString aQuotedText) \nvoid insertTextWithQuotations( DOMString aStringToInsert) \nvoid pasteAsCitedQuotation( AString aCitation, long aSelectionType) \nnsIDOMNode insertAsCitedQuotation( AString aQuotedText, AString aCitation, boolean aInsertHTML) \nvoid rewrap( boolean aRespectNewlines) \nvoid stripCites() \nnsISupportsArray getEmbeddedObjects() \nnsIStreamListenerTee.idl \nvoid init( nsIStreamListener listener, nsIOutputStream sink, nsIRequestObserver requestObserver) \nvoid initAsync( nsIStreamListener listener, nsIEventTarget eventTarget, nsIOutputStream sink, nsIRequestObserver requestObserver) \nnsIGConfService.idl \nboolean getBool( AUTF8String key) \nAUTF8String getString( AUTF8String key) \nlong getInt( AUTF8String key) \nfloat getFloat( AUTF8String key) \nnsIArray getStringList( AUTF8String key) \nvoid setBool( AUTF8String key, boolean value) \nvoid setString( AUTF8String key, AUTF8String value) \nvoid setInt( AUTF8String key, long value) \nvoid setFloat( AUTF8String key, float value) \nAUTF8String getAppForProtocol( AUTF8String scheme, boolean enabled) \nboolean handlerRequiresTerminal( AUTF8String scheme) \nvoid setAppForProtocol( AUTF8String scheme, AUTF8String command) \nnsIDOMHTMLBaseElement.idl \nattribute DOMString href \nattribute DOMString target \nnsILocalFileOS2.idl \nnsIArray getFileTypes( ) \nvoid setFileTypes( ACString fileTypes ) \nPRBool isFileType( ACString fileType ) \nvoid setFileSource( AUTF8String aURI ) \nnsISupportsPriority.idl \nattribute long priority \nvoid adjustPriority( long delta) \nnsIExpatSink.idl \nvoid HandleStartElement( wstring aName, wstring aAtts, unsignedlong aAttsCount, long aIndex, unsignedlong aLineNumber) \nvoid HandleEndElement( wstring aName) \nvoid HandleComment( wstring aCommentText) \nvoid HandleCDataSection( wstring aData, unsignedlong aLength) \nvoid HandleDoctypeDecl( AString aSubset, AString aName, AString aSystemId, AString aPublicId, nsISupports aCatalogData) \nvoid HandleCharacterData( wstring aData, unsignedlong aLength) \nvoid HandleProcessingInstruction( wstring aTarget, wstring aData) \nvoid HandleXMLDeclaration( wstring aVersion, wstring aEncoding, long aStandalone) \nboolean ReportError( wstring aErrorText, wstring aSourceText, nsIScriptError aError) \nnsIRequestObserver.idl \nvoid onStartRequest( nsIRequest aRequest, nsISupports aContext) \nvoid onStopRequest( nsIRequest aRequest, nsISupports aContext, nsresult aStatusCode) \nnsIStandardURL.idl \nvoid init( unsignedlong aUrlType, long aDefaultPort, AUTF8String aSpec, string aOriginCharset, nsIURI aBaseURI) \nnsIWinAccessNode.idl \nnsIApplicationCacheService.idl \nnsIApplicationCache createApplicationCache( ACString group) \nnsIApplicationCache getApplicationCache( ACString clientID) \nnsIApplicationCache getActiveCache( ACString group) \nvoid deactivateGroup( ACString group) \nnsIApplicationCache chooseApplicationCache( ACString key) \nvoid cacheOpportunistically( nsIApplicationCache cache, ACString key) \nvoid getGroups( unsignedlong count, string groupIDs) \nnsIRemoteService.idl \nvoid startup( string appName, string profileName) \nvoid registerWindow( nsIDOMWindow aWindow) \nvoid shutdown() \nnsIDOMXULMultSelectCntrlEl.idl \nattribute DOMString selType \nattribute nsIDOMXULSelectControlItemElement currentItem \nattribute long currentIndex \nvoid addItemToSelection( nsIDOMXULSelectControlItemElement item) \nvoid removeItemFromSelection( nsIDOMXULSelectControlItemElement item) \nvoid toggleItemSelection( nsIDOMXULSelectControlItemElement item) \nvoid selectItem( nsIDOMXULSelectControlItemElement item) \nvoid selectItemRange( nsIDOMXULSelectControlItemElement startItem, nsIDOMXULSelectControlItemElement item) \nvoid selectAll() \nvoid invertSelection() \nvoid clearSelection() \nnsIDOMXULSelectControlItemElement getSelectedItem( long index) \nnsIFaviconService.idl \nvoid setFaviconUrlForPage( nsIURI aPageURI, nsIURI aFaviconURI) \nvoid setAndLoadFaviconForPage( nsIURI aPageURI, nsIURI aFaviconURI, boolean aForceReload, nsIFaviconDataCallback aCallback) \nvoid setFaviconData( nsIURI aFaviconURI, octet aData, unsignedlong aDataLen, AUTF8String aMimeType, PRTime aExpiration) \nvoid setFaviconDataFromDataURL( nsIURI aFaviconURI, AString aDataURL, PRTime aExpiration) \nvoid getFaviconData( nsIURI aFaviconURI, AUTF8String aMimeType, unsignedlong aDataLen, octet aData) \nAString getFaviconDataAsDataURL( nsIURI aFaviconURI) \nnsIURI getFaviconForPage( nsIURI aPageURI) \nnsIURI getFaviconImageForPage( nsIURI aPageURI) \nnsIURI getFaviconLinkForIcon( nsIURI aFaviconURI) \nvoid expireAllFavicons() \nvoid addFailedFavicon( nsIURI aFaviconURI) \nvoid removeFailedFavicon( nsIURI aFaviconURI) \nboolean isFailedFavicon( nsIURI aFaviconURI) \nnsIDOMSVGFilterElement.idl \nvoid setFilterRes( unsignedlong filterResX, unsignedlong filterResY) \nnsIDOMHistory.idl \nvoid back() \nvoid forward() \nvoid go( long aDelta) \nDOMString item( unsignedlong index) \nvoid pushState( nsIVariant aData, DOMString aTitle, DOMString aURL) \nvoid replaceState( nsIVariant aData, DOMString aTitle, DOMString aURL) \nnsIDOMDocument.idl \nnsIDOMElement createElement( DOMString tagName) \nnsIDOMDocumentFragment createDocumentFragment() \nnsIDOMText createTextNode( DOMString data) \nnsIDOMComment createComment( DOMString data) \nnsIDOMCDATASection createCDATASection( DOMString data) \nnsIDOMProcessingInstruction createProcessingInstruction( DOMString target, DOMString data) \nnsIDOMAttr createAttribute( DOMString name) \nnsIDOMEntityReference createEntityReference( DOMString name) \nnsIDOMNodeList getElementsByTagName( DOMString tagname) \nnsIDOMNode importNode( nsIDOMNode importedNode, boolean deep) \nnsIDOMElement createElementNS( DOMString namespaceURI, DOMString qualifiedName) \nnsIDOMAttr createAttributeNS( DOMString namespaceURI, DOMString qualifiedName) \nnsIDOMNodeList getElementsByTagNameNS( DOMString namespaceURI, DOMString localName) \nnsIDOMElement getElementById( DOMString elementId) \nnsIDOMToString.idl \nDOMString toString() \nnsIDOMHTMLHeadElement.idl \nattribute DOMString profile \nnsIFeedTextConstruct.idl \nattribute nsIURI base \nattribute AString lang \nattribute AString type \nattribute AString text \nAString plainText() \nnsIDOMDocumentFragment createDocumentFragment( nsIDOMElement element) \nnsICommandLineValidator.idl \nvoid validate( nsICommandLine aCommandLine) \nnsIFeedResult.idl \nattribute boolean bozo \nattribute nsIFeedContainer doc \nattribute nsIURI uri \nattribute AString version \nattribute nsIURI stylesheet \nattribute nsIProperties headers \nvoid registerExtensionPrefix( AString aNamespace, AString aPrefix) \nnsIDOMCommandEvent.idl \nvoid initCommandEvent( DOMString typeArg, boolean canBubbleArg, boolean canCancelArg, DOMString command) \nnsIPlugin.idl \nnsIDOMHTMLPreElement.idl \nattribute long width \nnsIDOMHTMLVideoElement.idl \nattribute long width \nattribute long height \nattribute DOMString poster \ninISearchObserver.idl \nvoid onSearchStart( inISearchProcess aModule) \nvoid onSearchResult( inISearchProcess aModule) \nvoid onSearchEnd( inISearchProcess aModule, short aResult) \nvoid onSearchError( inISearchProcess aModule, AString aMessage) \nnsIWindowMediator.idl \nnsIXULBrowserWindow.idl \nvoid setJSStatus( AString status) \nvoid setJSDefaultStatus( AString status) \nvoid setOverLink( AString link, nsIDOMElement element) \nAString onBeforeLinkTraversal( AString originalTarget, nsIURI linkURI, nsIDOMNode linkNode, PRBool isAppTab) \nnsIX509CertList.idl \nvoid addCert( nsIX509Cert cert) \nvoid deleteCert( nsIX509Cert cert) \nnsISimpleEnumerator getEnumerator() \nvoidPtr getRawCertList() \nnsIAuthPromptProvider.idl \nvoid getAuthPrompt( PRUint32 aPromptReason, nsIIDRef iid, nsQIResult result) \nnsIWebNavigation.idl \nattribute nsISHistory sessionHistory \nvoid goBack() \nvoid goForward() \nvoid gotoIndex( long index) \nvoid loadURI( wstring aURI, unsignedlong aLoadFlags, nsIURI aReferrer, nsIInputStream aPostData, nsIInputStream aHeaders) \nvoid reload( unsignedlong aReloadFlags) \nvoid stop( unsignedlong aStopFlags) \nnsIPrintSettingsService.idl \nvoid initPrintSettingsFromPrinter( wstring aPrinterName, nsIPrintSettings aPrintSettings) \nvoid initPrintSettingsFromPrefs( nsIPrintSettings aPrintSettings, boolean aUsePrinterNamePrefix, unsignedlong aFlags) \nvoid savePrintSettingsToPrefs( nsIPrintSettings aPrintSettings, boolean aUsePrinterNamePrefix, unsignedlong aFlags) \nnsIDOMNSXPathExpression.idl \nnsISupports evaluateWithContext( nsIDOMNode contextNode, unsignedlong contextPosition, unsignedlong contextSize, unsignedshort type, nsISupports result) \nmozISpellI18NUtil.idl \nvoid getRootForm( wstring word, PRUint32 type, wstring words, PRUint32 count) \nvoid fromRootForm( wstring word, wstring iwords, PRUint32 icount, wstring owords, PRUint32 ocount) \nvoid findNextWord( wstring word, PRUint32 length, PRUint32 offset, PRInt32 begin, PRInt32 end) \nnsIXSLTProcessorPrivate.idl \nattribute unsignedlong flags \nnsIDroppedLinkHandler.idl \nboolean canDropLink( nsIDOMDragEvent aEvent, PRBool aAllowSameDocument) \nAString dropLink( nsIDOMDragEvent aEvent, AString aName) \nxptiITestInterface.idl \nvoid testMethod( unsignedlong testArg) \nnsILayoutDebuggingTools.idl \nattribute boolean visualDebugging \nattribute boolean visualEventDebugging \nattribute boolean paintFlashing \nattribute boolean paintDumping \nattribute boolean invalidateDumping \nattribute boolean eventDumping \nattribute boolean motionEventDumping \nattribute boolean crossingEventDumping \nattribute boolean reflowCounts \nvoid init( nsIDOMWindow win) \nvoid newURILoaded() \nvoid dumpWebShells() \nvoid dumpContent() \nvoid dumpFrames() \nvoid dumpViews() \nvoid dumpStyleSheets() \nvoid dumpStyleContexts() \nvoid dumpReflowStats() \nnsIPluginDocument.idl \nvoid setStreamListener( nsIStreamListener aStreamListener) \nvoid print() \nnsIXULTemplateRuleFilter.idl \nboolean match( nsIXULTemplateResult aRef, nsIDOMNode aRule) \nnsIFTPChannel.idl \nattribute PRTime lastModifiedTime \nnsICrashReporter.idl \nattribute boolean enabled \nattribute nsIURL serverURL \nattribute nsILocalFile minidumpPath \nattribute boolean submitReports \nvoid annotateCrashReport( ACString key, ACString data) \nvoid appendAppNotesToCrashReport( ACString data) \nvoid writeMinidumpForException( voidPtr aExceptionInfo) \nvoid appendObjCExceptionInfoToAppNotes( voidPtr aException) \nnsIKeyModule.idl \nvoid initKey( short aAlgorithm, voidPtr aKey) \nvoidPtr getKeyObj() \nshort getType() \nnsIProtocolHandler.idl \nnsIURI newURI( AUTF8String aSpec, string aOriginCharset, nsIURI aBaseURI) \nnsIChannel newChannel( nsIURI aURI) \nboolean allowPort( long port, string scheme) \nnsIDOMHTMLLegendElement.idl \nattribute DOMString accessKey \nattribute DOMString align \nnsIDOMHTMLOptionElement.idl \nattribute boolean disabled \nattribute DOMString label \nattribute boolean defaultSelected \nattribute boolean selected \nattribute DOMString value \nattribute DOMString text \nnsIFileStreams.idl \nvoid init( nsIFile file, long ioFlags, long perm, long behaviorFlags) \nnsIDOMProcessingInstruction.idl \nattribute DOMString data \nnsIWindowMediatorListener.idl \nvoid onWindowTitleChange( nsIXULWindow window, wstring newTitle) \nvoid onOpenWindow( nsIXULWindow window) \nvoid onCloseWindow( nsIXULWindow window) \nnsIFeedResultService.idl \nattribute boolean forcePreviewPage \nvoid addToClientReader( AUTF8String uri, AString title, AString subtitle, unsignedlong feedType) \nvoid addFeedResult( nsIFeedResult feedResult) \nnsIFeedResult getFeedResult( nsIURI uri) \nvoid removeFeedResult( nsIURI uri) \ntxINodeSet.idl \nnsIDOMNode item( unsignedlong index) \ndouble itemAsNumber( unsignedlong index) \nDOMString itemAsString( unsignedlong index) \nvoid add( nsIDOMNode node) \nnsITreeBoxObject.idl \nattribute nsITreeView view \nattribute boolean focused \nlong getFirstVisibleRow() \nlong getLastVisibleRow() \nlong getPageLength() \nvoid ensureRowIsVisible( long index) \nvoid ensureCellIsVisible( long row, nsITreeColumn col) \nvoid scrollToRow( long index) \nvoid scrollByLines( long numLines) \nvoid scrollByPages( long numPages) \nvoid scrollToCell( long row, nsITreeColumn col) \nvoid scrollToColumn( nsITreeColumn col) \nvoid scrollToHorizontalPosition( long horizontalPosition) \nvoid invalidate() \nvoid invalidateColumn( nsITreeColumn col) \nvoid invalidateRow( long index) \nvoid invalidateCell( long row, nsITreeColumn col) \nvoid invalidateRange( long startIndex, long endIndex) \nvoid invalidateColumnRange( long startIndex, long endIndex, nsITreeColumn col) \nlong getRowAt( long x, long y) \nvoid getCellAt( long x, long y, long row, nsITreeColumn col, ACString childElt) \nvoid getCoordsForCellItem( long row, nsITreeColumn col, ACString element, long x, long y, long width, long height) \nboolean isCellCropped( long row, nsITreeColumn col) \nvoid rowCountChanged( long index, long count) \nvoid beginUpdateBatch() \nvoid endUpdateBatch() \nvoid clearStyleAndImageCaches() \nnsIBadCertListener2.idl \nboolean notifyCertProblem( nsIInterfaceRequestor socketInfo, nsISSLStatus status, AUTF8String targetSite) \nnsIWifiListener.idl \nvoid onChange( nsIWifiAccessPoint accessPoints, unsignedlong aLen) \nvoid onError( long error) \nnsIDOMHTMLTableRowElement.idl \nattribute DOMString align \nattribute DOMString bgColor \nattribute DOMString ch \nattribute DOMString chOff \nattribute DOMString vAlign \nnsIDOMHTMLElement insertCell( long index) \nvoid deleteCell( long index) \nnsIDOMMediaList.idl \nattribute DOMString mediaText \nDOMString item( unsignedlong index) \nvoid deleteMedium( DOMString oldMedium) \nvoid appendMedium( DOMString newMedium) \nnsITaskbarTabPreview.idl \nattribute DOMString title \nattribute imgIContainer icon \nvoid move( nsITaskbarTabPreview aNext) \nnativeWindow GetHWND() \nvoid EnsureRegistration() \nnsIJSRuntimeService.idl \nvoid registerGCCallback( JSGCCallback func) \nvoid unregisterGCCallback( JSGCCallback func) \nnsIStringEnumerator.idl \nboolean hasMore() \nAString getNext() \nnsIXULWindow.idl \nattribute boolean intrinsicallySized \nattribute unsignedlong zLevel \nattribute PRUint32 contextFlags \nattribute PRUint32 chromeFlags \nattribute nsIXULBrowserWindow XULBrowserWindow \nnsIDocShellTreeItem getContentShellById( wstring ID) \nvoid addChildWindow( nsIXULWindow aChild) \nvoid removeChildWindow( nsIXULWindow aChild) \nvoid center( nsIXULWindow aRelative, boolean aScreen, boolean aAlert) \nvoid showModal() \nvoid assumeChromeFlagsAreFrozen() \nnsIXULWindow createNewWindow( PRInt32 aChromeFlags, nsIAppShell aAppShell) \nvoid applyChromeFlags() \nnsIDownloadHistory.idl \nvoid addDownload( nsIURI aSource, nsIURI aReferrer, PRTime aStartTime) \nnsICapturePicker.idl \nattribute AString type \nvoid init( nsIDOMWindow parent, AString title, unsignedlong mode) \nunsignedlong show() \nboolean modeMayBeAvailable( unsignedlong mode) \nnsIClipboardCommands.idl \nboolean canCutSelection() \nboolean canCopySelection() \nboolean canCopyLinkLocation() \nboolean canCopyImageLocation() \nboolean canCopyImageContents() \nboolean canPaste() \nvoid cutSelection() \nvoid copySelection() \nvoid copyLinkLocation() \nvoid copyImageLocation() \nvoid copyImageContents() \nvoid paste() \nvoid selectAll() \nvoid selectNone() \nnsISignatureVerifier.idl \nnsIPrincipal verifySignature( string aSignature, unsignedlong aSignatureLen, string plaintext, unsignedlong plaintextLen, long errorCode) \nnsIFormSigningDialog.idl \nboolean confirmSignText( nsIInterfaceRequestor ctxt, AString host, AString signText, wstring certNickList, wstring certDetailsList, PRUint32 count, PRInt32 selectedIndex, AString password) \nnsIAccessNode.idl \nvoid scrollTo( unsignedlong aScrollType) \nvoid scrollToPoint( unsignedlong aCoordinateType, long aX, long aY) \nDOMString getComputedStyleValue( DOMString pseudoElt, DOMString propertyName) \nnsIDOMCSSPrimitiveValue getComputedStyleCSSValue( DOMString pseudoElt, DOMString propertyName) \nnsIWritablePropertyBag2.idl \nvoid setPropertyAsInt32 ( AString prop, PRInt32 value) \nvoid setPropertyAsUint32 ( AString prop, PRUint32 value) \nvoid setPropertyAsInt64 ( AString prop, PRInt64 value) \nvoid setPropertyAsUint64 ( AString prop, PRUint64 value) \nvoid setPropertyAsDouble ( AString prop, double value) \nvoid setPropertyAsAString ( AString prop, AString value) \nvoid setPropertyAsACString ( AString prop, ACString value) \nvoid setPropertyAsAUTF8String ( AString prop, AUTF8String value) \nvoid setPropertyAsBool ( AString prop, boolean value) \nvoid setPropertyAsInterface ( AString prop, nsISupports value) \nnsILineInputStream.idl \nboolean readLine( ACString aLine) \nnsIAutoCompleteInput.idl \nattribute boolean popupOpen \nattribute boolean disableAutoComplete \nattribute boolean completeDefaultIndex \nattribute boolean completeSelectedIndex \nattribute boolean forceComplete \nattribute unsignedlong minResultsForPopup \nattribute unsignedlong maxRows \nattribute boolean showCommentColumn \nattribute boolean showImageColumn \nattribute unsignedlong timeout \nattribute AString searchParam \nattribute AString textValue \nACString getSearchAt( unsignedlong index) \nvoid selectTextRange( long startIndex, long endIndex) \nvoid onSearchBegin() \nvoid onSearchComplete() \nboolean onTextEntered() \nboolean onTextReverted() \nnsIDOMSVGRect.idl \nattribute float x \nattribute float y \nattribute float width \nattribute float height \nnsIHandlerService.idl \nnsISimpleEnumerator enumerate() \nvoid fillHandlerInfo( nsIHandlerInfo aHandlerInfo, ACString aOverrideType) \nvoid store( nsIHandlerInfo aHandlerInfo) \nboolean exists( nsIHandlerInfo aHandlerInfo) \nvoid remove( nsIHandlerInfo aHandlerInfo) \nACString getTypeFromExtension( ACString aFileExtension) \nmozIStorageResultSet.idl \nmozIStorageRow getNextRow() \nnsIDOMCSSPrimitiveValue.idl \nvoid setFloatValue( unsignedshort unitType, float floatValue) \nfloat getFloatValue( unsignedshort unitType) \nvoid setStringValue( unsignedshort stringType, DOMString stringValue) \nDOMString getStringValue() \nnsIDOMCounter getCounterValue() \nnsIDOMRect getRectValue() \nnsIDOMRGBColor getRGBColorValue() \nnsIWebBrowserChrome2.idl \nvoid setStatusWithContext( unsignedlong statusType, AString statusText, nsISupports statusContext) \nnsIDOMDocumentTraversal.idl \nnsIDOMNodeIterator createNodeIterator( nsIDOMNode root, unsignedlong whatToShow, nsIDOMNodeFilter filter, boolean entityReferenceExpansion) \nnsIDOMTreeWalker createTreeWalker( nsIDOMNode root, unsignedlong whatToShow, nsIDOMNodeFilter filter, boolean entityReferenceExpansion) \nnsIAccessibleImage.idl \nvoid getImagePosition( unsignedlong coordType, long x, long y) \nvoid getImageSize( long width, long height) \nnsIScriptableDateFormat.idl \nnsIJXTestParams.idl \nvoid runTests( nsISupports tests) \nnsIRDFInMemoryDataSource.idl \nvoid EnsureFastContainment( nsIRDFResource aSource) \nnsIDOMHTMLAppletElement.idl \nattribute DOMString align \nattribute DOMString alt \nattribute DOMString archive \nattribute DOMString code \nattribute DOMString codeBase \nattribute DOMString height \nattribute long hspace \nattribute DOMString name \nattribute DOMString object \nattribute long vspace \nattribute DOMString width \nnsIDOMHTMLHtmlElement.idl \nattribute DOMString version \nnsISSLErrorListener.idl \nboolean notifySSLError( nsIInterfaceRequestor socketInfo, PRInt32 error, AUTF8String targetSite) \nnsIScreenManager.idl \nnsIScreen screenForRect ( long left, long top, long width, long height )  \nnsIScreen screenForNativeWidget ( voidPtr nativeWidget ) \nnsICancelable.idl \nvoid cancel( nsresult aReason) \nnsIThreadPool.idl \nvoid onThreadCreated() \nvoid onThreadShuttingDown() \nnsILoginManagerIEMigrationHelper.idl \nvoid migrateAndAddLogin( nsILoginInfo aLogin) \nnsIDocumentCharsetInfo.idl \nattribute nsIAtom forcedCharset \nattribute boolean forcedDetector \nattribute nsIAtom parentCharset \nattribute PRInt32 parentCharsetSource \nnsIDOMKeyEvent.idl \nvoid initKeyEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, unsignedlong keyCodeArg, unsignedlong charCodeArg) \nnsISocketProviderService.idl \nnsISocketProvider getSocketProvider( string socketType) \nnsIFastLoadFileControl.idl \nvoid startMuxedDocument( nsISupports aURI, string aURISpec) \nnsISupports selectMuxedDocument( nsISupports aURI) \nvoid endMuxedDocument( nsISupports aURI) \nboolean hasMuxedDocument( string aURISpec) \nnsIIDBIndex.idl \nget( nsIVariant key) \ngetKey( nsIVariant key) \ngetAll( nsIVariant key, unsignedlong limit) \ngetAllKeys( nsIVariant key, unsignedlong limit) \nopenCursor( nsIIDBKeyRange range, unsignedshort direction) \nopenKeyCursor( nsIIDBKeyRange range, unsignedshort direction) \nnsIDOMGlobalPropertyInitializer.idl \njsval init( nsIDOMWindow window) \nnsIURIChecker.idl \nvoid init( nsIURI aURI) \nvoid asyncCheck( nsIRequestObserver aObserver, nsISupports aContext) \nnsIAccessibleHyperLink.idl \nnsIURI getURI ( long index) \nnsIAccessible getAnchor ( long index) \nnsIStreamTransportService.idl \nnsITransport createInputTransport( nsIInputStream aStream, long long aStartOffset, long long aReadLimit, boolean aCloseWhenDone) \nnsITransport createOutputTransport( nsIOutputStream aStream, long long aStartOffset, long long aWriteLimit, boolean aCloseWhenDone) \nnsPISocketTransportService.idl \nattribute boolean autodialEnabled \nvoid init() \nvoid shutdown() \nnsIContentPermissionPrompt.idl \nvoid cancel() \nvoid allow() \nnsIDownload.idl \nmozIStorageVacuumParticipant.idl \nboolean onBeginVacuum() \nvoid onEndVacuum( boolean aSucceeded) \nnsIDOMSmartCardEvent.idl \nvoid Init( nsIDOMEvent event) \nnsIFindService.idl \nattribute AString searchString \nattribute AString replaceString \nattribute boolean findBackwards \nattribute boolean wrapFind \nattribute boolean entireWord \nattribute boolean matchCase \nnsISAXMutableAttributes.idl \nvoid setAttributes( nsISAXAttributes attributmp) \nvoid addAttribute( AString uri, AString localName, AString qName, AString type, AString value) \nvoid clear() \nvoid removeAttribute( unsignedlong index) \nvoid setAttributes( nsISAXAttributes attributes) \nvoid setAttribute( unsignedlong index, AString uri, AString localName, AString qName, AString type, AString value) \nvoid setLocalName( unsignedlong index, AString localName) \nvoid setQName( unsignedlong index, AString qName) \nvoid setType( unsignedlong index, AString type) \nvoid setURI( unsignedlong index, AString uri) \nvoid setValue( unsignedlong index, AString value) \nnsISocketTransport.idl \nattribute nsIInterfaceRequestor securityCallbacks \nattribute unsignedlong connectionFlags \nattribute octet QoSBits \nPRNetAddr getPeerAddr() \nPRNetAddr getSelfAddr() \nboolean isAlive() \nunsignedlong getTimeout( unsignedlong aType) \nvoid setTimeout( unsignedlong aType, unsignedlong aValue) \nnsIObserverService.idl \nvoid addObserver( nsIObserver anObserver, string aTopic, boolean ownsWeak) \nvoid removeObserver( nsIObserver anObserver, string aTopic ) \nvoid notifyObservers( nsISupports aSubject, string aTopic, wstring someData ) \nnsISimpleEnumerator enumerateObservers( string aTopic ) \nnsISHContainer.idl \nvoid AddChild( nsISHEntry child, long offset) \nvoid RemoveChild( nsISHEntry child) \nnsISHEntry GetChildAt( long index) \nnsIDOMNSMouseEvent.idl \nvoid initNSMouseEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, unsignedshort buttonArg, nsIDOMEventTarget relatedTargetArg, float pressure, unsignedshort inputSourceArg) \nnsIDOMSVGSwitchElement.idl \nnsPIWidgetCocoa.idl \nvoid SendSetZLevelEvent() \nnsCocoaWindow GetChildSheet( boolean aShown) \nnsIWidget GetRealParent() \nnsIContextMenuListener2.idl \nvoid onShowContextMenu( unsignedlong aContextFlags, nsIContextMenuInfo aUtils) \nnsIConsoleMessage.idl \nnsIPKCS11Module.idl \nnsIPKCS11Slot findSlotByName( wstring name) \nnsIEnumerator listSlots() \nnsICommandLine.idl \nattribute boolean preventDefault \nAString getArgument( long aIndex) \nlong findFlag( AString aFlag, boolean aCaseSensitive) \nvoid removeArguments( long aStart, long aEnd) \nboolean handleFlag( AString aFlag, boolean aCaseSensitive) \nAString handleFlagWithParam( AString aFlag, boolean aCaseSensitive) \nnsIFile resolveFile( AString aArgument) \nnsIURI resolveURI( AString aArgument) \nnsIStreamCipher.idl \nvoid init( nsIKeyObject aKey) \nvoid initWithIV( nsIKeyObject aKey, octet aIV, unsignedlong aIVLen) \nvoid update( octet aData, unsignedlong aLen) \nvoid updateFromStream( nsIInputStream aStream, long aLen) \nvoid updateFromString( ACString aInput) \nACString finish( PRBool aASCII) \nvoid discard( long aLen) \nnsILivemarkService.idl \nvoid start() \nvoid stopUpdateLivemarks() \nlong long createLivemark( long long folder, AString name, nsIURI siteURI, nsIURI feedURI, long index) \nlong long createLivemarkFolderOnly( long long folder, AString name, nsIURI siteURI, nsIURI feedURI, long index) \nboolean isLivemark( long long folder) \nlong long getLivemarkIdForFeedURI( nsIURI aFeedURI) \nnsIURI getSiteURI( long long container) \nvoid setSiteURI( long long container, nsIURI siteURI) \nnsIURI getFeedURI( long long container) \nvoid setFeedURI( long long container, nsIURI feedURI) \nvoid reloadAllLivemarks() \nvoid reloadLivemarkFolder( long long folderID) \nnsIDOMHTMLLabelElement.idl \nattribute DOMString htmlFor \nattribute DOMString accessKey \nnsGtkQtIconsConverter.idl \nlong convert( string icon) \nnsISecretDecoderRing.idl \nlong encrypt( buffer data, long dataLen, buffer result) \nlong decrypt( buffer data, long dataLen, buffer result) \nstring encryptString( string text) \nstring decryptString( string crypt) \nvoid changePassword() \nvoid logout() \nvoid logoutAndTeardown() \nnsIFeedElementBase.idl \nattribute nsISAXAttributes attributes \nattribute nsIURI baseURI \nnsIProfileUnlocker.idl \nvoid unlock( unsignedlong aSeverity) \nnsIPKCS11.idl \nvoid deleteModule( AString moduleName) \nvoid addModule( AString moduleName, AString libraryFullPath, long cryptoMechanismFlags, long cipherFlags) \nnsIDOMSVGStyleElement.idl \nattribute DOMString xmlspace \nattribute DOMString type \nattribute DOMString media \nattribute DOMString title \nnsIGIOService.idl \nvoid launch( AUTF8String uri) \nvoid setAsDefaultForMimeType( AUTF8String mimeType) \nvoid setAsDefaultForFileExtensions( AUTF8String extensions) \nnsIDOMNSRange.idl \nnsIDOMDocumentFragment createContextualFragment( DOMString fragment) \nboolean isPointInRange( nsIDOMNode parent, long offset) \nshort comparePoint( nsIDOMNode parent, long offset) \nnsIDOMClientRectList getClientRects() \nnsIDOMClientRect getBoundingClientRect() \nmozIPersonalDictionary.idl \nvoid load() \nvoid save() \nboolean check( wstring word, wstring lang) \nvoid addWord( wstring word, wstring lang) \nvoid removeWord( wstring word, wstring lang) \nvoid ignoreWord( wstring word) \nvoid endSession() \nvoid addCorrection( wstring word, wstring correction, wstring lang) \nvoid removeCorrection( wstring word, wstring correction, wstring lang) \nvoid getCorrection( wstring word, wstring words, PRUint32 count) \nnsIAnimationFrameListener.idl \nvoid onBeforePaint( DOMTimeStamp timeStamp) \nnsIIOService.idl \nattribute boolean offline \nnsIProtocolHandler getProtocolHandler( string aScheme) \nunsignedlong getProtocolFlags( string aScheme) \nnsIURI newURI( AUTF8String aSpec, string aOriginCharset, nsIURI aBaseURI) \nnsIURI newFileURI( nsIFile aFile) \nnsIChannel newChannelFromURI( nsIURI aURI) \nnsIChannel newChannel( AUTF8String aSpec, string aOriginCharset, nsIURI aBaseURI) \nboolean allowPort( long aPort, string aScheme) \nACString extractScheme( AUTF8String urlString) \nnsIHTMLEditor_MOZILLA_2_0_BRANCH.idl \nboolean breakIsVisible( nsIDOMNode aNode) \nnsISOCKSSocketInfo.idl \nattribute PRNetAddrPtr destinationAddr \nattribute PRNetAddrPtr externalProxyAddr \nattribute PRNetAddrPtr internalProxyAddr \nnsICertPickDialogs.idl \nvoid PickCertificate( nsIInterfaceRequestor ctx, wstring certNickList, wstring certDetailsList, unsignedlong count, long selectedIndex, boolean canceled) \nnsIExceptionService.idl \nnsIException getException( nsresult result, nsIException defaultException) \ninIFlasher.idl \nattribute DOMString color \nattribute boolean invert \nattribute unsignedshort thickness \nvoid drawElementOutline( nsIDOMElement aElement) \nvoid repaintElement( nsIDOMElement aElement) \nvoid scrollElementIntoView( nsIDOMElement aElement) \nnsIDOMDocumentRange.idl \nnsIDOMRange createRange() \nnsIDOMGeoPositionError.idl \nnsIDOMWindow.idl \nattribute DOMString name \nattribute float textZoom \nvoid scrollTo( long xScroll, long yScroll) \nvoid scrollBy( long xScrollDif, long yScrollDif) \nnsISelection getSelection() \nvoid scrollByLines( long numLines) \nvoid scrollByPages( long numPages) \nvoid sizeToContent() \nnsIPromptService.idl \nvoid alert( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText) \nvoid alertCheck( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, wstring aCheckMsg, boolean aCheckState) \nboolean confirm( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText) \nboolean confirmCheck( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, wstring aCheckMsg, boolean aCheckState) \nPRInt32 confirmEx( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, unsignedlong aButtonFlags, wstring aButton0Title, wstring aButton1Title, wstring aButton2Title, wstring aCheckMsg, boolean aCheckState) \nboolean prompt( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, wstring aValue, wstring aCheckMsg, boolean aCheckState) \nboolean promptUsernameAndPassword( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, wstring aUsername, wstring aPassword, wstring aCheckMsg, boolean aCheckState) \nboolean promptPassword( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, wstring aPassword, wstring aCheckMsg, boolean aCheckState) \nboolean select( nsIDOMWindow aParent, wstring aDialogTitle, wstring aText, PRUint32 aCount, wstring aSelectList, long aOutSelection) \nnsIDOMDOMImplementation.idl \nboolean hasFeature( DOMString feature, DOMString version) \nnsIDOMDocumentType createDocumentType( DOMString qualifiedName, DOMString publicId, DOMString systemId) \nnsIDOMDocument createDocument( DOMString namespaceURI, DOMString qualifiedName, nsIDOMDocumentType doctype) \nnsIDOMDocument createHTMLDocument( DOMString title) \nimgILoader.idl \nimgIRequest loadImage( nsIURI aURI, nsIURI aInitialDocumentURL, nsIURI aReferrerURI, nsILoadGroup aLoadGroup, imgIDecoderObserver aObserver, nsISupports aCX, nsLoadFlags aLoadFlags, nsISupports cacheKey, imgIRequest aRequest, nsIChannelPolicy channelPolicy) \nimgIRequest loadImageWithChannel( nsIChannel aChannel, imgIDecoderObserver aObserver, nsISupports cx, nsIStreamListener aListener) \nboolean supportImageWithMimeType( string mimeType) \nnsIPrintPreviewNavigation.idl \nboolean nextPage() \nboolean previousPage() \nboolean	goToPage( unsignedlong aPageNumber) \nboolean	skipPages( long aNumPages) \nnsISliderListener.idl \nvoid valueChanged( AString which, long newValue, boolean userChanged) \nvoid dragStateChanged( boolean isDragging) \nnsICipherInfo.idl \nnsIJXTestArrayParams.idl \nvoid multiplyEachItemInIntegerArray2( PRInt32 val, PRInt32 valueArray, PRUint32 count) \nvoid copyIntArray( PRInt32 srcArray, PRUint32 count, PRInt32 dstArray) \nvoid returnIntArray( PRInt32 srcArray, PRUint32 count, PRInt32 dstArray) \nvoid copyByteArray( octet srcArray, PRUint32 count, octet dstArray) \nvoid returnByteArray( octet srcArray, PRUint32 count, octet dstArray) \nvoid copySizedString( string srcString, PRUint32 count, string dstString) \nvoid returnSizedString( string srcString, PRUint32 count, string dstString) \nvoid copySizedWString( wstring srcString, PRUint32 count, wstring dstString) \nvoid returnSizedWString( wstring srcString, PRUint32 count, wstring dstString) \nnsICommandLineRunner.idl \nvoid init( long argc, nsCharPtrArray argv, nsIFile workingDir, unsignedlong state) \nvoid setWindowContext( nsIDOMWindow aWindow) \nvoid run() \nnsIDispatchSupport.idl \nnsIAccessibleRelation.idl \nnsIAccessible getTarget( unsignedlong index) \nnsIArray getTargets() \nnsITransport.idl \nnsIInputStream openInputStream( unsignedlong aFlags, unsignedlong aSegmentSize, unsignedlong aSegmentCount) \nnsIOutputStream openOutputStream( unsignedlong aFlags, unsignedlong aSegmentSize, unsignedlong aSegmentCount) \nvoid close( nsresult aReason) \nvoid setEventSink( nsITransportEventSink aSink, nsIEventTarget aEventTarget) \nnsIStreamBufferAccess.idl \ncharPtr getBuffer( PRUint32 aLength, PRUint32 aAlignMask) \nvoid putBuffer( charPtr aBuffer, PRUint32 aLength) \nvoid disableBuffering() \nvoid enableBuffering() \nnsIDOMModalContentWindow.idl \nattribute nsIVariant returnValue \nnsIDOMHTMLLIElement.idl \nattribute DOMString type \nattribute long value \nnsIEditorLogging.idl \nvoid startLogging( nsIFile aLogFile) \nvoid stopLogging() \nnsIDOMHTMLTextAreaElement.idl \nattribute DOMString defaultValue \nattribute DOMString accessKey \nattribute long cols \nattribute boolean disabled \nattribute DOMString name \nattribute boolean readOnly \nattribute long rows \nattribute long tabIndex \nattribute DOMString value \nvoid blur() \nvoid focus() \nvoid select() \nnsISecureBrowserUI.idl \nvoid init( nsIDOMWindow window) \nnsIEmbeddingSiteWindow2.idl \nvoid blur() \nnsIAutoCompletePopup.idl \nattribute long selectedIndex \nvoid openAutocompletePopup( nsIAutoCompleteInput input, nsIDOMElement element) \nvoid closePopup() \nvoid invalidate() \nvoid selectBy( boolean reverse, boolean page) \nnsIWebBrowserChromeFocus.idl \nvoid focusNextElement() \nvoid focusPrevElement() \nnsIPrintOptions.idl \nmozIJSSubScriptLoader.idl \nvoid loadSubScript ( wstring url) \nnsIDOMSVGAnimatedInteger.idl \nattribute long baseVal \nnsICookiePermission.idl \nvoid setAccess( nsIURI aURI, nsCookieAccess aAccess) \nnsCookieAccess canAccess( nsIURI aURI, nsIChannel aChannel) \nboolean canSetCookie( nsIURI aURI, nsIChannel aChannel, nsICookie2 aCookie, boolean aIsSession, PRInt64 aExpiry) \nnsIURI getOriginatingURI( nsIChannel aChannel) \nnsIDOMHTMLOptGroupElement.idl \nattribute boolean disabled \nattribute DOMString label \nnsIDOMHTMLTableCellElement.idl \nattribute DOMString abbr \nattribute DOMString align \nattribute DOMString axis \nattribute DOMString bgColor \nattribute DOMString ch \nattribute DOMString chOff \nattribute long colSpan \nattribute DOMString headers \nattribute DOMString height \nattribute boolean noWrap \nattribute long rowSpan \nattribute DOMString scope \nattribute DOMString vAlign \nattribute DOMString width \nnsIContentPolicy.idl \nshort shouldLoad( unsignedlong aContentType, nsIURI aContentLocation, nsIURI aRequestOrigin, nsISupports aContext, ACString aMimeTypeGuess, nsISupports aExtra) \nshort shouldProcess( unsignedlong aContentType, nsIURI aContentLocation, nsIURI aRequestOrigin, nsISupports aContext, ACString aMimeType, nsISupports aExtra) \nnsIURIFixup.idl \nnsIURI createExposableURI( nsIURI aURI) \nnsIURI createFixupURI( AUTF8String aURIText, unsignedlong aFixupFlags) \nnsIURI keywordToURI( AUTF8String aKeyword) \nnsIScriptableInputStream.idl \nvoid close() \nvoid init( nsIInputStream aInputStream) \nunsignedlong available() \nstring read( unsignedlong aCount) \nACString readBytes( unsignedlong aCount) \nnsIMemory.idl \nvoidPtr alloc( size_t size) \nvoidPtr realloc( voidPtr ptr, size_t newSize) \nvoid free( voidPtr ptr) \nvoid heapMinimize( boolean immediate) \nboolean isLowMemory() \nnsIStringStream.idl \nvoid setData( string data, long dataLen) \nvoid adoptData( charPtr data, long dataLen) \nvoid shareData( string data, long dataLen) \nnsIPrefBranch.idl \nlong getPrefType( string aPrefName) \nboolean getBoolPref( string aPrefName) \nvoid setBoolPref( string aPrefName, long aValue) \nstring getCharPref( string aPrefName) \nvoid setCharPref( string aPrefName, string aValue) \nlong getIntPref( string aPrefName) \nvoid setIntPref( string aPrefName, long aValue) \nvoid getComplexValue( string aPrefName, nsIIDRef aType, nsQIResult aValue) \nvoid setComplexValue( string aPrefName, nsIIDRef aType, nsISupports aValue) \nvoid clearUserPref( string aPrefName) \nvoid lockPref( string aPrefName) \nboolean prefHasUserValue( string aPrefName) \nboolean prefIsLocked( string aPrefName) \nvoid unlockPref( string aPrefName) \nvoid deleteBranch( string aStartingAt) \nvoid getChildList( string aStartingAt, unsignedlong aCount, string aChildArray) \nvoid resetBranch( string aStartingAt) \nnsIDOMElementTimeControl.idl \nvoid beginElement() \nvoid beginElementAt( float offset) \nvoid endElement() \nvoid endElementAt( float offset) \nnsITXTToHTMLConv.idl \nvoid setTitle( wstring text) \nvoid preFormatHTML( boolean value) \nnsIUrlClassifierStreamUpdater.idl \nattribute ACString updateUrl \nboolean downloadUpdates( ACString aRequestTables, ACString aRequestBody, ACString aClientKey, nsIUrlClassifierCallback aSuccessCallback, nsIUrlClassifierCallback aUpdateErrorCallback, nsIUrlClassifierCallback aDownloadErrorCallback) \nnsIKeygenThread.idl \nvoid startKeyGeneration( nsIObserver observer) \nvoid userCanceled( boolean threadAlreadyClosedDialog) \nnsIContentURIGrouper.idl \nAString group( nsIURI aURI) \nnsIDOMCSSCharsetRule.idl \nattribute DOMString encoding \nnsISidebar.idl \nvoid addPanel( wstring aTitle, string aContentURL, string aCustomizeURL) \nvoid addPersistentPanel( wstring aTitle, string aContentURL, string aCustomizeURL) \nvoid addSearchEngine( string engineURL, string iconURL, wstring suggestedTitle, wstring suggestedCategory) \nvoid addMicrosummaryGenerator( string generatorURL) \nnsILoadContext.idl \nboolean isAppOfType( unsignedlong appType) \nnsIFileProtocolHandler.idl \nnsIURI newFileURI( nsIFile aFile) \nAUTF8String getURLSpecFromFile( nsIFile file) \nAUTF8String getURLSpecFromActualFile( nsIFile file) \nAUTF8String getURLSpecFromDir( nsIFile file) \nnsIFile getFileFromURLSpec( AUTF8String url) \nnsIURI readURLFile( nsIFile file) \nnsIProfileMigrator.idl \nvoid doStartup() \nnsIProxyObjectManager.idl \nvoid getProxyForObject( nsIEventTarget target, nsIIDRef iid, nsISupports object, PRInt32 proxyType, nsQIResult result) \nnsIDOMSVGAnimatedLength.idl \nnsIPopupWindowManager.idl \nPRUint32 testPermission( nsIURI uri) \nnsIPropertyBag.idl \nnsIVariant getProperty( AString name) \nnsIVersionComparator.idl \nlong compare( ACString A, ACString B) \nnsIDOMHTMLTableElement.idl \nattribute nsIDOMHTMLTableCaptionElement caption \nattribute nsIDOMHTMLTableSectionElement tHead \nattribute nsIDOMHTMLTableSectionElement tFoot \nattribute DOMString align \nattribute DOMString bgColor \nattribute DOMString border \nattribute DOMString cellPadding \nattribute DOMString cellSpacing \nattribute DOMString frame \nattribute DOMString rules \nattribute DOMString summary \nattribute DOMString width \nnsIDOMHTMLElement createTHead() \nvoid deleteTHead() \nnsIDOMHTMLElement createTFoot() \nvoid deleteTFoot() \nnsIDOMHTMLElement createCaption() \nvoid deleteCaption() \nnsIDOMHTMLElement insertRow( long index) \nvoid deleteRow( long index) \nnsIOutputStream.idl \nnsIIDBVersionChangeRequest.idl \nattribute nsIDOMEventListener onblocked \nnsICertTree.idl \nnsIDOMGeoPositionCoords.idl \nnsIDOMFileList.idl \nnsIDOMFile item( unsignedlong index) \nnsICacheInfoChannel.idl \nattribute ACString cacheTokenCachedCharset \nboolean isFromCache() \nnsISessionStore.idl \nattribute boolean canRestoreLastSession \nvoid init( nsIDOMWindow aWindow) \nvoid restoreLastSession() \nAString getBrowserState() \nvoid setBrowserState( AString aState) \nAString getWindowState( nsIDOMWindow aWindow) \nvoid setWindowState( nsIDOMWindow aWindow, AString aState, boolean aOverwrite) \nAString getTabState( nsIDOMNode aTab) \nvoid setTabState( nsIDOMNode aTab, AString aState) \nnsIDOMNode duplicateTab( nsIDOMWindow aWindow, nsIDOMNode aTab, long aDelta) \nunsignedlong getClosedTabCount( nsIDOMWindow aWindow) \nAString getClosedTabData( nsIDOMWindow aWindow) \nnsIDOMNode undoCloseTab( nsIDOMWindow aWindow, unsignedlong aIndex) \nnsIDOMNode forgetClosedTab( nsIDOMWindow aWindow, unsignedlong aIndex) \nunsignedlong getClosedWindowCount() \nAString getClosedWindowData() \nnsIDOMWindow undoCloseWindow( unsignedlong aIndex) \nnsIDOMNode forgetClosedWindow( unsignedlong aIndex) \nAString getWindowValue( nsIDOMWindow aWindow, AString aKey) \nvoid setWindowValue( nsIDOMWindow aWindow, AString aKey, AString aStringValue) \nvoid deleteWindowValue( nsIDOMWindow aWindow, AString aKey) \nAString getTabValue( nsIDOMNode aTab, AString aKey) \nvoid setTabValue( nsIDOMNode aTab, AString aKey, AString aStringValue) \nvoid deleteTabValue( nsIDOMNode aTab, AString aKey) \nvoid persistTabAttribute( AString aName) \nnsIScriptError.idl \nvoid init( wstring message, wstring sourceName, wstring sourceLine, PRUint32 lineNumber, PRUint32 columnNumber, PRUint32 flags, string category) \nAUTF8String toString() \nnsIControllerCommandTable.idl \nvoid makeImmutable() \nvoid registerCommand( string aCommandName, nsIControllerCommand aCommand) \nvoid unregisterCommand( string aCommandName, nsIControllerCommand aCommand) \nnsIControllerCommand findCommandHandler( string aCommandName) \nboolean isCommandEnabled( string aCommandName, nsISupports aCommandRefCon) \nvoid updateCommandState( string aCommandName, nsISupports aCommandRefCon) \nboolean supportsCommand( string aCommandName, nsISupports aCommandRefCon) \nvoid doCommand( string aCommandName, nsISupports aCommandRefCon) \nvoid doCommandParams( string aCommandName, nsICommandParams aParam, nsISupports aCommandRefCon) \nvoid getCommandState( string aCommandName, nsICommandParams aParam, nsISupports aCommandRefCon) \nnsIDOMMouseEvent.idl \nvoid initMouseEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView viewArg, long detailArg, long screenXArg, long screenYArg, long clientXArg, long clientYArg, boolean ctrlKeyArg, boolean altKeyArg, boolean shiftKeyArg, boolean metaKeyArg, unsignedshort buttonArg, nsIDOMEventTarget relatedTargetArg) \nnsISyncJPAKE.idl \nvoid round1( ACString aSignerID, ACString aGX1, ACString aGV1, ACString aR1, ACString aGX2, ACString aGV2, ACString aR2) \nvoid round2( ACString aPeerID, ACString aPIN, ACString aGX3, ACString aGV3, ACString aR3, ACString aGX4, ACString aGV4, ACString aR4, ACString aA, ACString aGVA, ACString aRA) \nvoid final( ACString aB, ACString aGVB, ACString aRB, ACString aHkdfInfo, ACString aAES256Key, ACString aHMAC256Key) \nnsIDOMCSSValueList.idl \nnsIDOMCSSValue item( unsignedlong index) \nnsIDOMDOMStringList.idl \nDOMString item( unsignedlong index) \nboolean contains( DOMString str) \nnsIXPointer.idl \nnsIDOMRange item( unsignedlong index) \nnsIAutoCompleteResults.idl \nattribute AString value \nattribute wstring comment \nattribute string className \nattribute nsISupports param \nnsIPipe.idl \nvoid init( boolean nonBlockingInput, boolean nonBlockingOutput, unsignedlong segmentSize, unsignedlong segmentCount, nsIMemory segmentAllocator) \nnsIXSLTProcessor.idl \nvoid importStylesheet( nsIDOMNode style) \nnsIDOMDocumentFragment transformToFragment( nsIDOMNode source, nsIDOMDocument put) \nnsIDOMDocument transformToDocument( nsIDOMNode source) \nvoid setParameter( DOMString namespaceURI, DOMString localName, nsIVariant value) \nnsIVariant getParameter( DOMString namespaceURI, DOMString localName) \nvoid removeParameter( DOMString namespaceURI, DOMString localName) \nvoid clearParameters() \nvoid reset() \nnsIDOMDOMImplementationLS.idl \nnsIDOMLSParser createLSParser( unsignedshort mode, DOMString schemaType) \nnsIDOMLSSerializer createLSSerializer() \nnsIDOMLSInput createLSInput() \nnsIDOMLSOutput createLSOutput() \nnsIDOMHTMLIFrameElement.idl \nattribute DOMString align \nattribute DOMString frameBorder \nattribute DOMString height \nattribute DOMString longDesc \nattribute DOMString marginHeight \nattribute DOMString marginWidth \nattribute DOMString name \nattribute DOMString scrolling \nattribute DOMString src \nattribute DOMString width \nnsIDOMHTMLAnchorElement.idl \nattribute DOMString href \nattribute DOMString target \nattribute DOMString ping \nattribute DOMString rel \nattribute DOMString hreflang \nattribute DOMString type \nattribute DOMString text \nattribute DOMString protocol \nattribute DOMString host \nattribute DOMString hostname \nattribute DOMString port \nattribute DOMString pathname \nattribute DOMString search \nattribute DOMString hash \nattribute DOMString accessKey \nattribute DOMString charset \nattribute DOMString coords \nattribute DOMString name \nattribute DOMString rev \nattribute DOMString shape \nattribute long tabIndex \nDOMString toString() \nvoid blur() \nvoid focus() \nnsIDOMCharacterData.idl \nattribute DOMString data \nDOMString substringData( unsignedlong offset, unsignedlong count) \nvoid appendData( DOMString arg) \nvoid insertData( unsignedlong offset, DOMString arg) \nvoid deleteData( unsignedlong offset, unsignedlong count) \nvoid replaceData( unsignedlong offset, unsignedlong count, DOMString arg) \nimgICache.idl \nvoid clearCache( boolean chrome) \nvoid removeEntry( nsIURI uri) \nnsIProperties findEntryProperties( nsIURI uri) \nimgIContainer.idl \nDOMString lookupNamespaceURI( DOMString prefix) \nnsITransaction.idl \nvoid doTransaction() \nvoid undoTransaction() \nvoid redoTransaction() \nboolean merge( nsITransaction aTransaction) \nnsIDOMXULSelectCntrlEl.idl \nattribute nsIDOMXULSelectControlItemElement selectedItem \nattribute long selectedIndex \nattribute DOMString value \nnsIDOMXULSelectControlItemElement appendItem( DOMString label, DOMString value) \nnsIDOMXULSelectControlItemElement insertItemAt( long index, DOMString label, DOMString value) \nnsIDOMXULSelectControlItemElement removeItemAt( long index) \nlong getIndexOfItem( nsIDOMXULSelectControlItemElement item) \nnsIDOMXULSelectControlItemElement getItemAtIndex( long index) \nnsIDOMWindowInternal.idl \nattribute nsIDOMWindowInternal opener \nattribute DOMString status \nattribute DOMString defaultStatus \nattribute long innerWidth \nattribute long innerHeight \nattribute long erWidth \nattribute long erHeight \nattribute long screenX \nattribute long screenY \nattribute boolean fullScreen \nvoid alert( DOMString text) \nboolean confirm( DOMString text) \nDOMString prompt( DOMString aMessage, DOMString aInitial) \nvoid focus() \nvoid blur() \nvoid back() \nvoid forward() \nvoid home() \nvoid stop() \nvoid print() \nvoid moveTo( long xPos, long yPos) \nvoid moveBy( long xDif, long yDif) \nvoid resizeTo( long width, long height) \nvoid resizeBy( long widthDif, long heightDif) \nvoid scroll( long xScroll, long yScroll) \nnsIDOMWindow open( DOMString url, DOMString name, DOMString options) \nnsIDOMWindow openDialog( DOMString url, DOMString name, DOMString options, nsISupports aExtraArgument) \nvoid close() \nvoid updateCommands( DOMString action) \nboolean find( DOMString str, boolean caseSensitive, boolean backwards, boolean wrapAround, boolean wholeWord, boolean searchInFrames, boolean showDialog) \nDOMString atob( DOMString aAsciiString) \nDOMString btoa( DOMString aBase64Data) \nnsIVariant showModalDialog( DOMString aURI, nsIVariant aArgs, DOMString aOptions) \nvoid postMessage( DOMString message, DOMString targetOrigin) \nmozRequestAnimationFrame( nsIAnimationFrameListener aListener) \nnsIIDNService.idl \nACString convertUTF8toACE( AUTF8String input) \nAUTF8String convertACEtoUTF8( ACString input) \nboolean isACE( ACString input) \nAUTF8String normalize( AUTF8String input) \nAUTF8String convertToDisplayIDN( AUTF8String input, boolean isASCII) \nxpctest_attributes.idl \nstring getID() \nnsIDOM3Node.idl \nattribute DOMString textContent \nunsignedshort compareDocumentPosition( nsIDOMNode other) \nboolean isSameNode( nsIDOMNode other) \nDOMString lookupPrefix( DOMString namespaceURI) \nboolean isDefaultNamespace( DOMString namespaceURI) \nDOMString lookupNamespaceURI( DOMString prefix) \nboolean isEqualNode( nsIDOMNode arg) \nnsISupports getFeature( DOMString feature, DOMString version) \nnsIVariant setUserData( DOMString key, nsIVariant data, nsIDOMUserDataHandler handler) \nnsIVariant getUserData( DOMString key) \nnsIBoxObject.idl \nnsISupports getPropertyAsSupports( wstring propertyName) \nvoid setPropertyAsSupports( wstring propertyName, nsISupports value) \nwstring getProperty( wstring propertyName) \nvoid setProperty( wstring propertyName, wstring propertyValue) \nvoid removeProperty( wstring propertyName) \nnsIFile.idl \nattribute AString leafName \nattribute ACString nativeLeafName \nattribute unsignedlong permissions \nattribute unsignedlong permissionsOfLink \nattribute PRInt64 lastModifiedTime \nattribute PRInt64 lastModifiedTimeOfLink \nattribute PRInt64 fileSize \nvoid append( AString node) \nvoid appendNative( ACString node) \nvoid normalize() \nvoid create( unsignedlong type, unsignedlong permissions) \nvoid copyTo( nsIFile newParentDir, AString newName) \nvoid CopyToNative( nsIFile newParentDir, ACString newName) \nvoid copyToFollowingLinks( nsIFile newParentDir, AString newName) \nvoid copyToFollowingLinksNative( nsIFile newParentDir, ACString newName) \nvoid moveTo( nsIFile newParentDir, AString newName) \nvoid moveToNative( nsIFile newParentDir, ACString newName) \nvoid remove( boolean recursive) \nboolean exists() \nboolean isWritable() \nboolean isReadable() \nboolean isExecutable() \nboolean isHidden() \nboolean isDirectory() \nboolean isFile() \nboolean isSymlink() \nboolean isSpecial() \nvoid createUnique( unsignedlong type, unsignedlong permissions) \nnsIFile clone() \nboolean equals( nsIFile inFile) \nboolean contains( nsIFile inFile, boolean recur) \ninIDOMView.idl \nattribute nsIDOMNode rootNode \nattribute boolean showAnonymousContent \nattribute boolean showSubDocuments \nattribute boolean showWhitespaceNodes \nattribute boolean showAccessibleNodes \nattribute unsignedlong whatToShow \nnsIDOMNode getNodeFromRowIndex( long rowIndex) \nlong getRowIndexFromNode( nsIDOMNode node) \nvoid rebuild() \nnsIBinaryOutputStream.idl \nvoid setOutputStream( nsIOutputStream aOutputStream) \nvoid writeBoolean( PRBool aBoolean) \nvoid write8( PRUint8 aByte) \nvoid write16( PRUint16 a16) \nvoid write32( PRUint32 a32) \nvoid write64( PRUint64 a64) \nvoid writeFloat( float aFloat) \nvoid writeDouble( double aDouble) \nvoid writeStringZ( string aString) \nvoid writeWStringZ( wstring aString) \nvoid writeUtf8Z( wstring aString) \nvoid writeBytes( string aString, PRUint32 aLength) \nvoid writeByteArray( PRUint8 aBytes, PRUint32 aLength) \nnsITokenDialogs.idl \nvoid ChooseToken( nsIInterfaceRequestor ctx, wstring tokenNameList, unsignedlong count, wstring tokenName, boolean canceled) \nvoid displayProtectedAuth( nsIInterfaceRequestor ctx, nsIProtectedAuthThread runnable) \nnsIHttpEventSink.idl \nvoid onRedirect( nsIHttpChannel httpChannel, nsIChannel newChannel) \nnsIUnicharStreamListener.idl \nvoid onUnicharDataAvailable( nsIRequest aRequest, nsISupports aContext, AString aData) \nnsIDOMHTMLButtonElement.idl \nattribute boolean autofocus \nattribute boolean disabled \nattribute DOMString formAction \nattribute DOMString formEnctype \nattribute DOMString formMethod \nattribute boolean formNoValidate \nattribute DOMString formTarget \nattribute DOMString name \nattribute DOMString type \nattribute DOMString value \nattribute DOMString accessKey \nattribute long tabIndex \nvoid blur() \nvoid focus() \nvoid click() \nboolean checkValidity() \nvoid setCustomValidity( DOMString error) \nnsIDOMDOMErrorHandler.idl \nboolean handleError( nsIDOMDOMError error) \nnsIEditingSession.idl \nvoid makeWindowEditable( nsIDOMWindow window, string aEditorType, boolean doAfterUriLoad, boolean aMakeWholeDocumentEditable, boolean aInteractive) \nboolean windowIsEditable( nsIDOMWindow window) \nnsIEditor getEditorForWindow( nsIDOMWindow window) \nvoid setupEditorOnWindow( nsIDOMWindow window) \nvoid tearDownEditorOnWindow( nsIDOMWindow window) \nvoid setEditorOnControllers( nsIDOMWindow aWindow, nsIEditor aEditor) \nvoid disableJSAndPlugins( nsIDOMWindow aWindow) \nvoid restoreJSAndPlugins( nsIDOMWindow aWindow) \nvoid detachFromWindow( nsIDOMWindow aWindow) \nvoid reattachToWindow( nsIDOMWindow aWindow) \nnsIDOMNSHTMLElement.idl \nattribute DOMString innerHTML \nattribute boolean hidden \nattribute long tabIndex \nattribute DOMString contentEditable \nattribute boolean draggable \nattribute boolean spellcheck \nvoid blur() \nvoid focus() \nvoid scrollIntoView( boolean top) \nnsIDOMDataTransfer.idl \nattribute DOMString dropEffect \nattribute DOMString effectAllowed \nvoid clearData( DOMString format) \nvoid setData( DOMString format, DOMString data) \nDOMString getData( DOMString format) \nvoid setDragImage( nsIDOMElement image, long x, long y) \nvoid addElement( nsIDOMElement element) \nnsIHttpServer.idl \nvoid start( long port) \nvoid stop( nsIHttpServerStoppedCallback callback) \nvoid registerFile( string path, nsILocalFile file) \nvoid registerPathHandler( string path, nsIHttpRequestHandler handler) \nvoid registerErrorHandler( unsignedlong code, nsIHttpRequestHandler handler) \nvoid registerDirectory( string path, nsILocalFile dir) \nvoid registerContentType( string extension, string type) \nvoid setIndexHandler( nsIHttpRequestHandler handler) \nAString getState( AString path, AString key) \nvoid setState( AString path, AString key, AString value) \nAString getSharedState( AString key) \nvoid setSharedState( AString key, AString value) \nnsISupports getObjectState( AString key) \nvoid setObjectState( AString key, nsISupports value) \nnsIDOMXULCommandDispatcher.idl \nattribute nsIDOMElement focusedElement \nattribute nsIDOMWindow focusedWindow \nattribute boolean suppressFocusScroll \nvoid addCommandUpdater( nsIDOMElement updater, DOMString events, DOMString targets) \nvoid removeCommandUpdater( nsIDOMElement updater) \nvoid updateCommands( DOMString eventName) \nnsIController getControllerForCommand( string command) \nnsIControllers getControllers() \nvoid advanceFocus() \nvoid rewindFocus() \nvoid advanceFocusIntoSubtree( nsIDOMElement elt) \nnsIBrowserSearchService.idl \nnsIXPIInstallInfo.idl \nattribute triggerInfoPtr triggerInfo \nnsIDNSService.idl \nnsICancelable asyncResolve( AUTF8String aHostName, unsignedlong aFlags, nsIDNSListener aListener, nsIEventTarget aListenerTarget) \nnsIDNSRecord resolve( AUTF8String aHostName, unsignedlong aFlags) \nnsIDOMHTMLBodyElement.idl \nattribute DOMString aLink \nattribute DOMString background \nattribute DOMString bgColor \nattribute DOMString link \nattribute DOMString text \nattribute DOMString vLink \nnsIObjectOutputStream.idl \nvoid writeObject( nsISupports aObject, PRBool aIsStrongRef) \nvoid writeSingleRefObject( nsISupports aObject) \nvoid writeCompoundObject( nsISupports aObject, nsIIDRef aIID, PRBool aIsStrongRef) \nvoid writeID( nsIDRef aID) \ncharPtr getBuffer( PRUint32 aLength, PRUint32 aAlignMask) \nvoid putBuffer( charPtr aBuffer, PRUint32 aLength) \nnsIDOMHTMLDataListElement.idl \nnsIINIParser.idl \nnsIUTF8StringEnumerator getSections() \nnsIUTF8StringEnumerator getKeys( AUTF8String aSection) \nAUTF8String getString( AUTF8String aSection, AUTF8String aKey) \nnsIControllerCommand.idl \nboolean isCommandEnabled( string aCommandName, nsISupports aCommandContext) \nvoid getCommandStateParams( string aCommandName, nsICommandParams aParams, nsISupports aCommandContext) \nvoid doCommand( string aCommandName, nsISupports aCommandContext) \nvoid doCommandParams( string aCommandName, nsICommandParams aParams, nsISupports aCommandContext) \nnsILocaleService.idl \nnsILocale newLocale( AString aLocale) \nnsILocale getSystemLocale() \nnsILocale getApplicationLocale() \nnsILocale getLocaleFromAcceptLanguage( string acceptLanguage) \nAString getLocaleComponentForUserAgent() \nnsIAuthPromptCallback.idl \nvoid onAuthAvailable( nsISupports aContext, nsIAuthInformation aAuthInfo) \nvoid onAuthCancelled( nsISupports aContext, boolean userCancel) \nnsIWyciwygChannel.idl \nvoid writeToCacheEntry( AString aData) \nvoid closeCacheEntry( nsresult reason) \nvoid setSecurityInfo( nsISupports aSecurityInfo) \nvoid setCharsetAndSource( long aSource, ACString aCharset) \nACString getCharsetAndSource( long aSource) \nnsIGfxInfo.idl \nvoid getFailures( unsignedlong failureCount, string failures) \nvoid logFailure( ACString failure) \nlong getFeatureStatus( long aFeature) \nDOMString getFeatureSuggestedDriverVersion( long aFeature) \nDOMString getWebGLParameter( DOMString aParam) \nnsIDOMScrollAreaEvent.idl \nvoid initScrollAreaEvent( DOMString aEventType, boolean aCanBubble, boolean aCancelable, nsIDOMAbstractView aView, long aDetail, float x, float y, float width, float height) \nnsIDOMHTMLMetaElement.idl \nattribute DOMString content \nattribute DOMString httpEquiv \nattribute DOMString name \nattribute DOMString scheme \nnsIDirIndexListener.idl \nvoid onIndexAvailable( nsIRequest aRequest, nsISupports aCtxt, nsIDirIndex aIndex) \nvoid onInformationAvailable( nsIRequest aRequest, nsISupports aCtxt, AString aInfo) \nnsIWritablePropertyBag.idl \nvoid setProperty( AString name, nsIVariant value) \nvoid deleteProperty( AString name) \nnsIBlocklistService.idl \nboolean isAddonBlocklisted( AString id, AString version, AString appVersion, AString toolkitVersion) \nunsignedlong getAddonBlocklistState( AString id, AString version, AString appVersion, AString toolkitVersion) \nunsignedlong getPluginBlocklistState( nsIPluginTag plugin, AString appVersion, AString toolkitVersion) \nnsIDOMHTMLMapElement.idl \nattribute DOMString name \nnsIRDFPurgeableDataSource.idl \nboolean Mark( nsIRDFResource aSource, nsIRDFResource aProperty, nsIRDFNode aTarget, boolean aTruthValue) \nvoid Sweep() \nnsIHttpChannelChild.idl \nvoid addCookiesToRequest() \nnsIDOMHTMLUListElement.idl \nattribute boolean compact \nattribute DOMString type \nnsIAtom.idl \nnsCExternalHandlerService.idl \nnsIEffectiveTLDService.idl \nACString getPublicSuffix( nsIURI aURI) \nACString getBaseDomain( nsIURI aURI, PRUint32 aAdditionalParts) \nACString getPublicSuffixFromHost( AUTF8String aHost) \nACString getBaseDomainFromHost( AUTF8String aHost, PRUint32 aAdditionalParts) \nnsIDOMDocumentView.idl \nnsIPKCS11ModuleDB.idl \nnsISessionStartup.idl \nboolean doRestore() \nnsIDOMSVGScriptElement.idl \nattribute DOMString type \nnsITreeContentView.idl \nnsIDOMElement getItemAtIndex( long index) \nlong getIndexOfItem( nsIDOMElement item) \nnsIDOMNSHTMLFormElement.idl \nattribute DOMString encoding \nboolean checkValidity() \nnsIXPIDialogService.idl \nboolean confirmInstall( nsIDOMWindow parent, wstring packageList, unsignedlong count) \nvoid openProgressDialog( wstring packageList, unsignedlong count, nsIObserver observer) \nnsIDataSignatureVerifier.idl \nboolean verifyData( ACString aData, ACString aSignature, ACString aPublicKey) \nnsIDownloadManager.idl \nnsIDownload addDownload( short aDownloadType, nsIURI aSource, nsIURI aTarget, AString aDisplayName, nsIMIMEInfo aMIMEInfo, PRTime aStartTime, nsILocalFile aTempFile, nsICancelable aCancelable) \nnsIDownload getDownload( unsignedlong aID) \nvoid cancelDownload( unsignedlong aID) \nvoid removeDownload( unsignedlong aID) \nvoid removeDownloadsByTimeframe( long long aBeginTime, long long aEndTime) \nvoid pauseDownload( unsignedlong aID) \nvoid resumeDownload( unsignedlong aID) \nvoid retryDownload( unsignedlong aID) \nvoid cleanUp() \nvoid addListener( nsIDownloadProgressListener aListener) \nvoid removeListener( nsIDownloadProgressListener aListener) \nnsIServerSocket.idl \nvoid init( long aPort, boolean aLoopbackOnly, long aBackLog) \nvoid initWithAddress( PRNetAddrPtr aAddr, long aBackLog) \nvoid close() \nvoid asyncListen( nsIServerSocketListener aListener) \nPRNetAddr getAddress() \nnsIPrefetchService.idl \nvoid prefetchURI( nsIURI aURI, nsIURI aReferrerURI, nsIDOMNode aSource, boolean aExplicit) \nvoid prefetchURIForOfflineUse( nsIURI aURI, nsIURI aReferrerURI, nsIDOMNode aSource, boolean aExplicit) \nnsISimpleEnumerator enumerateQueue( boolean aIncludeNormalItems, boolean aIncludeOfflineItems) \nnsIDOMMutationEvent.idl \nvoid initMutationEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMNode relatedNodeArg, DOMString prevValueArg, DOMString newValueArg, DOMString attrNameArg, unsignedshort attrChangeArg) \nISimpleDOMNode.idl \nHRESULT nodeInfo( BSTR nodeName, short nameSpaceID, BSTR nodeValue, unsigned int numChildren, unsigned int uniqueID, unsignedshort nodeType) \nHRESULT attributes( unsignedshort maxAttribs, BSTR attribNames, short nameSpaceID, BSTR attribValues, unsignedshort numAttribs) \nHRESULT attributesForNames( unsignedshort numAttribs, BSTR attribNames, short nameSpaceID, BSTR attribValues) \nHRESULT computedStyle( unsignedshort maxStyleProperties, boolean useAlternateView, BSTR styleProperties, BSTR styleValues, unsignedshort numStyleProperties) \nHRESULT computedStyleForProperties( unsignedshort numStyleProperties, boolean useAlternateView, BSTR styleProperties, BSTR styleValues) \nHRESULT scrollTo( boolean placeTopLeft) \nHRESULT childAt( unsigned childIndex,ISimpleDOMNode node) \nxpcsample1.idl \nattribute PRInt32 someValue \nnsIDOMLSSerializerFilter.idl \nnsIDOMSVGLength.idl \nattribute float value \nattribute float valueInSpecifiedUnits \nattribute DOMString valueAsString \nvoid newValueSpecifiedUnits( unsignedshort unitType, float valueInSpecifiedUnits) \nvoid convertToSpecifiedUnits( unsignedshort unitType) \nnsIDOMWindowCollection.idl \nnsIDOMWindow item( unsignedlong index) \nnsIDOMWindow namedItem( DOMString name) \nnsIAsyncStreamCopier.idl \nvoid init( nsIInputStream aSource, nsIOutputStream aSink, nsIEventTarget aTarget, boolean aSourceBuffered, boolean aSinkBuffered, unsignedlong aChunkSize, boolean aCloseSource, boolean aCloseSink) \nvoid asyncCopy( nsIRequestObserver aObserver, nsISupports aObserverContext) \nnsIBrowserDOMWindow.idl \nnsIDOMWindow openURI( nsIURI aURI, nsIDOMWindow aOpener, short aWhere, short aContext) \nnsIFrameLoaderOwner openURIInFrame( nsIURI aURI, nsIDOMWindow aOpener, short aWhere, short aContext) \nboolean isTabContentWindow( nsIDOMWindow aWindow) \nnsIDOMNSEventTarget.idl \nattribute PRUint32 scriptTypeID \nvoid addEventListener( DOMString type, nsIDOMEventListener listener, boolean useCapture, boolean wantsUntrusted) \ninICSSValueSearch.idl \nattribute nsIDOMDocument document \nattribute wstring baseURL \nattribute boolean returnRelativeURLs \nattribute boolean normalizeChromeURLs \nattribute wstring textCriteria \nvoid addPropertyCriteria( wstring aPropName) \nnsIPrintSettings.idl \nnsIDOMHTMLTableCaptionElem.idl \nattribute DOMString align \nnsIDOMGetSVGDocument.idl \nnsIDOMDocument getSVGDocument( ) \nnsIMutable.idl \nattribute boolean mutable \nnsIDOMText.idl \nnsIDOMText splitText( unsignedlong offset) \nnsIDOMPaintRequestList.idl \nnsIDOMPaintRequest item( unsignedlong index) \nnsIStrictTransportSecurityService.idl \nvoid processStsHeader( nsIURI aSourceURI, string aHeader) \nvoid removeStsState( nsIURI aURI) \nPRBool shouldIgnoreStsHeader( nsISupports aSecurityInfo) \nPRBool isStsHost( string aHost) \nPRBool isStsURI( nsIURI aURI) \nnsILocalFileWin.idl \nattribute unsignedlong fileAttributesWin \nAString getVersionInfoField( string aField) \nnsIDOMCSSStyleDeclaration.idl \nattribute DOMString cssText \nDOMString getPropertyValue( DOMString propertyName) \nnsIDOMCSSValue getPropertyCSSValue( DOMString propertyName) \nDOMString removeProperty( DOMString propertyName) \nDOMString getPropertyPriority( DOMString propertyName) \nvoid setProperty( DOMString propertyName, DOMString value, DOMString priority) \nDOMString item( unsignedlong index) \nAccessibleTable2.idl \nHRESULT cellAt ( long row, long column, IUnknown cell) \nHRESULT caption ( IUnknown accessible) \nHRESULT columnDescription ( long column, BSTR description) \nHRESULT nColumns ( long columnCount) \nHRESULT nRows ( long rowCount) \nHRESULT nSelectedCells ( long cellCount) \nHRESULT nSelectedColumns ( long columnCount) \nHRESULT nSelectedRows ( long rowCount) \nHRESULT rowDescription ( long row, BSTR description) \nHRESULT selectedCells ( IUnknown cells, long nSelectedCells) \nHRESULT selectedColumns ( long selectedColumns, long nColumns) \nHRESULT selectedRows ( long selectedRows, long nRows) \nHRESULT summary ( IUnknown accessible) \nHRESULT isColumnSelected ( long column, boolean isSelected) \nHRESULT isRowSelected ( long row, boolean isSelected) \nHRESULT selectRow ( long row) \nHRESULT selectColumn ( long column) \nHRESULT unselectRow ( long row) \nHRESULT unselectColumn ( long column) \nHRESULT modelChange ( IA2TableModelChange modelChange) \nnsIDOMOrientationEvent.idl \nvoid initOrientationEvent( DOMString eventTypeArg, boolean canBubbleArg, boolean cancelableArg, double x, double y, double z) \nnsIDOMCSSStyleRule.idl \nattribute DOMString selectorText \nnsIXULRuntime.idl \nattribute boolean logConsoleErrors \nvoid invalidateCachesOnRestart() \nvoid ensureContentProcess() \nnsIPrefLocalizedString.idl \nattribute wstring data \nwstring toString() \nvoid setDataWithLength( unsignedlong length, wstring data) \nAccessibleTableCell.idl \nHRESULT columnExtent ( long nColumnsSpanned) \nHRESULT columnHeaderCells( IUnknown cellAccessibles,long nColumnHeaderCells) \nHRESULT columnIndex ( long columnIndex) \nHRESULT rowExtent ( long nRowsSpanned) \nHRESULT rowHeaderCells ( IUnknown cellAccessibles,long nRowHeaderCells) \nHRESULT rowIndex ( long rowIndex) \nHRESULT isSelected ( boolean isSelected) \nHRESULT rowColumnExtents ( long row,long column,long rowExtents,long columnExtents,boolean isSelected) \nHRESULT table ( IUnknown table) \nxpctest_multiple.idl \nattribute string ParentOneAttribute \nstring ParentOneMethod() \nnsIX509CertDB2.idl \nvoid addCertFromBase64( string base64, string aTrust, string aName) \nnsIX509CertList getCerts() \nnsIDOMXPathResult.idl \nnsIDOMNode iterateNext() \nnsIDOMNode snapshotItem( unsignedlong index) \nnsIDOMSVGAltGlyphElement.idl \nattribute DOMString glyphRef \nattribute DOMString format \nnsIFormHistory.idl \nvoid addEntry( AString name, AString value) \nvoid removeEntry( AString name, AString value) \nvoid removeEntriesForName( AString name) \nvoid removeAllEntries() \nboolean nameExists( AString name) \nboolean entryExists( AString name, AString value) \nvoid removeEntriesByTimeframe( long long aBeginTime, long long aEndTime) \nnsIControllerContext.idl \nvoid init( nsIControllerCommandTable aCommandTable) \nvoid setCommandContext( nsISupports aCommandContext) \nnsIUnicharStreamLoader.idl \nACString onDetermineCharset( nsIUnicharStreamLoader aLoader, nsISupports aContext, string aFirstSegment, unsignedlong aLength) \nvoid onStreamComplete( nsIUnicharStreamLoader aLoader, nsISupports aContext, nsresult aStatus, nsIUnicharInputStream aUnicharData) \nmozIStorageValueArray.idl \nlong getTypeOfIndex( unsignedlong aIndex) \nlong getInt32( unsignedlong aIndex) \nlong long getInt64( unsignedlong aIndex) \ndouble getDouble( unsignedlong aIndex) \nAUTF8String getUTF8String( unsignedlong aIndex) \nAString getString( unsignedlong aIndex) \nvoid getBlob( unsignedlong aIndex, unsignedlong aDataSize, octet aData) \nboolean getIsNull( unsignedlong aIndex) \nvoid getSharedUTF8String( unsignedlong aIndex, unsignedlong aLength, string aResult) \nvoid getSharedString( unsignedlong aIndex, unsignedlong aLength, wstring aResult) \nvoid getSharedBlob( unsignedlong aIndex, unsignedlong aLength, octetPtr aResult) \nnsIURLFormatter.idl \nAString formatURL( AString aFormat) \nAString formatURLPref( AString aPref) \nnsIDOMHTMLIsIndexElement.idl \nattribute DOMString prompt \nnsIDOMStorageObsolete.idl \nDOMString key( unsignedlong index) \nnsIDOMStorageItem getItem( DOMString key) \nvoid setItem( DOMString key, DOMString data) \nvoid removeItem( DOMString key) \nnsISimpleTest.idl \nlong add( long a, long b) \nnsIDownloader.idl \nvoid init( nsIDownloadObserver observer, nsIFile downloadLocation) \nxpctest_in.idl \nlong EchoLong( long l) \nshort EchoShort( short a ) \nchar	EchoChar( char c ) \nboolean EchoBoolean( boolean b ) \noctet EchoOctet( octet o ) \nlong long EchoLongLong( long long ll ) \nunsignedshort EchoUnsignedShort( unsignedshort us ) \nunsignedlong EchoUnsignedLong( unsignedlong ul ) \nfloat EchoFloat( float f ) \ndouble EchoDouble( double d ) \nwchar EchoWchar ( wchar wc ) \nwstring EchoString( wstring ws ) \nPRBool EchoPRBool( PRBool b ) \nPRInt32 EchoPRInt32( PRInt32 l ) \nPRInt16 EchoPRInt16( PRInt16 l ) \nPRInt64 EchoPRInt64( PRInt64 i ) \nPRUint8 EchoPRUint8( PRUint8 i ) \nPRUint16 EchoPRUint16( PRUint16 i ) \nPRUint32 EchoPRUint32( PRUint32 i ) \nPRUint32 EchoPRUint32_2( PRUint32 i ) \nPRUint64 EchoPRUint64( PRUint64 i ) \nvoidPtr EchoVoidPtr( voidPtr vs ) \ncharPtr EchoCharPtr( charPtr cs ) \nvoidRef EchoVoidRef( voidRef vf ) \nnsIDRef EchoNsIDRef( nsIDRef r ) \nnsCIDRef EchoNsCIDRef( nsCIDRef r ) \nnsIDPtr EchoNsIDPtr( nsIDPtr p ) \nnsIIDPtr EchoNsIIDPtr( nsIIDPtr p ) \nnsCIDPtr EchoNsCIDPtr( nsCIDPtr p ) \nnsQIResult EchoNsQIResult( nsQIResult r ) \nvoid EchoVoid() \nnsIContentFilter.idl \nvoid notifyOfInsertion( AString mimeType, nsIURL contentSourceURL, nsIDOMDocument sourceDocument, PRBool willDeleteSelection, nsIDOMNode docFragment, nsIDOMNode contentStartNode, long contentStartOffset, nsIDOMNode contentEndNode, long contentEndOffset, nsIDOMNode insertionPointNode, long insertionPointOffset, boolean continueWithInsertion) \nnsIUTF8ConverterService.idl \nAUTF8String convertStringToUTF8( ACString aString, string aCharset, boolean aSkipCheck) \nAUTF8String convertURISpecToUTF8( ACString aSpec, string aCharset) \nnsIDOMClientInformation.idl \nvoid registerContentHandler( DOMString mimeType, DOMString uri, DOMString title) \nvoid registerProtocolHandler( DOMString protocol, DOMString uri, DOMString title) \nboolean mozIsLocallyAvailable( DOMString uri, boolean whenOffline) \nAccessibleAction.idl \nHRESULT nActions( long nActions) \nHRESULT doAction( long actionIndex) \nHRESULT description( long actionIndex,BSTR description) \nHRESULT keyBinding( long actionIndex, long nMaxBindings, BSTR keyBindings, long nBindings) \nHRESULT name( long actionIndex,BSTR name) \nHRESULT localizedName( long actionIndex,BSTR localizedName) \nnsIBrowserGlue.idl \nvoid sanitize( nsIDOMWindow aParentWindow) \nvoid ensurePlacesDefaultQueriesInitialized() \nnsIDOMWindow getMostRecentBrowserWindow() \nnsIAuthModule.idl \nvoid init( string aServiceName, unsignedlong aServiceFlags, wstring aDomain, wstring aUsername, wstring aPassword) \nvoid getNextToken( voidPtr aInToken, unsignedlong aInTokenLength, voidPtr aOutToken, unsignedlong aOutTokenLength) \nvoid wrap( voidPtr aInToken, unsignedlong aInTokenLength, boolean confidential, voidPtr aOutToken, unsignedlong aOutTokenLength) \nvoid unwrap( voidPtr aInToken, unsignedlong aInTokenLength, voidPtr aOutToken, unsignedlong aOutTokenLength) \nmozIStorageRow.idl \nnsIVariant getResultByIndex( unsignedlong aIndex) \nnsIVariant getResultByName( AUTF8String aName) \nnsIDOMHTMLTableColElement.idl \nattribute DOMString align \nattribute DOMString ch \nattribute DOMString chOff \nattribute long span \nattribute DOMString vAlign \nattribute DOMString width \nnsIDOMXULRelatedElement.idl \nnsIDOMNode getRelatedElement( nsIDOMNode aElement) \nnsISystemProxySettings.idl \nAUTF8String getProxyForURI( nsIURI aURI) \nnsITraceRefcnt.idl \nvoid logAddRef( voidPtr aPtr, nsrefcnt aNewRefcnt, string aTypeName, unsignedlong aInstanceSize) \nvoid logRelease( voidPtr aPtr, nsrefcnt aNewRefcnt, string aTypeName) \nvoid logCtor( voidPtr aPtr, string aTypeName, unsignedlong aInstanceSize) \nvoid logDtor( voidPtr aPtr, string aTypeName, unsignedlong aInstanceSize) \nvoid logAddCOMPtr( voidPtr aPtr, nsISupports aObject) \nvoid logReleaseCOMPtr( voidPtr aPtr, nsISupports aObject) \nnsICommandParams.idl \nshort getValueType( string name) \nboolean getBooleanValue( string name) \nlong getLongValue( string name) \ndouble getDoubleValue( string name) \nAString getStringValue( string name) \nstring getCStringValue( string name) \nnsISupports getISupportsValue( string name) \nvoid setBooleanValue( string name, boolean value) \nvoid setLongValue( string name, long value) \nvoid setDoubleValue( string name, double value) \nvoid setStringValue( string name, AString value) \nvoid setCStringValue( string name, string value) \nvoid setISupportsValue( string name, nsISupports value) \nvoid removeValue( string name) \nboolean hasMoreElements() \nvoid first() \nstring getNext() \nnsIRDFNode.idl \nboolean EqualsNode( nsIRDFNode aNode) \nnsIJetpackService.idl \nnsIJetpack createJetpack() \nnsIFeed.idl \nattribute nsIFeedTextConstruct subtitle \nattribute long enclosureCount \nattribute nsIArray items \nattribute nsIWritablePropertyBag2 cloud \nattribute nsIFeedGenerator generator \nattribute nsIWritablePropertyBag2 image \nattribute nsIWritablePropertyBag2 textInput \nattribute nsIArray skipDays \nattribute nsIArray skipHours \nnsIImageDocument.idl \nvoid shrinkToFit() \nvoid restoreImage() \nvoid restoreImageTo( long x, long y) \nvoid toggleImageSize() \nnsIDOMMimeTypeArray.idl \nnsIDOMMimeType item( unsignedlong index) \nnsIDOMMimeType namedItem( DOMString name) \nnsIDOMChromeWindow.idl \nattribute nsIBrowserDOMWindow browserDOMWindow \nvoid getAttention() \nvoid getAttentionWithCycleCount( long aCycleCount) \nvoid setCursor( DOMString cursor) \nvoid maximize() \nvoid minimize() \nvoid restore() \nvoid notifyDefaultButtonLoaded( nsIDOMElement defaultButton) \nvoid beginWindowMove( nsIDOMEvent mouseDownEvent) \nnsITokenPasswordDialogs.idl \nvoid setPassword( nsIInterfaceRequestor ctx, wstring tokenName, boolean canceled) \nvoid getPassword( nsIInterfaceRequestor ctx, wstring tokenName, wstring password, boolean canceled) \nnsIHelperAppLauncherDialog.idl \nvoid show( nsIHelperAppLauncher aLauncher, nsISupports aWindowContext, unsignedlong aReason) \nnsILocalFile promptForSaveToFile( nsIHelperAppLauncher aLauncher, nsISupports aWindowContext, wstring aDefaultFileName, wstring aSuggestedFileExtension, boolean aForcePrompt) \nnsIDOMStyleSheetList.idl \nnsIDOMStyleSheet item( unsignedlong index) \nnsIHashable.idl \nboolean equals( nsIHashable aOther) \nnsIBaseStream.idl \nvoid close() \nnsIASN1Tree.idl \nvoid loadASN1Structure( nsIASN1Object asn1Object) \nAString getDisplayData( unsignedlong index) \nnsIDOMGeoPositionCallback.idl \nvoid handleEvent( nsIDOMGeoPosition position) \nnsIEditorDocShell.idl \nattribute nsIEditor editor \nvoid makeEditable( boolean inWaitForUriLoad) \nnsIDOMUserDataHandler.idl \nvoid handle( unsignedshort operation, DOMString key, nsIVariant data, nsIDOMNode src, nsIDOMNode dst) \nnsIEditActionListener.idl \nvoid WillCreateNode( DOMString aTag, nsIDOMNode aParent, long aPosition) \nvoid DidCreateNode( DOMString aTag, nsIDOMNode aNode, nsIDOMNode aParent, long aPosition, nsresult aResult) \nvoid WillInsertNode( nsIDOMNode aNode, nsIDOMNode aParent, long aPosition) \nvoid DidInsertNode( nsIDOMNode aNode, nsIDOMNode aParent, long aPosition, nsresult aResult) \nvoid WillDeleteNode( nsIDOMNode aChild) \nvoid DidDeleteNode( nsIDOMNode aChild, nsresult aResult) \nvoid WillSplitNode( nsIDOMNode aExistingRightNode, long aOffset) \nvoid DidSplitNode( nsIDOMNode aExistingRightNode, long aOffset, nsIDOMNode aNewLeftNode, nsresult aResult) \nvoid WillJoinNodes( nsIDOMNode aLeftNode, nsIDOMNode aRightNode, nsIDOMNode aParent) \nvoid DidJoinNodes( nsIDOMNode aLeftNode, nsIDOMNode aRightNode, nsIDOMNode aParent, nsresult aResult) \nvoid WillInsertText( nsIDOMCharacterData aTextNode, long aOffset, DOMString aString) \nvoid DidInsertText( nsIDOMCharacterData aTextNode, long aOffset, DOMString aString, nsresult aResult) \nvoid WillDeleteText( nsIDOMCharacterData aTextNode, long aOffset, long aLength) \nvoid DidDeleteText( nsIDOMCharacterData aTextNode, long aOffset, long aLength, nsresult aResult) \nvoid WillDeleteSelection( nsISelection aSelection) \nvoid DidDeleteSelection( nsISelection aSelection) \nnsISAXDTDHandler.idl \nvoid notationDecl( AString name, AString publicId, AString systemId) \nvoid unparsedEntityDecl( AString name, AString publicId, AString systemId, AString notationName) \nnsIRDFResource.idl \nvoid GetValueConst( string aConstValue) \nvoid Init( string uri) \nboolean EqualsString( string aURI) \nvoid GetDelegate( string aKey, nsIIDRef aIID, nsQIResult aResult) \nvoid ReleaseDelegate( string aKey) \nnsIDOMHTMLMenuElement.idl \nattribute boolean compact \nnsIAnnotationService.idl \nvoid onPageAnnotationSet( nsIURI aPage, AUTF8String aName) \nvoid onItemAnnotationSet( long long aItemId, AUTF8String aName) \nvoid onPageAnnotationRemoved( nsIURI aURI, AUTF8String aName) \nvoid onItemAnnotationRemoved( long long aItemId, AUTF8String aName) \nnsIDOMXPathExpression.idl \nnsISupports evaluate( nsIDOMNode contextNode, unsignedshort type, nsISupports result) \nnsIDOMHTMLOptionsCollection.idl \nattribute unsignedlong length \nnsIDOMNode item( unsignedlong index) \nnsIDOMNode namedItem( DOMString name) \nnsIDOMNavigator.idl \nboolean javaEnabled() \nboolean taintEnabled() \nnsIAppleFileDecoder.idl \nnsIDiskCacheStreamInternal.idl \nvoid closeInternal() \nnsIDOMSVGSymbolElement.idl \nnsIHapticFeedback.idl \nvoid performSimpleAction( long isLongPress) \nnsIDOMSVGEllipseElement.idl \nnsIDOMHTMLFrameElement.idl \nattribute DOMString frameBorder \nattribute DOMString longDesc \nattribute DOMString marginHeight \nattribute DOMString marginWidth \nattribute DOMString name \nattribute boolean noResize \nattribute DOMString scrolling \nattribute DOMString src \nnsIDOMNavigatorGeolocation.idl \nextIApplication.idl \nvoid log( AString aMsg) \nvoid open() \nnsIDOMCSSImportRule.idl \nnsIDOMHTMLElement.idl \nattribute DOMString id \nattribute DOMString title \nattribute DOMString lang \nattribute DOMString dir \nattribute DOMString className \nnsIMultiPartChannel.idl \nattribute ACString contentDisposition \nnsIPluginStreamListener.idl \nnsIWebappsSupport.idl \nvoid installApplication( wstring title, wstring uri, wstring iconUri, wstring iconData) \nboolean isApplicationInstalled( wstring uri) \nmozIStoragePendingStatement.idl \nvoid cancel() \nnsIPrintProgress.idl \nattribute boolean processCanceledByUser \nvoid openProgressDialog( nsIDOMWindowInternal parent, string dialogURL, nsISupports parameters, nsIObserver openDialogObserver, boolean notifyOnOpen) \nvoid closeProgressDialog( boolean forceClose) \nvoid registerListener( nsIWebProgressListener listener) \nvoid unregisterListener( nsIWebProgressListener listener) \nvoid doneIniting() \nnsIPrompt getPrompter() \nnsIXMLContentBuilder.idl \nvoid clear( nsIDOMElement root) \nvoid setDocument( nsIDOMDocument doc) \nvoid setElementNamespace( AString ns) \nvoid beginElement( AString tagname) \nvoid endElement() \nvoid attrib( AString name, AString value) \nvoid textNode( AString text) \nnsIDOMHTMLDListElement.idl \nattribute boolean compact \nnsITaggingService.idl \nvoid tagURI( nsIURI aURI, nsIVariant aTags) \nvoid untagURI( nsIURI aURI, nsIVariant aTags) \nnsIVariant getURIsForTag( AString aTag) \nvoid getTagsForURI( nsIURI aURI, unsignedlong length, wstring aTags) \nnsIDOMNodeList.idl \nnsIDOMNode item( unsignedlong index) \nnsITransferable.idl \nnsIDOMHTMLHeadingElement.idl \nattribute DOMString align \nnsIStorageStream.idl \nattribute PRUint32 length \nvoid init( PRUint32 segmentSize, PRUint32 maxSize, nsIMemory segmentAllocator) \nnsIOutputStream getOutputStream( PRInt32 startPosition) \nnsIInputStream newInputStream( PRInt32 startPosition) \nnsIDOMGeoGeolocation.idl \nvoid getCurrentPosition( nsIDOMGeoPositionCallback successCallback, nsIDOMGeoPositionErrorCallback errorCallback, nsIDOMGeoPositionOptions options) \nlong watchPosition( nsIDOMGeoPositionCallback successCallback, nsIDOMGeoPositionErrorCallback errorCallback, nsIDOMGeoPositionOptions options) \nvoid clearWatch( long watchId) \nxpcIJSGetFactory.idl \nnsIFactory get( nsCIDRef aCID) \nnsIMacDockSupport.idl \nattribute nsIStandaloneNativeMenu dockMenu \nvoid activateApplication( boolean aIgnoreOtherApplications) \nnsIDOMXULPopupElement.idl \nattribute DOMString position \nvoid showPopup( unsignedshort alignment, nsIDOMElement target, nsIDOMElement anchor) \nvoid hidePopup() \nnsIScriptSecurityManager.idl \nvoid checkPropertyAccess( JSContextPtr aJSContext, JSObjectPtr aJSObject, string aClassName, jsid aProperty, PRUint32 aAction) \nvoid checkLoadURIFromScript( JSContextPtr cx, nsIURI uri) \nvoid checkLoadURIWithPrincipal( nsIPrincipal aPrincipal, nsIURI uri, unsignedlong flags) \nvoid checkLoadURI( nsIURI from, nsIURI uri, unsignedlong flags) \nvoid checkLoadURIStrWithPrincipal( nsIPrincipal aPrincipal, AUTF8String uri, unsignedlong flags) \nvoid checkLoadURIStr( AUTF8String from, AUTF8String uri, unsignedlong flags) \nvoid checkFunctionAccess( JSContextPtr cx, voidPtr funObj, voidPtr targetObj) \nboolean canExecuteScripts( JSContextPtr cx, nsIPrincipal principal) \nnsIPrincipal getSubjectPrincipal() \nnsIPrincipal getSystemPrincipal() \ngetCertificatePrincipal( AUTF8String aCertFingerprint, AUTF8String aSubjectName, AUTF8String aPrettyName, nsISupports aCert, nsIURI aURI) \nnsIPrincipal getCodebasePrincipal( nsIURI aURI) \nshort requestCapability( nsIPrincipal principal, string capability) \nboolean isCapabilityEnabled( string capability) \nvoid enableCapability( string capability) \nvoid revertCapability( string capability) \nvoid disableCapability( string capability) \nvoid setCanEnableCapability( AUTF8String certificateFingerprint, string capability, short canEnable) \nnsIPrincipal getObjectPrincipal( JSContextPtr cx, JSObjectPtr obj) \nboolean subjectPrincipalIsSystem() \nvoid checkSameOrigin( JSContextPtr aJSContext, nsIURI aTargetURI) \nvoid checkSameOriginURI( nsIURI aSourceURI, nsIURI aTargetURI, boolean reportError) \nnsIPrincipal getPrincipalFromContext( JSContextPtr cx) \nnsIPrincipal getChannelPrincipal( nsIChannel aChannel) \nboolean isSystemPrincipal( nsIPrincipal aPrincipal) \nnsIPrincipal getCxSubjectPrincipal( JSContextPtr cx) \nnsIPrincipal getCxSubjectPrincipalAndFrame( JSContextPtr cx, JSStackFramePtr fp) \nvoid pushContextPrincipal( JSContextPtr cx, JSStackFramePtr fp, nsIPrincipal principal) \nvoid popContextPrincipal( JSContextPtr cx) \nISimpleDOMDocument.idl \nHRESULT URL( BSTR url) \nHRESULT title( BSTR title) \nHRESULT mimeType( BSTR mimeType) \nHRESULT docType( BSTR docType) \nHRESULT nameSpaceURIForID( short nameSpaceID, BSTR nameSpaceURI) \nHRESULT alternateViewMediaTypes( BSTR commaSeparatedMediaTypes) \nnsIRDFCompositeDataSource.idl \nattribute boolean allowNegativeAssertions \nattribute boolean coalesceDuplicateArcs \nvoid AddDataSource( nsIRDFDataSource aDataSource) \nvoid RemoveDataSource( nsIRDFDataSource aDataSource) \nnsISimpleEnumerator GetDataSources() \nnsIPKCS11Slot.idl \nnsIPK11Token getToken() \nnsIDOMCSSStyleSheet.idl \nunsignedlong insertRule( DOMString rule, unsignedlong index) \nvoid deleteRule( unsignedlong index) \nnsIJumpListItem.idl \nboolean equals( nsIJumpListItem item) \nnsIXTFElementWrapper.idl \nattribute unsignedlong notificationMask \nvoid setIntrinsicState( unsignedlong long newState) \nvoid setClassAttributeName( nsIAtom name) \nnsIScriptEventManager.idl \nnsISupports FindEventHandler( AString aObjectName, AString aEventName, unsignedlong aArgCount) \nvoid InvokeEventHandler( nsISupports aHandler, nsISupports aTargetObject, voidPtr aArgs, unsignedlong aArgCount) \nnsIDOMPkcs11.idl \nlong deletemodule( DOMString moduleName) \nlong addmodule( DOMString moduleName, DOMString libraryFullPath, long cryptoMechanismFlags, long cipherFlags) \nnsCWebBrowser.idl \nnsIApplicationCacheChannel.idl \nattribute boolean inheritApplicationCache \nattribute boolean chooseApplicationCache \nvoid markOfflineCacheEntryAsForeign() \nnsIObjectInputStream.idl \nnsISupports readObject( PRBool aIsStrongRef) \nnsresult readID( nsID aID) \ncharPtr getBuffer( PRUint32 aLength, PRUint32 aAlignMask) \nvoid putBuffer( charPtr aBuffer, PRUint32 aLength) \nnsIRDFXMLSource.idl \nvoid Serialize( nsIOutputStream aStream) \nnsIResProtocolHandler.idl \nvoid setSubstitution( ACString root, nsIURI baseURI) \nnsIURI getSubstitution( ACString root) \nboolean hasSubstitution( ACString root) \nAUTF8String resolveURI( nsIURI resURI) \nnsIDocCharset.idl \nattribute string charset \nnsIApplicationCache.idl \nvoid init( unsignedlong itemType, ACString namespaceSpec, ACString data) \namIWebInstaller.idl \nboolean isInstallEnabled( AString aMimetype, nsIURI aReferer) \nboolean installAddonsFromWebpage( AString aMimetype,nsIDOMWindowInternal aWindow, nsIURI aReferer, wstring aUris, wstring aHashes, wstring aNames, wstring aIcons, amIInstallCallback aCallback, PRUint32 aInstallCount) \nnsIIdleService.idl \nvoid addIdleObserver( nsIObserver observer, unsignedlong time) \nvoid removeIdleObserver( nsIObserver observer, unsignedlong time) \nnsIAssociatedContentSecurity.idl \nattribute long countSubRequestsHighSecurity \nattribute long countSubRequestsLowSecurity \nattribute long countSubRequestsBrokenSecurity \nattribute long countSubRequestsNoSecurity \nvoid flush() \nnsISAXXMLReader.idl \nattribute nsIURI baseURI \nattribute nsISAXContentHandler contentHandler \nattribute nsISAXDTDHandler dtdHandler \nattribute nsISAXErrorHandler errorHandler \nattribute nsISAXLexicalHandler lexicalHandler \nvoid setFeature( AString name, boolean value) \nboolean getFeature( AString name) \nvoid setProperty( AString name, nsISupports value) \nboolean getProperty( AString name) \nvoid parseFromString( AString str, string contentType) \nvoid parseFromStream( nsIInputStream stream, string charset, string contentType) \nvoid parseAsync( nsIRequestObserver observer) \nnsIAccessible.idl \nattribute AString name \nnsIDOMDOMStringList getKeyBindings( PRUint8 aActionIndex) \nvoid getState( unsignedlong aState, unsignedlong aExtraState) \nvoid groupPosition( long aGroupLevel, long aSimilarItemsInGroup, long aPositionInGroup) \nnsIAccessible getChildAtPoint( long x, long y) \nnsIAccessible getDeepestChildAtPoint( long x, long y) \nnsIAccessible getChildAt( long aChildIndex) \nnsIAccessible getAccessibleToRight() \nnsIAccessible getAccessibleToLeft() \nnsIAccessible getAccessibleAbove() \nnsIAccessible getAccessibleBelow() \nnsIAccessibleRelation getRelationByType( unsignedlong aRelationType) \nnsIAccessibleRelation getRelation( unsignedlong index) \nnsIArray getRelations() \nvoid getBounds( long x, long y, long width, long height) \nvoid setSelected( boolean isSelected) \nvoid extendSelection() \nvoid takeSelection() \nvoid takeFocus() \nAString getActionName( PRUint8 index) \nAString getActionDescription( PRUint8 aIndex) \nvoid doAction( PRUint8 index) \nvoid getNativeInterface( voidPtr aOutAccessible) \nnsISound.idl \nvoid play( nsIURL aURL) \nvoid playSystemSound( AString soundAlias) \nvoid beep() \nvoid init() \nvoid playEventSound( unsignedlong aEventId) \namIWebInstallListener.idl \nvoid install() \nnsIDOMJSWindow.idl \nvoid dump( DOMString str) \nlong setTimeout() \nlong setInterval() \nvoid clearTimeout() \nvoid clearInterval() \nvoid setResizable( boolean resizable) \nvoid captureEvents( long eventFlags) \nvoid releaseEvents( long eventFlags) \nvoid routeEvent( nsIDOMEvent evt) \nvoid enableExternalCapture() \nvoid disableExternalCapture() \nnsIDOMWindow open( DOMString url, DOMString name, DOMString options) \nnsIDOMWindow openDialog( DOMString url, DOMString name, DOMString options) \nnsIFeedPerson.idl \nattribute AString name \nattribute AString email \nattribute nsIURI uri \nnsIDragService.idl \nvoid invokeDragSession ( nsIDOMNode aDOMNode, nsISupportsArray aTransferables, nsIScriptableRegion aRegion, unsignedlong aActionType ) \nvoid invokeDragSessionWithImage( nsIDOMNode aDOMNode, nsISupportsArray aTransferableArray, nsIScriptableRegion aRegion, unsignedlong aActionType, nsIDOMNode aImage, long aImageX, long aImageY, nsIDOMDragEvent aDragEvent, nsIDOMDataTransfer aDataTransfer) \nvoid invokeDragSessionWithSelection( nsISelection aSelection, nsISupportsArray aTransferableArray, unsignedlong aActionType, nsIDOMDragEvent aDragEvent, nsIDOMDataTransfer aDataTransfer) \nnsIDragSession getCurrentSession( )  \nvoid startDragSession( )  \nvoid endDragSession( PRBool aDoneDrag )  \nvoid fireDragEventAtSource( unsignedlong aMsg ) \nvoid suppress() \nvoid unsuppress() \nnsIDOMHTMLAreaElement.idl \nattribute DOMString alt \nattribute DOMString coords \nattribute DOMString shape \nattribute DOMString href \nattribute DOMString target \nattribute DOMString ping \nattribute DOMString protocol \nattribute DOMString host \nattribute DOMString hostname \nattribute DOMString port \nattribute DOMString pathname \nattribute DOMString search \nattribute DOMString hash \nattribute DOMString accessKey \nattribute long tabIndex \nattribute boolean noHref \nDOMString toString() \nimgIEncoder.idl \nvoid initFromData( PRUint8 data, unsignedlong length, PRUint32 width, PRUint32 height, PRUint32 stride, PRUint32 inputFormat, AString putOptions) \nvoid startImageEncode( PRUint32 width, PRUint32 height, PRUint32 inputFormat, AString putOptions) \nvoid addImageFrame( PRUint8 data, unsignedlong length, PRUint32 width, PRUint32 height, PRUint32 stride, PRUint32 frameFormat, AString frameOptions) \nvoid endImageEncode() \nnsIDOMDragEvent.idl \nvoid initDragEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMAbstractView aView, long aDetail, long aScreenX, long aScreenY, long aClientX, long aClientY, boolean aCtrlKey, boolean aAltKey, boolean aShiftKey, boolean aMetaKey, unsignedshort aButton, nsIDOMEventTarget aRelatedTarget, nsIDOMDataTransfer aDataTransfer) \nnsIFind.idl \nattribute boolean findBackwards \nattribute boolean caseSensitive \nattribute nsIWordBreaker wordBreaker \nnsIDOMRange Find( wstring aPatText, nsIDOMRange aSearchRange, nsIDOMRange aStartPoint, nsIDOMRange aEndPoint) \nnsIPrintStatusFeedback.idl \nvoid showStatusString( wstring status) \nvoid startMeteors() \nvoid stopMeteors() \nvoid showProgress( long percent) \nvoid setDocShell( nsIDocShell shell, nsIDOMWindowInternal window) \nvoid closeWindow() \nnsIAutoCompleteListener.idl \nnsIDOMSVGAnimatedString.idl \nattribute DOMString baseVal \nnsIDOMCSSPageRule.idl \nattribute DOMString selectorText \nxpctest_domstring.idl \nvoid hereHaveADOMString( DOMString str) \nvoid dontKeepThisOne( DOMString str) \nvoid giveDOMStringTo( nsIXPCTestDOMString recv) \nvoid passDOMStringThroughTo( DOMString str, nsIXPCTestDOMString recv) \nnsIRDFContainer.idl \nvoid Init( nsIRDFDataSource aDataSource, nsIRDFResource aContainer) \nlong GetCount() \nnsISimpleEnumerator GetElements() \nvoid AppendElement( nsIRDFNode aElement) \nvoid RemoveElement( nsIRDFNode aElement, boolean aRenumber) \nvoid InsertElementAt( nsIRDFNode aElement, long aIndex, boolean aRenumber) \nnsIRDFNode RemoveElementAt( long aIndex, boolean aRenumber) \nlong IndexOf( nsIRDFNode aElement) \nnsIDOMSVGTransformList.idl \nvoid clear() \nnsIDOMSVGTransform initialize( nsIDOMSVGTransform newItem) \nnsIDOMSVGTransform getItem( unsignedlong index) \nnsIDOMSVGTransform insertItemBefore( nsIDOMSVGTransform newItem, unsignedlong index) \nnsIDOMSVGTransform replaceItem( nsIDOMSVGTransform newItem, unsignedlong index) \nnsIDOMSVGTransform removeItem( unsignedlong index) \nnsIDOMSVGTransform appendItem( nsIDOMSVGTransform newItem) \nnsIDOMSVGTransform createSVGTransformFromMatrix( nsIDOMSVGMatrix matrix) \nnsIDOMSVGTransform consolidate() \nnsIWindowsShellService.idl \nvoid shortcutMaintenance() \nnsIExtendedExpatSink.idl \nvoid handleStartDTD( wstring aDoctypeName, wstring aSysid, wstring aPubid) \nvoid handleStartNamespaceDecl( wstring aPrefix, wstring aUri) \nvoid handleEndNamespaceDecl( wstring aPrefix) \nvoid handleNotationDecl( wstring aNotationName, wstring aSysid, wstring aPubid) \nvoid handleUnparsedEntityDecl( wstring aName, wstring aSysid, wstring aPubid, wstring aNotationName) \nnsIUUIDGenerator.idl \nnsIDPtr generateUUID() \nvoid generateUUIDInPlace( nsNonConstIDPtr id) \nnsISAXAttributes.idl \nlong getIndexFromName( AString uri, AString localName) \nlong getIndexFromQName( AString qName) \nAString getLocalName( unsignedlong index) \nAString getQName( unsignedlong index) \nAString getType( unsignedlong index) \nAString getTypeFromName( AString uri, AString localName) \nAString getTypeFromQName( AString qName) \nAString getURI( unsignedlong index) \nAString getValue( unsignedlong index) \nAString getValueFromName( AString uri, AString localName) \nAString getValueFromQName( AString qName) \nnsIDOMSVGMarkerElement.idl \nvoid setOrientToAuto ( ) \nvoid setOrientToAngle ( nsIDOMSVGAngle angle ) \nnsIDOMCanvasRenderingContext2D.idl \nvoid addColorStop( float offset, DOMString color) \nnsIPrompt.idl \nvoid alert( wstring dialogTitle, wstring text) \nvoid alertCheck( wstring dialogTitle, wstring text, wstring checkMsg, boolean checkValue) \nboolean confirm( wstring dialogTitle, wstring text) \nboolean confirmCheck( wstring dialogTitle, wstring text, wstring checkMsg, boolean checkValue) \nPRInt32 confirmEx( wstring dialogTitle, wstring text, unsignedlong buttonFlags, wstring button0Title, wstring button1Title, wstring button2Title, wstring checkMsg, boolean checkValue) \nboolean prompt( wstring dialogTitle, wstring text, wstring value, wstring checkMsg, boolean checkValue) \nboolean promptPassword( wstring dialogTitle, wstring text, wstring password, wstring checkMsg, boolean checkValue) \nboolean promptUsernameAndPassword( wstring dialogTitle, wstring text, wstring username, wstring password, wstring checkMsg, boolean checkValue) \nboolean select( wstring dialogTitle, wstring text, PRUint32 count, wstring selectList, long Selection) \nnsIDocShellTreeOwner.idl \nnsIDocShellTreeItem findItemWithName( wstring name, nsIDocShellTreeItem aRequestor, nsIDocShellTreeItem aOriginalRequestor) \nvoid contentShellAdded( nsIDocShellTreeItem aContentShell, boolean aPrimary, boolean aTargetable, AString aID) \nvoid contentShellRemoved( nsIDocShellTreeItem aContentShell) \nvoid sizeShellTo( nsIDocShellTreeItem shell, long cx, long cy) \nvoid setPersistence( boolean aPersistPosition, boolean aPersistSize, boolean aPersistSizeMode) \nvoid getPersistence( boolean aPersistPosition, boolean aPersistSize, boolean aPersistSizeMode) \nnsIScreen.idl \nvoid GetRect( long left, long top, long width, long height ) \nvoid GetAvailRect( long left, long top, long width, long height ) \nnsIModifyableXPointer.idl \nvoid appendRange( nsIDOMRange aRange) \nnsIToolkitProfile.idl \nvoid unlock() \nnsITransactionListener.idl \nboolean willDo( nsITransactionManager aManager, nsITransaction aTransaction) \nvoid didDo( nsITransactionManager aManager, nsITransaction aTransaction, nsresult aDoResult) \nboolean willUndo( nsITransactionManager aManager, nsITransaction aTransaction) \nvoid didUndo( nsITransactionManager aManager, nsITransaction aTransaction, nsresult aUndoResult) \nboolean willRedo( nsITransactionManager aManager, nsITransaction aTransaction) \nvoid didRedo( nsITransactionManager aManager, nsITransaction aTransaction, nsresult aRedoResult) \nboolean willBeginBatch( nsITransactionManager aManager) \nvoid didBeginBatch( nsITransactionManager aManager, nsresult aResult) \nboolean willEndBatch( nsITransactionManager aManager) \nvoid didEndBatch( nsITransactionManager aManager, nsresult aResult) \nboolean willMerge( nsITransactionManager aManager, nsITransaction aTopTransaction, nsITransaction aTransactionToMerge) \nvoid didMerge( nsITransactionManager aManager, nsITransaction aTopTransaction, nsITransaction aTransactionToMerge, boolean aDidMerge, nsresult aMergeResult) \nnsIDOMSVGZoomAndPan.idl \nattribute unsignedshort zoomAndPan \nnsIDOMSVGAnimatedNumber.idl \nattribute float baseVal \nnsIDOMFile.idl \nnsIDOMBlob slice( unsignedlong long start, unsignedlong long length, DOMString contentType) \nDOMString getInternalUrl( nsIPrincipal principal) \npluginhostctrl.idl \nHRESULT Text( BSTR strText) \nHRESULT PluginContentType( BSTR newVal) \nHRESULT PluginSource( BSTR newVal) \nHRESULT PluginsPage( BSTR newVal) \nnsITabParent.idl \nnsIDOMHTMLImageElement.idl \nattribute DOMString alt \nattribute DOMString src \nattribute DOMString useMap \nattribute boolean isMap \nattribute long width \nattribute long height \nattribute DOMString name \nattribute DOMString align \nattribute DOMString border \nattribute long hspace \nattribute DOMString longDesc \nattribute long vspace \nattribute DOMString lowsrc \nnsIDOMPopupBlockedEvent.idl \nvoid initPopupBlockedEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIDOMWindow requestingWindow, nsIURI popupWindowURI, DOMString popupWindowName, DOMString popupWindowFeatures) \nnsIHTMLObjectResizeListener.idl \nvoid onStartResizing( nsIDOMElement aElement) \nvoid onEndResizing( nsIDOMElement aElement, long aOldWidth, long aOldHeight, long aNewWidth, long aNewHeight) \nnsIScrollable.idl \nlong getCurScrollPos( long scrollOrientation) \nvoid setCurScrollPos( long scrollOrientation, long curPos) \nvoid setCurScrollPosEx( long curHorizontalPos, long curVerticalPos) \nvoid getScrollRange( long scrollOrientation, long minPos, long maxPos) \nvoid setScrollRange( long scrollOrientation, long minPos, long maxPos) \nvoid setScrollRangeEx( long minHorizontalPos, long maxHorizontalPos, long minVerticalPos, long maxVerticalPos) \nlong getDefaultScrollbarPreferences( long scrollOrientation) \nvoid setDefaultScrollbarPreferences( long scrollOrientation, long scrollbarPref) \nvoid getScrollbarVisibility( boolean verticalVisible, boolean horizontalVisible) \nnsIClipboardHelper.idl \nnsIDOMSVGStylable.idl \nnsIDOMCSSValue getPresentationAttribute( DOMString name) \nnsIConverterInputStream.idl \nvoid init ( nsIInputStream aStream, string aCharset, long aBufferSize, PRUnichar aReplacementChar) \nTestScriptable.idl \nattribute long scriptable_attr2 \nattribute long notscriptable_attr2 \nvoid scriptable_method1() \nvoid notscriptable_method1() \nvoid notscriptable_method2() \nvoid notscriptable_method3() \nnsIDOMXULCheckboxElement.idl \nattribute boolean checked \nattribute long checkState \nattribute boolean autoCheck \nnsIRelativeFilePref.idl \nattribute nsILocalFile file \nattribute ACString relativeToKey \nnsINetUtil.idl \nAUTF8String parseContentType( AUTF8String aTypeHeader, AUTF8String aCharset, boolean aHadCharset) \nboolean protocolHasFlags( nsIURI aURI, unsignedlong aFlag) \nboolean URIChainHasFlags( nsIURI aURI, unsignedlong aFlags) \nnsIURI toImmutableURI( nsIURI aURI) \nnsIURI newSimpleNestedURI( nsIURI aURI) \nACString escapeString( ACString aString, unsignedlong aEscapeType) \nACString escapeURL( ACString aStr, unsignedlong aFlags) \nACString unescapeString( AUTF8String aStr, unsignedlong aFlags) \nboolean extractCharsetFromContentType( AUTF8String aTypeHeader, AUTF8String aCharset, long aCharsetStart, long aCharsetEnd) \nnsIConverterOutputStream.idl \nvoid init( nsIOutputStream aOutStream, string aCharset, unsignedlong aBufferSize, PRUnichar aReplacementCharacter) \nnsIDOMHTMLLinkElement.idl \nattribute boolean disabled \nattribute DOMString charset \nattribute DOMString href \nattribute DOMString hreflang \nattribute DOMString media \nattribute DOMString rel \nattribute DOMString rev \nattribute DOMString target \nattribute DOMString type \nnsIDNSRecord.idl \nPRNetAddr getNextAddr( PRUint16 aPort) \nACString getNextAddrAsString() \nboolean hasMore() \nvoid rewind() \nnsIXPConnect.idl \nnsISAXErrorHandler.idl \nvoid error( nsISAXLocator locator, AString error) \nvoid fatalError( nsISAXLocator locator, AString error) \nvoid ignorableWarning( nsISAXLocator locator, AString error) \nimgIDecoderObserver.idl \nnsIDOMSVGDocument.idl \nnsIStyleSheetService.idl \nvoid loadAndRegisterSheet( nsIURI sheetURI, unsignedlong type) \nboolean sheetRegistered( nsIURI sheetURI, unsignedlong type) \nvoid unregisterSheet( nsIURI sheetURI, unsignedlong type) \nnsIXULAppInstall.idl \nvoid installApplication( nsIFile aAppFile, nsIFile aDirectory, AString aLeafName) \nnsIWebProgressListener.idl \nvoid onStateChange( nsIWebProgress aWebProgress, nsIRequest aRequest, unsignedlong aStateFlags, nsresult aStatus) \nvoid onProgressChange( nsIWebProgress aWebProgress, nsIRequest aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) \nvoid onLocationChange( nsIWebProgress aWebProgress, nsIRequest aRequest, nsIURI aLocation) \nvoid onStatusChange( nsIWebProgress aWebProgress, nsIRequest aRequest, nsresult aStatus, wstring aMessage) \nvoid onSecurityChange( nsIWebProgress aWebProgress, nsIRequest aRequest, unsignedlong aState) \nnsIAppShell.idl \nvoid run() \nvoid exit() \nvoid favorPerformanceHint( boolean favorPerfOverStarvation, unsignedlong starvationDelay) \nvoid suspendNative() \nvoid resumeNative() \nvoid runInStableState( nsIRunnable aRunnable) \nnsIDialogParamBlock.idl \nattribute nsIMutableArray objects \nPRInt32 GetInt( PRInt32 inIndex ) \nvoid SetInt( PRInt32 inIndex, PRInt32 inInt ) \nvoid SetNumberStrings( PRInt32 inNumStrings ) \nwstring GetString( PRInt32 inIndex ) \nvoid SetString( PRInt32 inIndex, wstring inString) \nnsIIncrementalDownload.idl \nvoid init( nsIURI uri, nsIFile destination, long chunkSize, long intervalInSeconds) \nvoid start( nsIRequestObserver observer, nsISupports ctxt) \nnsIRequest.idl \nattribute nsILoadGroup loadGroup \nattribute nsLoadFlags loadFlags \nboolean isPending() \nvoid cancel( nsresult aStatus) \nvoid suspend() \nvoid resume() \nnsIDOMSVGLengthList.idl \nvoid clear() \nnsIDOMSVGLength initialize( nsIDOMSVGLength newItem ) \nnsIDOMSVGLength getItem( unsignedlong index) \nnsIDOMSVGLength insertItemBefore( nsIDOMSVGLength newItem, unsignedlong index) \nnsIDOMSVGLength replaceItem( nsIDOMSVGLength newItem, unsignedlong index) \nnsIDOMSVGLength removeItem( unsignedlong index) \nnsIDOMSVGLength appendItem( nsIDOMSVGLength newItem) \nnsIDOMXMLDocument.idl \nattribute boolean async \nboolean load( DOMString url) \nnsIDOMRange evaluateFIXptr( DOMString expression) \nnsIXPointerResult evaluateXPointer( DOMString expression) \nnsIPluginInstanceOwner.idl \nnsIDOMFileReader.idl \nattribute nsIDOMEventListener onloadend \nvoid readAsBinaryString( nsIDOMBlob filedata) \nvoid readAsText( nsIDOMBlob filedata, DOMString encoding) \nvoid readAsDataURL( nsIDOMBlob file) \nvoid abort() \nnsIDOMHTMLDirectoryElement.idl \nattribute boolean compact \nnsIFeedProcessor.idl \nattribute nsIFeedResultListener listener \nvoid parseFromStream( nsIInputStream stream, nsIURI uri) \nvoid parseFromString( AString str, nsIURI uri) \nvoid parseAsync( nsIRequestObserver requestObserver, nsIURI uri) \nnsIDOMHTMLByteRanges.idl \nunsignedlong start( unsignedlong index) \nunsignedlong end( unsignedlong index) \nnsIDOMEventListener.idl \nvoid handleEvent( nsIDOMEvent event) \nnsIThreadManager.idl \nnsIThread newThread( unsignedlong creationFlags) \nnsIThread getThreadFromPRThread( PRThread prthread) \nnsITreeColumns.idl \nvoid getIdConst( wstring idConst) \nnsITreeColumn getNext() \nnsITreeColumn getPrevious() \nvoid invalidate() \nnsIHttpChannelAuthProvider.idl \nvoid init( nsIHttpAuthenticableChannel channel) \nvoid processAuthentication( unsignedlong httpStatus, boolean sslConnectFailed) \nvoid addAuthorizationHeaders() \nvoid checkForSuperfluousAuth() \nvoid disconnect( nsresult status) \nnsIWebProgressListener2.idl \nvoid onProgressChange64( nsIWebProgress aWebProgress, nsIRequest aRequest, long long aCurSelfProgress, long long aMaxSelfProgress, long long aCurTotalProgress, long long aMaxTotalProgress) \nboolean onRefreshAttempted( nsIWebProgress aWebProgress, nsIURI aRefreshURI, long aMillis, boolean aSameURI) \nnsITextScroll.idl \nvoid scrollByLines( long numLines) \nvoid scrollByPages( long numPages) \nnsIDirectoryService.idl \nnsIFile getFile( string prop, PRBool persistent) \nnsIPluginTag.idl \nattribute boolean disabled \nattribute boolean blocklisted \nnsIMicrosummaryService.idl \nvoid onContentLoaded( nsIMicrosummary microsummary) \nvoid onError( nsIMicrosummary microsummary) \nvoid onElementAppended( nsIMicrosummary microsummary) \nnsITaskbarProgress.idl \nvoid setProgressState( nsTaskbarProgressState state, unsignedlong long currentValue, unsignedlong long maxValue) \nnsIDOMPopStateEvent.idl \nvoid initPopStateEvent( DOMString typeArg, boolean canBubbleArg, boolean cancelableArg, nsIVariant stateArg) \nnsIDOMNamedNodeMap.idl \nnsIDOMNode getNamedItem( DOMString name) \nnsIDOMNode setNamedItem( nsIDOMNode arg) \nnsIDOMNode removeNamedItem( DOMString name) \nnsIDOMNode item( unsignedlong index) \nnsIDOMNode getNamedItemNS( DOMString namespaceURI, DOMString localName) \nnsIDOMNode setNamedItemNS( nsIDOMNode arg) \nnsIDOMNode removeNamedItemNS( DOMString namespaceURI, DOMString localName) \nnsIObserver.idl \nvoid observe( nsISupports aSubject, string aTopic, wstring aData ) \nmozIStorageService.idl \nmozIStorageConnection openSpecialDatabase( string aStorageKey) \nmozIStorageConnection openDatabase( nsIFile aDatabaseFile) \nmozIStorageConnection openUnsharedDatabase( nsIFile aDatabaseFile) \nnsIFile backupDatabaseFile( nsIFile aDBFile, AString aBackupFileName, nsIFile aBackupParentDirectory) \nnsIHTMLAbsPosEditor.idl \nattribute boolean absolutePositioningEnabled \nattribute boolean snapToGridEnabled \nattribute unsignedlong gridSize \nvoid absolutePositionSelection( boolean aEnabled) \nvoid relativeChangeZIndex( long aChange) \nvoid absolutelyPositionElement( nsIDOMElement aElement, boolean aEnabled) \nvoid setElementPosition( nsIDOMElement aElement, long aX, long aY) \nlong getElementZIndex( nsIDOMElement aElement) \nvoid setElementZIndex( nsIDOMElement aElement, long aZorder) \nlong relativeChangeElementZIndex( nsIDOMElement aElement, long aChange) \nvoid showGrabberOnElement( nsIDOMElement aElement) \nvoid hideGrabber() \nvoid refreshGrabber() \nnsIFormSubmitObserver.idl \nvoid notify( nsIDOMHTMLFormElement formNode, nsIDOMWindowInternal window, nsIURI actionURL, boolean cancelSubmit) \nvoid notifyInvalidSubmit( nsIDOMHTMLFormElement formNode, nsIArray invalidElements) \nnsIDOMNSElement.idl \nattribute long scrollTop \nattribute long scrollLeft \nnsIDOMNodeList getElementsByClassName( DOMString classes) \nnsIDOMClientRectList getClientRects() \nnsIDOMClientRect getBoundingClientRect() \nvoid setCapture( boolean retargetToElement) \nvoid releaseCapture() \nboolean mozMatchesSelector( DOMString selector) \nnsISelectionDisplay.idl \nvoid setSelectionFlags( short toggle) \nshort getSelectionFlags() \nAccessibleRelation.idl \nnsIXULTemplateBuilder.idl \nattribute nsISupports datasource \nvoid rebuild() \nvoid refresh() \nvoid addResult( nsIXULTemplateResult aResult, nsIDOMNode aQueryNode) \nvoid removeResult( nsIXULTemplateResult aResult) \nvoid replaceResult( nsIXULTemplateResult aOldResult, nsIXULTemplateResult aNewResult, nsIDOMNode aQueryNode) \nvoid resultBindingChanged( nsIXULTemplateResult aResult) \nnsIXULTemplateResult getResultForId( AString aId) \nnsIXULTemplateResult getResultForContent( nsIDOMElement aElement) \nboolean hasGeneratedContent( nsIRDFResource aNode, nsIAtom aTag) \nvoid addRuleFilter( nsIDOMNode aRule, nsIXULTemplateRuleFilter aFilter) \nvoid init( nsIContent aElement) \nvoid createContents( nsIContent aElement, boolean aForceCreation) \nvoid addListener( nsIXULBuilderListener aListener) \nvoid removeListener( nsIXULBuilderListener aListener) \nnsIRDFDelegateFactory.idl \nvoid CreateDelegate( nsIRDFResource aOuter, string aKey, nsIIDRef aIID, nsQIResult aResult) \nnsIBrowserHistory.idl \nvoid addPageWithDetails( nsIURI aURI, wstring aTitle, long long aLastVisited) \nvoid removePage( nsIURI aURI) \nvoid removePages( nsIURI aURIs, unsignedlong aLength, boolean aDoBatchNotify) \nvoid removePagesFromHost( AUTF8String aHost, boolean aEntireDomain) \nvoid removePagesByTimeframe( long long aBeginTime, long long aEndTime) \nvoid removeVisitsByTimeframe( long long aBeginTime, long long aEndTime) \nvoid removeAllPages() \nvoid hidePage( nsIURI aURI) \nvoid markPageAsTyped( nsIURI aURI) \nvoid markPageAsFollowedLink( nsIURI aURI) \nvoid registerOpenPage( nsIURI aURI) \nvoid unregisterOpenPage( nsIURI aURI) \nnsISSLCertErrorDialog.idl \nvoid showCertError( nsIInterfaceRequestor ctx, nsISSLStatus status, nsIX509Cert cert, AString textErrorMessage, AString htmlErrorMessage, ACString hostName, PRUint32 portNumber) \nnsIModule.idl \nvoid getClassObject( nsIComponentManager aCompMgr, nsCIDRef aClass, nsIIDRef aIID, nsQIResult aResult) \nvoid registerSelf( nsIComponentManager aCompMgr, nsIFile aLocation, string aLoaderStr, string aType) \nvoid unregisterSelf( nsIComponentManager aCompMgr, nsIFile aLocation, string aLoaderStr) \nboolean canUnload( nsIComponentManager aCompMgr) \nnsIDirectoryEnumerator.idl \nvoid close() \nnsIMutableArray.idl \nvoid appendElement( nsISupports element, boolean weak) \nvoid removeElementAt( unsignedlong index) \nvoid insertElementAt( nsISupports element, unsignedlong index, boolean weak) \nvoid replaceElementAt( nsISupports element, unsignedlong index, boolean weak) \nvoid clear() \nAccessibleApplication.idl \nHRESULT appName( BSTR name) \nHRESULT appVersion( BSTR version) \nHRESULT toolkitName( BSTR name) \nHRESULT toolkitVersion( BSTR version) \nAccessibleHypertext.idl \nHRESULT nHyperlinks( long hyperlinkCount) \nHRESULT hyperlink( long index, IAccessibleHyperlink hyperlink) \nHRESULT hyperlinkIndex( long charIndex, long hyperlinkIndex) \nAccessibleComponent.idl \nHRESULT locationInParent( long x, long y) \nHRESULT foreground( IA2Color foreground) \nHRESULT background( IA2Color background) \nnsIWindowWatcher.idl \nnsIDOMWindow openWindow( nsIDOMWindow aParent, string aUrl, string aName, string aFeatures, nsISupports aArguments) \nvoid unregisterNotification( nsIObserver aObserver) \nnsISimpleEnumerator getWindowEnumerator() \nnsIPrompt getNewPrompter( nsIDOMWindow aParent) \nnsIAuthPrompt getNewAuthPrompter( nsIDOMWindow aParent) \nvoid setWindowCreator( nsIWindowCreator creator) \nnsIWebBrowserChrome getChromeForWindow( nsIDOMWindow aWindow) \nnsIDOMWindow getWindowByName( wstring aTargetName, nsIDOMWindow aCurrentWindow) \nAccessibleEditableText.idl \nHRESULT copyText ( long startOffset, long endOffset) \nHRESULT deleteText ( long startOffset, long endOffset) \nHRESULT insertText ( long offset, BSTR text) \nHRESULT cutText ( long startOffset,long endOffset) \nHRESULT pasteText ( long offset) \nHRESULT replaceText ( long startOffset, long endOffset, BSTR text) \nHRESULT setAttributes ( long startOffset, long endOffset, BSTR attributes) \nAccessibleTable.idl \nHRESULT accessibleAt ( long row, long column, IUnknown accessible) \nHRESULT caption( IUnknown accessible) \nHRESULT childIndex( long rowIndex, long columnIndex, long cellIndex) \nHRESULT columnDescription( long column, BSTR description) \nHRESULT columnExtentAt( long row, long column, long nColumnsSpanned) \nHRESULT columnHeader( IAccessibleTable accessibleTable, long startingRowIndex) \nHRESULT columnIndex( long cellIndex, long columnIndex) \nHRESULT nColumns( long columnCount) \nHRESULT nRows( long rowCount) \nHRESULT nSelectedChildren( long cellCount) \nHRESULT nSelectedColumns( long columnCount) \nHRESULT nSelectedRows( long rowCount) \nHRESULT rowDescription( long row, BSTR description) \nHRESULT rowExtentAt( long row, long column, long nRowsSpanned) \nHRESULT rowHeader( IAccessibleTable accessibleTable, long startingColumnIndex) \nHRESULT rowIndex( long cellIndex, long rowIndex) \nHRESULT selectedChildren( long maxChildren, long children, long nChildren) \nHRESULT selectedColumns( long maxColumns, long columns, long nColumns) \nHRESULT selectedRows( long maxRows, long rows, long nRows) \nHRESULT summary( IUnknown accessible) \nHRESULT isColumnSelected( long column, boolean isSelected) \nHRESULT isRowSelected( long row, boolean isSelected) \nHRESULT isSelected( long row, long column, boolean isSelected) \nHRESULT selectRow( long row) \nHRESULT selectColumn( long column) \nHRESULT unselectRow( long row) \nHRESULT unselectColumn( long column) \nHRESULT rowColumnExtentsAtIndex( long index, long row, long column, long rowExtents, long columnExtents, boolean isSelected) \nHRESULT modelChange( IA2TableModelChange modelChange) \nnsILocalFile.idl \nattribute PRBool followLinks \nattribute ACString persistentDescriptor \nvoid initWithPath ( AString filePath) \nvoid initWithFile ( nsILocalFile aFile) \nPRFileDescStar openNSPRFileDesc ( long flags, long mode) \nFILE openANSIFileDesc ( string mode) \nPRLibraryStar load() \nvoid appendRelativePath ( AString relativeFilePath) \nvoid reveal() \nvoid launch() \nACString getRelativeDescriptor ( nsILocalFile fromFile) \nvoid setRelativeDescriptor ( nsILocalFile fromFile, ACString relativeDesc)  \nnsIVariant.idl \nPRUint8 getAsInt8() \nPRInt16 getAsInt16() \nPRInt32 getAsInt32() \nPRInt64 getAsInt64() \nPRUint8 getAsUint8() \nPRUint16 getAsUint16() \nPRUint32 getAsUint32() \nPRUint64 getAsUint64() \nfloat getAsFloat() \ndouble getAsDouble() \nPRBool getAsBool() \nchar getAsChar() \nwchar getAsWChar() \nnsresult getAsID(out nsID retval) \nAString getAsAString() \nDOMString getAsDOMString() \nACString getAsACString() \nAUTF8String getAsAUTF8String() \nstring getAsString() \nwstring getAsWString() \nnsISupports getAsISupports() \njsval getAsJSVal() \nvoid getAsInterface ( nsIIDPtr iid, nsQIResult iface) \nnsresult getAsArray ( PRUint16 type, out nsIID iid, PRUint32 count, voidPtr ptr) \nvoid getAsStringWithSize ( PRUint32 size, string str) \nvoid getAsWStringWithSize ( PRUint32 size, wstring str) \nnsIWritableVariant.idl \nattribute PRBool writable \nvoid setAsInt8 ( PRUint8 aValue) \nvoid setAsInt16 ( PRInt16 aValue) \nvoid setAsInt32 ( PRInt32 aValue) \nvoid setAsInt64 ( PRInt64 aValue) \nvoid setAsUint8 ( PRUint8 aValue) \nvoid setAsUint16 ( PRUint16 aValue) \nvoid setAsUint32 ( PRUint32 aValue) \nvoid setAsUint64 ( PRUint64 aValue) \nvoid setAsFloat ( float aValue) \nvoid setAsDouble ( double aValue) \nvoid setAsBool ( PRBool aValue) \nvoid setAsChar ( char aValue) \nvoid setAsWChar ( wchar aValue) \nvoid setAsID ( nsIDRef aValue) \nvoid setAsAString ( AString aValue) \nvoid setAsDOMString ( DOMString aValue) \nvoid setAsACString ( ACString aValue) \nvoid setAsAUTF8String ( AUTF8String aValue) \nvoid setAsString ( string aValue) \nvoid setAsWString ( wstring aValue) \nvoid setAsISupports ( nsISupports aValue) \nvoid setAsInterface ( nsIIDRef iid, nsQIResult iface) \nvoid setAsArray ( PRUint16 type, nsIIDPtr iid, PRUint32 count, voidPtr ptr) \nvoid setAsStringWithSize ( PRUint32 size, string str) \nvoid setAsWStringWithSize ( PRUint32 size, wstring str) \nvoid setAsVoid() \nvoid setAsEmpty() \nvoid setAsEmptyArray() \nvoid setFromVariant( nsIVariant aValue) \nnsISupports.idl  \nnsIDOMDocumentFragment.idl  \nnsIDOMClientRect.idl  \nmozIStorageAsyncStatement.idl  \nnsIContentViewer.idl \nattribute nsISupports container \nattribute nsIDOMDocument DOMDocument \nattribute nsIContentViewer previousViewer \nattribute boolean sticky \nvoid init ( nsIWidgetPtr aParentWidget, nsIntRectRef aBounds) \nvoid loadStart ( nsISupports aDoc) \nvoid loadComplete ( unsignedlong aStatus) \nboolean permitUnload ( boolean aCallerClosesWindow) \nvoid resetCloseWindow() \nvoid pageHide ( boolean isUnload) \nvoid close ( nsISHEntry historyEntry) \nvoid destroy() \nvoid stop() \nnsIDocumentPtr getDocument() \nvoid getBounds ( nsIntRectRef aBounds) \nvoid setBounds ( nsIntRectRef aBounds) \nvoid move ( long aX, long aY) \nvoid show() \nvoid hide() \nboolean requestWindowClose() \nvoid open ( nsISupports aState, nsISHEntry aSHEntry) \nvoid clearHistoryEntry() \nnsIInputStream.idl \nvoid close() \nunsignedlong available() \nunsignedlong read( charPtr aBuf, unsignedlong aCount) 	 \nunsignedlong readSegments( nsWriteSegmentFun aWriter, voidPtr aClosure, unsignedlong aCount)  \nboolean isNonBlocking()  \nnsIDocumentPtr.idl \nnsIDOMDocumentFragment.idl \nmozIStorageAsyncStatement.idl \nnsISupports.idl";